
test_nucleo_g431kb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eae0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800ecc0  0800ecc0  0001ecc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f208  0800f208  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800f208  0800f208  0001f208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f210  0800f210  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f210  0800f210  0001f210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f214  0800f214  0001f214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800f218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  20000238  0800f44c  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  0800f44c  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023309  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380d  00000000  00000000  0004356d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00046d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c68  00000000  00000000  00048b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022833  00000000  00000000  0004a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4d4  00000000  00000000  0006cfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3bbd  00000000  00000000  0008c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017007c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009814  00000000  00000000  001700cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eca8 	.word	0x0800eca8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	0800eca8 	.word	0x0800eca8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <init_hack_led>:
	HAL_Delay(50);
	HAL_GPIO_WritePin(gpio.gpio, gpio.pin_num, GPIO_PIN_SET);
	HAL_Delay(50);
}

void init_hack_led(hack_led_t* hack_led, GPIO_TypeDef* gpio, uint16_t pin_num){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	80fb      	strh	r3, [r7, #6]
	hack_led->current_state = TURN_OFF;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	721a      	strb	r2, [r3, #8]
	hack_led->gpio.gpio = gpio;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	601a      	str	r2, [r3, #0]
	hack_led->gpio.pin_num = pin_num;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	809a      	strh	r2, [r3, #4]
//	HAL_GPIO_WritePin(gpio, pin_num, GPIO_PIN_SET);
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <hack_led_off>:

_Bool hack_led_off(hack_led_t* hack_led){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
//	hack_led_state state = hack_led->current_state;
//	for(; state != 0; state = (state + 1) % 5)
//		gpio_rising(hack_led->gpio);
//	hack_led->current_state = state;
	return hack_led_set(hack_led, TURN_OFF);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f806 	bl	8000fe4 <hack_led_set>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <hack_led_set>:
//		gpio_rising(hack_led->gpio);
//	hack_led->current_state = current_state;
//	return hack_led_true;
//}

_Bool hack_led_set(hack_led_t* hack_led, hack_led_state state){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	hack_led_state current_state = hack_led->current_state;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7a1b      	ldrb	r3, [r3, #8]
 8000ff4:	73fb      	strb	r3, [r7, #15]
	if(current_state == state) return hack_led_false;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d101      	bne.n	8001002 <hack_led_set+0x1e>
 8000ffe:	2300      	movs	r3, #0
 8001000:	e01a      	b.n	8001038 <hack_led_set+0x54>
	count = (current_state > state) ? (state + 5) - current_state : state - current_state;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	429a      	cmp	r2, r3
 8001008:	d906      	bls.n	8001018 <hack_led_set+0x34>
 800100a:	78fa      	ldrb	r2, [r7, #3]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3305      	adds	r3, #5
 8001014:	b2db      	uxtb	r3, r3
 8001016:	e003      	b.n	8001020 <hack_led_set+0x3c>
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <hack_led_set+0x60>)
 8001022:	7013      	strb	r3, [r2, #0]
	count *= 2; // For Rising Edge
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <hack_led_set+0x60>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <hack_led_set+0x60>)
 800102e:	701a      	strb	r2, [r3, #0]
	hack_led->current_state = state;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	78fa      	ldrb	r2, [r7, #3]
 8001034:	721a      	strb	r2, [r3, #8]
	return hack_led_true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000254 	.word	0x20000254

08001048 <hack_led_gpio_set_reset>:

void hack_led_gpio_set_reset(hack_led_t* hack_led, GPIO_PinState pin_state){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hack_led->gpio.gpio, hack_led->gpio.pin_num, pin_state);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	889b      	ldrh	r3, [r3, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	4619      	mov	r1, r3
 8001060:	f005 fbaa 	bl	80067b8 <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <lsm9ds1_read_reg>:
  *
  */
int32_t lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	461a      	mov	r2, r3
 8001078:	460b      	mov	r3, r1
 800107a:	72fb      	strb	r3, [r7, #11]
 800107c:	4613      	mov	r3, r2
 800107e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	685c      	ldr	r4, [r3, #4]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6898      	ldr	r0, [r3, #8]
 8001088:	893b      	ldrh	r3, [r7, #8]
 800108a:	7af9      	ldrb	r1, [r7, #11]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	47a0      	blx	r4
 8001090:	6178      	str	r0, [r7, #20]

  return ret;
 8001092:	697b      	ldr	r3, [r7, #20]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}

0800109c <lsm9ds1_write_reg>:
  *
  */
int32_t lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	460b      	mov	r3, r1
 80010aa:	72fb      	strb	r3, [r7, #11]
 80010ac:	4613      	mov	r3, r2
 80010ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	7af9      	ldrb	r1, [r7, #11]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	47a0      	blx	r4
 80010c0:	6178      	str	r0, [r7, #20]

  return ret;
 80010c2:	697b      	ldr	r3, [r7, #20]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}

080010cc <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010f8 <lsm9ds1_from_fs4g_to_mg+0x2c>
 80010e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	3df9db23 	.word	0x3df9db23

080010fc <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001128 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	428c0000 	.word	0x428c0000

0800112c <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001142:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001158 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	3f147ae1 	.word	0x3f147ae1

0800115c <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	2301      	movs	r3, #1
 800116e:	2110      	movs	r1, #16
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff7b 	bl	800106c <lsm9ds1_read_reg>
 8001176:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	b2da      	uxtb	r2, r3
 8001186:	7a3b      	ldrb	r3, [r7, #8]
 8001188:	f362 03c4 	bfi	r3, r2, #3, #2
 800118c:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	2301      	movs	r3, #1
 8001194:	2110      	movs	r1, #16
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff80 	bl	800109c <lsm9ds1_write_reg>
 800119c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80011b4:	f107 0210 	add.w	r2, r7, #16
 80011b8:	2301      	movs	r3, #1
 80011ba:	2110      	movs	r1, #16
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff55 	bl	800106c <lsm9ds1_read_reg>
 80011c2:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	7c3b      	ldrb	r3, [r7, #16]
 80011d4:	f362 1347 	bfi	r3, r2, #5, #3
 80011d8:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80011da:	f107 0210 	add.w	r2, r7, #16
 80011de:	2301      	movs	r3, #1
 80011e0:	2110      	movs	r1, #16
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff5a 	bl	800109c <lsm9ds1_write_reg>
 80011e8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80011f0:	f107 020c 	add.w	r2, r7, #12
 80011f4:	2301      	movs	r3, #1
 80011f6:	2120      	movs	r1, #32
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff37 	bl	800106c <lsm9ds1_read_reg>
 80011fe:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d110      	bne.n	8001228 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	b2da      	uxtb	r2, r3
 8001210:	7b3b      	ldrb	r3, [r7, #12]
 8001212:	f362 1347 	bfi	r3, r2, #5, #3
 8001216:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	2301      	movs	r3, #1
 800121e:	2120      	movs	r1, #32
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff3b 	bl	800109c <lsm9ds1_write_reg>
 8001226:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d107      	bne.n	800123e <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	2301      	movs	r3, #1
 8001234:	2112      	movs	r1, #18
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff18 	bl	800106c <lsm9ds1_read_reg>
 800123c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d111      	bne.n	8001268 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	09db      	lsrs	r3, r3, #7
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7a3b      	ldrb	r3, [r7, #8]
 8001252:	f362 13c7 	bfi	r3, r2, #7, #1
 8001256:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001258:	f107 0208 	add.w	r2, r7, #8
 800125c:	2301      	movs	r3, #1
 800125e:	2112      	movs	r1, #18
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff1b 	bl	800109c <lsm9ds1_write_reg>
 8001266:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8001268:	697b      	ldr	r3, [r7, #20]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	460b      	mov	r3, r1
 800127c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	2301      	movs	r3, #1
 8001284:	2120      	movs	r1, #32
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fef0 	bl	800106c <lsm9ds1_read_reg>
 800128c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10f      	bne.n	80012b4 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	b2da      	uxtb	r2, r3
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	f362 03c4 	bfi	r3, r2, #3, #2
 80012a2:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80012a4:	f107 0208 	add.w	r2, r7, #8
 80012a8:	2301      	movs	r3, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fef5 	bl	800109c <lsm9ds1_write_reg>
 80012b2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b088      	sub	sp, #32
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80012cc:	f107 0218 	add.w	r2, r7, #24
 80012d0:	2301      	movs	r3, #1
 80012d2:	2122      	movs	r1, #34	; 0x22
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f7ff fec9 	bl	800106c <lsm9ds1_read_reg>
 80012da:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	f362 1386 	bfi	r3, r2, #6, #1
 80012f0:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80012f2:	f107 0218 	add.w	r2, r7, #24
 80012f6:	2301      	movs	r3, #1
 80012f8:	2122      	movs	r1, #34	; 0x22
 80012fa:	68b8      	ldr	r0, [r7, #8]
 80012fc:	f7ff fece 	bl	800109c <lsm9ds1_write_reg>
 8001300:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d107      	bne.n	8001318 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8001308:	f107 0214 	add.w	r2, r7, #20
 800130c:	2301      	movs	r3, #1
 800130e:	2124      	movs	r1, #36	; 0x24
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff feab 	bl	800106c <lsm9ds1_read_reg>
 8001316:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d119      	bne.n	8001352 <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	43db      	mvns	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	7d3b      	ldrb	r3, [r7, #20]
 800132c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001330:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7d3b      	ldrb	r3, [r7, #20]
 800133c:	f362 1386 	bfi	r3, r2, #6, #1
 8001340:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8001342:	f107 0214 	add.w	r2, r7, #20
 8001346:	2301      	movs	r3, #1
 8001348:	2124      	movs	r1, #36	; 0x24
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff fea6 	bl	800109c <lsm9ds1_write_reg>
 8001350:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 8001352:	69fb      	ldr	r3, [r7, #28]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8001368:	f107 0210 	add.w	r2, r7, #16
 800136c:	2301      	movs	r3, #1
 800136e:	2120      	movs	r1, #32
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fe7b 	bl	800106c <lsm9ds1_read_reg>
 8001376:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d125      	bne.n	80013ca <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	7c3b      	ldrb	r3, [r7, #16]
 800138a:	f362 0341 	bfi	r3, r2, #1, #1
 800138e:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	b2da      	uxtb	r2, r3
 8001398:	7c3b      	ldrb	r3, [r7, #16]
 800139a:	f362 0384 	bfi	r3, r2, #2, #3
 800139e:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	7c3b      	ldrb	r3, [r7, #16]
 80013ac:	f362 1346 	bfi	r3, r2, #5, #2
 80013b0:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 80013b2:	7c3b      	ldrb	r3, [r7, #16]
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 80013ba:	f107 0210 	add.w	r2, r7, #16
 80013be:	2301      	movs	r3, #1
 80013c0:	2120      	movs	r1, #32
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fe6a 	bl	800109c <lsm9ds1_write_reg>
 80013c8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d107      	bne.n	80013e0 <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 80013d0:	f107 020c 	add.w	r2, r7, #12
 80013d4:	2301      	movs	r3, #1
 80013d6:	2122      	movs	r1, #34	; 0x22
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fe47 	bl	800106c <lsm9ds1_read_reg>
 80013de:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d111      	bne.n	800140a <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
 80013f4:	f362 0301 	bfi	r3, r2, #0, #2
 80013f8:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	2301      	movs	r3, #1
 8001400:	2122      	movs	r1, #34	; 0x22
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe4a 	bl	800109c <lsm9ds1_write_reg>
 8001408:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8001410:	f107 0208 	add.w	r2, r7, #8
 8001414:	2301      	movs	r3, #1
 8001416:	2123      	movs	r1, #35	; 0x23
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fe27 	bl	800106c <lsm9ds1_read_reg>
 800141e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d110      	bne.n	8001448 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	b2da      	uxtb	r2, r3
 8001430:	7a3b      	ldrb	r3, [r7, #8]
 8001432:	f362 0383 	bfi	r3, r2, #2, #2
 8001436:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8001438:	f107 0208 	add.w	r2, r7, #8
 800143c:	2301      	movs	r3, #1
 800143e:	2123      	movs	r1, #35	; 0x23
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fe2b 	bl	800109c <lsm9ds1_write_reg>
 8001446:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8001448:	697b      	ldr	r3, [r7, #20]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 800145e:	f107 0208 	add.w	r2, r7, #8
 8001462:	2301      	movs	r3, #1
 8001464:	2121      	movs	r1, #33	; 0x21
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fe00 	bl	800106c <lsm9ds1_read_reg>
 800146c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10f      	bne.n	8001494 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	7a3b      	ldrb	r3, [r7, #8]
 800147e:	f362 1346 	bfi	r3, r2, #5, #2
 8001482:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8001484:	f107 0208 	add.w	r2, r7, #8
 8001488:	2301      	movs	r3, #1
 800148a:	2121      	movs	r1, #33	; 0x21
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fe05 	bl	800109c <lsm9ds1_write_reg>
 8001492:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8001494:	68fb      	ldr	r3, [r7, #12]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 80014a8:	f107 020c 	add.w	r2, r7, #12
 80014ac:	2306      	movs	r3, #6
 80014ae:	2118      	movs	r1, #24
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fddb 	bl	800106c <lsm9ds1_read_reg>
 80014b6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	7b3b      	ldrb	r3, [r7, #12]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3302      	adds	r3, #2
 80014e0:	b212      	sxth	r2, r2
 80014e2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3302      	adds	r3, #2
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3302      	adds	r3, #2
 80014fe:	b212      	sxth	r2, r2
 8001500:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001502:	7c7a      	ldrb	r2, [r7, #17]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	3304      	adds	r3, #4
 8001508:	b212      	sxth	r2, r2
 800150a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3304      	adds	r3, #4
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	b29b      	uxth	r3, r3
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b29a      	uxth	r2, r3
 800151a:	7c3b      	ldrb	r3, [r7, #16]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b29a      	uxth	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3304      	adds	r3, #4
 8001526:	b212      	sxth	r2, r2
 8001528:	801a      	strh	r2, [r3, #0]

  return ret;
 800152a:	697b      	ldr	r3, [r7, #20]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 800153e:	f107 020c 	add.w	r2, r7, #12
 8001542:	2306      	movs	r3, #6
 8001544:	2128      	movs	r1, #40	; 0x28
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fd90 	bl	800106c <lsm9ds1_read_reg>
 800154c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800154e:	7b7b      	ldrb	r3, [r7, #13]
 8001550:	b21a      	sxth	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	b29b      	uxth	r3, r3
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b29a      	uxth	r2, r3
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3302      	adds	r3, #2
 8001576:	b212      	sxth	r2, r2
 8001578:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	b29b      	uxth	r3, r3
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b29a      	uxth	r2, r3
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3302      	adds	r3, #2
 8001594:	b212      	sxth	r2, r2
 8001596:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001598:	7c7a      	ldrb	r2, [r7, #17]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	3304      	adds	r3, #4
 800159e:	b212      	sxth	r2, r2
 80015a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3304      	adds	r3, #4
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	7c3b      	ldrb	r3, [r7, #16]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3304      	adds	r3, #4
 80015bc:	b212      	sxth	r2, r2
 80015be:	801a      	strh	r2, [r3, #0]

  return ret;
 80015c0:	697b      	ldr	r3, [r7, #20]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 80015d4:	f107 020c 	add.w	r2, r7, #12
 80015d8:	2306      	movs	r3, #6
 80015da:	2128      	movs	r1, #40	; 0x28
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd45 	bl	800106c <lsm9ds1_read_reg>
 80015e2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80015e4:	7b7b      	ldrb	r3, [r7, #13]
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	7b3b      	ldrb	r3, [r7, #12]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b29b      	uxth	r3, r3
 8001600:	b21a      	sxth	r2, r3
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3302      	adds	r3, #2
 800160c:	b212      	sxth	r2, r2
 800160e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	3302      	adds	r3, #2
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29a      	uxth	r2, r3
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b29a      	uxth	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3302      	adds	r3, #2
 800162a:	b212      	sxth	r2, r2
 800162c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800162e:	7c7a      	ldrb	r2, [r7, #17]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	b212      	sxth	r2, r2
 8001636:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3304      	adds	r3, #4
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	b29b      	uxth	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b29a      	uxth	r2, r3
 8001646:	7c3b      	ldrb	r3, [r7, #16]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4413      	add	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3304      	adds	r3, #4
 8001652:	b212      	sxth	r2, r2
 8001654:	801a      	strh	r2, [r3, #0]

  return ret;
 8001656:	697b      	ldr	r3, [r7, #20]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	2301      	movs	r3, #1
 8001670:	210f      	movs	r1, #15
 8001672:	68b8      	ldr	r0, [r7, #8]
 8001674:	f7ff fcfa 	bl	800106c <lsm9ds1_read_reg>
 8001678:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	2301      	movs	r3, #1
 8001686:	210f      	movs	r1, #15
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fcef 	bl	800106c <lsm9ds1_read_reg>
 800168e:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8001690:	697b      	ldr	r3, [r7, #20]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 80016aa:	2301      	movs	r3, #1
 80016ac:	2117      	movs	r1, #23
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7ff fcdc 	bl	800106c <lsm9ds1_read_reg>
 80016b4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d106      	bne.n	80016ca <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 80016bc:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 80016be:	2301      	movs	r3, #1
 80016c0:	2127      	movs	r1, #39	; 0x27
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff fcd2 	bl	800106c <lsm9ds1_read_reg>
 80016c8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80016ca:	697b      	ldr	r3, [r7, #20]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80016e2:	f107 0214 	add.w	r2, r7, #20
 80016e6:	2301      	movs	r3, #1
 80016e8:	2122      	movs	r1, #34	; 0x22
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f7ff fcbe 	bl	800106c <lsm9ds1_read_reg>
 80016f0:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10f      	bne.n	8001718 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	7d3b      	ldrb	r3, [r7, #20]
 8001702:	f362 0300 	bfi	r3, r2, #0, #1
 8001706:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8001708:	f107 0214 	add.w	r2, r7, #20
 800170c:	2301      	movs	r3, #1
 800170e:	2122      	movs	r1, #34	; 0x22
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f7ff fcc3 	bl	800109c <lsm9ds1_write_reg>
 8001716:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 800171e:	f107 0218 	add.w	r2, r7, #24
 8001722:	2301      	movs	r3, #1
 8001724:	2121      	movs	r1, #33	; 0x21
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fca0 	bl	800106c <lsm9ds1_read_reg>
 800172c:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10f      	bne.n	8001754 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	7e3b      	ldrb	r3, [r7, #24]
 800173e:	f362 0382 	bfi	r3, r2, #2, #1
 8001742:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8001744:	f107 0218 	add.w	r2, r7, #24
 8001748:	2301      	movs	r3, #1
 800174a:	2121      	movs	r1, #33	; 0x21
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff fca5 	bl	800109c <lsm9ds1_write_reg>
 8001752:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8001754:	69fb      	ldr	r3, [r7, #28]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b088      	sub	sp, #32
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800176a:	f107 0214 	add.w	r2, r7, #20
 800176e:	2301      	movs	r3, #1
 8001770:	2122      	movs	r1, #34	; 0x22
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f7ff fc7a 	bl	800106c <lsm9ds1_read_reg>
 8001778:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d114      	bne.n	80017aa <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8001780:	f107 0218 	add.w	r2, r7, #24
 8001784:	2301      	movs	r3, #1
 8001786:	2121      	movs	r1, #33	; 0x21
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fc6f 	bl	800106c <lsm9ds1_read_reg>
 800178e:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8001790:	7e3b      	ldrb	r3, [r7, #24]
 8001792:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	7d3b      	ldrb	r3, [r7, #20]
 800179a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80017aa:	69fb      	ldr	r3, [r7, #28]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80017c0:	f107 0208 	add.w	r2, r7, #8
 80017c4:	2301      	movs	r3, #1
 80017c6:	2110      	movs	r1, #16
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc4f 	bl	800106c <lsm9ds1_read_reg>
 80017ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10f      	bne.n	80017f6 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 80017d6:	78fb      	ldrb	r3, [r7, #3]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	7a3b      	ldrb	r3, [r7, #8]
 80017e0:	f362 0301 	bfi	r3, r2, #0, #2
 80017e4:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80017e6:	f107 0208 	add.w	r2, r7, #8
 80017ea:	2301      	movs	r3, #1
 80017ec:	2110      	movs	r1, #16
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fc54 	bl	800109c <lsm9ds1_write_reg>
 80017f4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	2301      	movs	r3, #1
 8001812:	2111      	movs	r1, #17
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc29 	bl	800106c <lsm9ds1_read_reg>
 800181a:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	b2da      	uxtb	r2, r3
 800182a:	7c3b      	ldrb	r3, [r7, #16]
 800182c:	f362 0301 	bfi	r3, r2, #0, #2
 8001830:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8001832:	f107 0210 	add.w	r2, r7, #16
 8001836:	2301      	movs	r3, #1
 8001838:	2111      	movs	r1, #17
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fc2e 	bl	800109c <lsm9ds1_write_reg>
 8001840:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001848:	f107 020c 	add.w	r2, r7, #12
 800184c:	2301      	movs	r3, #1
 800184e:	2112      	movs	r1, #18
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fc0b 	bl	800106c <lsm9ds1_read_reg>
 8001856:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d110      	bne.n	8001880 <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7b3b      	ldrb	r3, [r7, #12]
 800186a:	f362 1386 	bfi	r3, r2, #6, #1
 800186e:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001870:	f107 020c 	add.w	r2, r7, #12
 8001874:	2301      	movs	r3, #1
 8001876:	2112      	movs	r1, #18
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fc0f 	bl	800109c <lsm9ds1_write_reg>
 800187e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8001880:	697b      	ldr	r3, [r7, #20]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8001896:	f107 0208 	add.w	r2, r7, #8
 800189a:	2301      	movs	r3, #1
 800189c:	2112      	movs	r1, #18
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fbe4 	bl	800106c <lsm9ds1_read_reg>
 80018a4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10f      	bne.n	80018cc <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	7a3b      	ldrb	r3, [r7, #8]
 80018b6:	f362 0303 	bfi	r3, r2, #0, #4
 80018ba:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80018bc:	f107 0208 	add.w	r2, r7, #8
 80018c0:	2301      	movs	r3, #1
 80018c2:	2112      	movs	r1, #18
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fbe9 	bl	800109c <lsm9ds1_write_reg>
 80018ca:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80018cc:	68fb      	ldr	r3, [r7, #12]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80018e2:	f107 0208 	add.w	r2, r7, #8
 80018e6:	2301      	movs	r3, #1
 80018e8:	2120      	movs	r1, #32
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fbbe 	bl	800106c <lsm9ds1_read_reg>
 80018f0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d118      	bne.n	800192a <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	7a3b      	ldrb	r3, [r7, #8]
 8001902:	f362 0301 	bfi	r3, r2, #0, #2
 8001906:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	7a3b      	ldrb	r3, [r7, #8]
 8001914:	f362 0382 	bfi	r3, r2, #2, #1
 8001918:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800191a:	f107 0208 	add.w	r2, r7, #8
 800191e:	2301      	movs	r3, #1
 8001920:	2120      	movs	r1, #32
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fbba 	bl	800109c <lsm9ds1_write_reg>
 8001928:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8001940:	f107 0208 	add.w	r2, r7, #8
 8001944:	2301      	movs	r3, #1
 8001946:	2121      	movs	r1, #33	; 0x21
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fb8f 	bl	800106c <lsm9ds1_read_reg>
 800194e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	7a3b      	ldrb	r3, [r7, #8]
 8001960:	f362 0382 	bfi	r3, r2, #2, #1
 8001964:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	2301      	movs	r3, #1
 800196c:	2121      	movs	r1, #33	; 0x21
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fb94 	bl	800109c <lsm9ds1_write_reg>
 8001974:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800198c:	f107 0208 	add.w	r2, r7, #8
 8001990:	2301      	movs	r3, #1
 8001992:	2121      	movs	r1, #33	; 0x21
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fb69 	bl	800106c <lsm9ds1_read_reg>
 800199a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	7a3b      	ldrb	r3, [r7, #8]
 80019ae:	f362 13c7 	bfi	r3, r2, #7, #1
 80019b2:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	7a3b      	ldrb	r3, [r7, #8]
 80019be:	f362 1346 	bfi	r3, r2, #5, #2
 80019c2:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80019c4:	f107 0208 	add.w	r2, r7, #8
 80019c8:	2301      	movs	r3, #1
 80019ca:	2121      	movs	r1, #33	; 0x21
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fb65 	bl	800109c <lsm9ds1_write_reg>
 80019d2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 80019d4:	68fb      	ldr	r3, [r7, #12]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <invSqrt>:

float invSampleFreq2 = 1.0f / 119.0f;

char angleComputed = 0;

static float invSqrt(float x){
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 80019ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	613b      	str	r3, [r7, #16]
  long i = *(long *)&y;
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	105a      	asrs	r2, r3, #1
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <invSqrt+0x9c>)
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
  y = *(float *)&i;
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8001a18:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	edc7 7a04 	vstr	s15, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8001a40:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a64:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	ee07 3a90 	vmov	s15, r3
}
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	5f3759df 	.word	0x5f3759df

08001a80 <madgwickUpdate>:

void madgwickUpdate(float gx, float gy, float gz,
					float ax, float ay, float az,
					float mx, float my, float mz,
					float dt)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ae      	sub	sp, #184	; 0xb8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001a8a:	edc7 0a08 	vstr	s1, [r7, #32]
 8001a8e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001a92:	edc7 1a06 	vstr	s3, [r7, #24]
 8001a96:	ed87 2a05 	vstr	s4, [r7, #20]
 8001a9a:	edc7 2a04 	vstr	s5, [r7, #16]
 8001a9e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001aa2:	edc7 3a02 	vstr	s7, [r7, #8]
 8001aa6:	ed87 4a01 	vstr	s8, [r7, #4]
 8001aaa:	edc7 4a00 	vstr	s9, [r7]
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1,
		  _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3,
		  q2q2, q2q3, q3q3;
	 // Convert gyroscope degrees/sec to radians/sec
	  gx *= 0.0174533f;
 8001aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ab2:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 8001e48 <madgwickUpdate+0x3c8>
 8001ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  gy *= 0.0174533f;
 8001abe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ac2:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001e48 <madgwickUpdate+0x3c8>
 8001ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aca:	edc7 7a08 	vstr	s15, [r7, #32]
	  gz *= 0.0174533f;
 8001ace:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ad2:	ed9f 7add 	vldr	s14, [pc, #884]	; 8001e48 <madgwickUpdate+0x3c8>
 8001ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ada:	edc7 7a07 	vstr	s15, [r7, #28]

	  // Rate of change of quaternion from gyroscope
	  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001ade:	4bdb      	ldr	r3, [pc, #876]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ae8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	4bd7      	ldr	r3, [pc, #860]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001af2:	edd3 6a00 	vldr	s13, [r3]
 8001af6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b02:	4bd4      	ldr	r3, [pc, #848]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001b04:	edd3 6a00 	vldr	s13, [r3]
 8001b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001b20:	4bcd      	ldr	r3, [pc, #820]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001b22:	ed93 7a00 	vldr	s14, [r3]
 8001b26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	4bc8      	ldr	r3, [pc, #800]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001b30:	edd3 6a00 	vldr	s13, [r3]
 8001b34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b40:	4bc4      	ldr	r3, [pc, #784]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001b42:	edd3 6a00 	vldr	s13, [r3]
 8001b46:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001b5e:	4bbe      	ldr	r3, [pc, #760]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001b60:	ed93 7a00 	vldr	s14, [r3]
 8001b64:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	4bb7      	ldr	r3, [pc, #732]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001b6e:	edd3 6a00 	vldr	s13, [r3]
 8001b72:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b7e:	4bb5      	ldr	r3, [pc, #724]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001b80:	edd3 6a00 	vldr	s13, [r3]
 8001b84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b98:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001b9c:	4bae      	ldr	r3, [pc, #696]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001b9e:	ed93 7a00 	vldr	s14, [r3]
 8001ba2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	4ba8      	ldr	r3, [pc, #672]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001bac:	edd3 6a00 	vldr	s13, [r3]
 8001bb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bbc:	4ba4      	ldr	r3, [pc, #656]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001bbe:	edd3 6a00 	vldr	s13, [r3]
 8001bc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	  // Compute feedback only if accelerometer measurement valid (avoids NaN in
	  // accelerometer normalisation)
	  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001bda:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	d10e      	bne.n	8001c06 <madgwickUpdate+0x186>
 8001be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d107      	bne.n	8001c06 <madgwickUpdate+0x186>
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	f000 85a1 	beq.w	8002748 <madgwickUpdate+0xcc8>

	    // Normalise accelerometer measurement
	    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001c06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c0a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f7ff fed9 	bl	80019e0 <invSqrt>
 8001c2e:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	    ax *= recipNorm;
 8001c32:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c36:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	edc7 7a06 	vstr	s15, [r7, #24]
	    ay *= recipNorm;
 8001c42:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c46:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4e:	edc7 7a05 	vstr	s15, [r7, #20]
	    az *= recipNorm;
 8001c52:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c56:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	edc7 7a04 	vstr	s15, [r7, #16]

	    // Normalise magnetometer measurement
	    recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c66:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	eeb0 0a67 	vmov.f32	s0, s15
 8001c86:	f7ff feab 	bl	80019e0 <invSqrt>
 8001c8a:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	    mx *= recipNorm;
 8001c8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c92:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	edc7 7a03 	vstr	s15, [r7, #12]
	    my *= recipNorm;
 8001c9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ca2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	edc7 7a02 	vstr	s15, [r7, #8]
	    mz *= recipNorm;
 8001cae:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cb2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	edc7 7a01 	vstr	s15, [r7, #4]

	    // Auxiliary variables to avoid repeated arithmetic
	    _2q0mx = 2.0f * q0 * mx;
 8001cbe:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd0:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	    _2q0my = 2.0f * q0 * my;
 8001cd4:	4b60      	ldr	r3, [pc, #384]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cde:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	    _2q0mz = 2.0f * q0 * mz;
 8001cea:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	    _2q1mx = 2.0f * q1 * mx;
 8001d00:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	    _2q0 = 2.0f * q0;
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d20:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	    _2q1 = 2.0f * q1;
 8001d24:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d2e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	    _2q2 = 2.0f * q2;
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d3c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	    _2q3 = 2.0f * q3;
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d4a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	    _2q0q2 = 2.0f * q0 * q2;
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	    _2q2q3 = 2.0f * q2 * q3;
 8001d66:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d70:	4b38      	ldr	r3, [pc, #224]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	    q0q0 = q0 * q0;
 8001d7e:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	    q0q1 = q0 * q1;
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001d94:	ed93 7a00 	vldr	s14, [r3]
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	    q0q2 = q0 * q2;
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	    q0q3 = q0 * q3;
 8001dba:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <madgwickUpdate+0x3d8>)
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	    q1q1 = q1 * q1;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	    q1q2 = q1 * q2;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001de4:	ed93 7a00 	vldr	s14, [r3]
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	    q1q3 = q1 * q3;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <madgwickUpdate+0x3cc>)
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	    q2q2 = q2 * q2;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	    q2q3 = q2 * q3;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <madgwickUpdate+0x3d0>)
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	    q3q3 = q3 * q3;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <madgwickUpdate+0x3d4>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8001e46:	e009      	b.n	8001e5c <madgwickUpdate+0x3dc>
 8001e48:	3c8efa39 	.word	0x3c8efa39
 8001e4c:	20000258 	.word	0x20000258
 8001e50:	2000025c 	.word	0x2000025c
 8001e54:	20000260 	.word	0x20000260
 8001e58:	20000004 	.word	0x20000004

	    // Reference direction of Earth's magnetic field
	    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 +
 8001e5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e60:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e68:	4bf5      	ldr	r3, [pc, #980]	; (8002240 <madgwickUpdate+0x7c0>)
 8001e6a:	edd3 6a00 	vldr	s13, [r3]
 8001e6e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7a:	4bf2      	ldr	r3, [pc, #968]	; (8002244 <madgwickUpdate+0x7c4>)
 8001e7c:	edd3 6a00 	vldr	s13, [r3]
 8001e80:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e90:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ea8:	4be6      	ldr	r3, [pc, #920]	; (8002244 <madgwickUpdate+0x7c4>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
	         _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001eb6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ebe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec2:	4bdf      	ldr	r3, [pc, #892]	; (8002240 <madgwickUpdate+0x7c0>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 +
 8001ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
	         _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001ed0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ed4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ee4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 +
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 +
 8001ef4:	4bd2      	ldr	r3, [pc, #840]	; (8002240 <madgwickUpdate+0x7c0>)
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001efe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f02:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f06:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f12:	4bcd      	ldr	r3, [pc, #820]	; (8002248 <madgwickUpdate+0x7c8>)
 8001f14:	edd3 6a00 	vldr	s13, [r3]
 8001f18:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f24:	4bc7      	ldr	r3, [pc, #796]	; (8002244 <madgwickUpdate+0x7c4>)
 8001f26:	edd3 6a00 	vldr	s13, [r3]
 8001f2a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f36:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f3a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f42:	ee37 7a67 	vsub.f32	s14, s14, s15
	         my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001f46:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f4a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 +
 8001f52:	ee37 7a27 	vadd.f32	s14, s14, s15
	         my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001f56:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f62:	4bb7      	ldr	r3, [pc, #732]	; (8002240 <madgwickUpdate+0x7c0>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f70:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f74:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 +
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	    _2bx = sqrtf(hx * hx + hy * hy);
 8001f84:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001f88:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f8c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f90:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f98:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9c:	f00b fd4c 	bl	800da38 <sqrtf>
 8001fa0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 +
 8001fa4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001fa8:	eeb1 7a67 	vneg.f32	s14, s15
 8001fac:	4ba5      	ldr	r3, [pc, #660]	; (8002244 <madgwickUpdate+0x7c4>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	4ba4      	ldr	r3, [pc, #656]	; (8002248 <madgwickUpdate+0x7c8>)
 8001fb8:	edd3 6a00 	vldr	s13, [r3]
 8001fbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc8:	edd7 6a01 	vldr	s13, [r7, #4]
 8001fcc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <madgwickUpdate+0x7c0>)
 8001fda:	edd3 6a00 	vldr	s13, [r3]
 8001fde:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fea:	edd7 6a01 	vldr	s13, [r7, #4]
 8001fee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
	           _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001ffa:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002002:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002006:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <madgwickUpdate+0x7c0>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 +
 8002010:	ee37 7a27 	vadd.f32	s14, s14, s15
	           _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8002014:	edd7 6a01 	vldr	s13, [r7, #4]
 8002018:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800201c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002020:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002024:	edd7 6a01 	vldr	s13, [r7, #4]
 8002028:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800202c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 +
 8002030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002034:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	    _4bx = 2.0f * _2bx;
 8002038:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800203c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002040:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	    _4bz = 2.0f * _2bz;
 8002044:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002048:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800204c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	    // Gradient decent algorithm corrective step
	    s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) +
 8002050:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002054:	eeb1 7a67 	vneg.f32	s14, s15
 8002058:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800205c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002060:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002064:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002068:	edd7 7a06 	vldr	s15, [r7, #24]
 800206c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002070:	ee27 7a27 	vmul.f32	s14, s14, s15
	         _2q1 * (2.0f * q0q1 + _2q2q3 - ay) -
 8002074:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002078:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800207c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002080:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002084:	edd7 7a05 	vldr	s15, [r7, #20]
 8002088:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800208c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002090:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) +
 8002094:	ee37 7a27 	vadd.f32	s14, s14, s15
	         _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <madgwickUpdate+0x7c4>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80020aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80020b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020b6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80020ba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80020be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020c2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80020c6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80020ca:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80020ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020d2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020d6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80020da:	edd7 7a03 	vldr	s15, [r7, #12]
 80020de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         _2q1 * (2.0f * q0q1 + _2q2q3 - ay) -
 80020e6:	ee37 7a67 	vsub.f32	s14, s14, s15
	         (-_2bx * q3 + _2bz * q1) *
 80020ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80020ee:	eef1 6a67 	vneg.f32	s13, s15
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <madgwickUpdate+0x7c0>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <madgwickUpdate+0x7c8>)
 80020fe:	ed93 6a00 	vldr	s12, [r3]
 8002102:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002106:	ee66 7a27 	vmul.f32	s15, s12, s15
 800210a:	ee76 6aa7 	vadd.f32	s13, s13, s15
	             (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) +
 800210e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8002112:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002116:	ee36 6a67 	vsub.f32	s12, s12, s15
 800211a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800211e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002122:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8002126:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800212a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800212e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002132:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002136:	ee36 6a27 	vadd.f32	s12, s12, s15
 800213a:	edd7 7a02 	vldr	s15, [r7, #8]
 800213e:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (-_2bx * q3 + _2bz * q1) *
 8002142:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 8002146:	ee37 7a27 	vadd.f32	s14, s14, s15
	         _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800214a:	4b3e      	ldr	r3, [pc, #248]	; (8002244 <madgwickUpdate+0x7c4>)
 800214c:	edd3 6a00 	vldr	s13, [r3]
 8002150:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002158:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800215c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002160:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002164:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002168:	ee26 6a27 	vmul.f32	s12, s12, s15
 800216c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002170:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002174:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002178:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800217c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002180:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002184:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002188:	ee36 6a27 	vadd.f32	s12, s12, s15
 800218c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002190:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002194:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) +
 8002198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	    s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) +
 80021a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80021a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80021ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80021b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021b8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80021bc:	ee27 7a27 	vmul.f32	s14, s14, s15
	         _2q0 * (2.0f * q0q1 + _2q2q3 - ay) -
 80021c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80021c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021c8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80021cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80021d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80021d8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80021dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) +
 80021e0:	ee37 7a27 	vadd.f32	s14, s14, s15
	         4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) +
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <madgwickUpdate+0x7c8>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80021ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021f2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80021fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002202:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002206:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800220a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800220e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002212:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002216:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         _2q0 * (2.0f * q0q1 + _2q2q3 - ay) -
 800221a:	ee37 7a67 	vsub.f32	s14, s14, s15
	         _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <madgwickUpdate+0x7c0>)
 8002220:	edd3 6a00 	vldr	s13, [r3]
 8002224:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002228:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800222c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002230:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002234:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002238:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800223c:	e006      	b.n	800224c <madgwickUpdate+0x7cc>
 800223e:	bf00      	nop
 8002240:	20000260 	.word	0x20000260
 8002244:	2000025c 	.word	0x2000025c
 8002248:	20000258 	.word	0x20000258
 800224c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002250:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002254:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002258:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800225c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002260:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002264:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002268:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800226c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002270:	edd7 7a03 	vldr	s15, [r7, #12]
 8002274:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002278:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) +
 800227c:	ee37 7a27 	vadd.f32	s14, s14, s15
	         (_2bx * q2 + _2bz * q0) *
 8002280:	4bf6      	ldr	r3, [pc, #984]	; (800265c <madgwickUpdate+0xbdc>)
 8002282:	edd3 6a00 	vldr	s13, [r3]
 8002286:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800228a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800228e:	4bf4      	ldr	r3, [pc, #976]	; (8002660 <madgwickUpdate+0xbe0>)
 8002290:	ed93 6a00 	vldr	s12, [r3]
 8002294:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002298:	ee66 7a27 	vmul.f32	s15, s12, s15
 800229c:	ee76 6aa7 	vadd.f32	s13, s13, s15
	             (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) +
 80022a0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80022a4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80022a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80022ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80022b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022b4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80022b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80022bc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80022c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80022c4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022c8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80022cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d0:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (_2bx * q2 + _2bz * q0) *
 80022d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 80022d8:	ee37 7a27 	vadd.f32	s14, s14, s15
	         (_2bx * q3 - _4bz * q1) *
 80022dc:	4be1      	ldr	r3, [pc, #900]	; (8002664 <madgwickUpdate+0xbe4>)
 80022de:	edd3 6a00 	vldr	s13, [r3]
 80022e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80022e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ea:	4bdf      	ldr	r3, [pc, #892]	; (8002668 <madgwickUpdate+0xbe8>)
 80022ec:	ed93 6a00 	vldr	s12, [r3]
 80022f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
	             (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80022fc:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8002300:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002304:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002308:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800230c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002310:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002314:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002318:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800231c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002320:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002324:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002328:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800232c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002330:	edd7 7a01 	vldr	s15, [r7, #4]
 8002334:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (_2bx * q3 - _4bz * q1) *
 8002338:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) +
 800233c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002340:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	    s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) +
 8002344:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002348:	eeb1 7a67 	vneg.f32	s14, s15
 800234c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002350:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002354:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002358:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800235c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002360:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
	         _2q3 * (2.0f * q0q1 + _2q2q3 - ay) -
 8002368:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800236c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002370:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002374:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002378:	edd7 7a05 	vldr	s15, [r7, #20]
 800237c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002380:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002384:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) +
 8002388:	ee37 7a27 	vadd.f32	s14, s14, s15
	         4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) +
 800238c:	4bb3      	ldr	r3, [pc, #716]	; (800265c <madgwickUpdate+0xbdc>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002396:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800239a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800239e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80023a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80023aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80023ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80023b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80023be:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         _2q3 * (2.0f * q0q1 + _2q2q3 - ay) -
 80023c2:	ee37 7a67 	vsub.f32	s14, s14, s15
	         (-_4bx * q2 - _2bz * q0) *
 80023c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023ca:	eef1 6a67 	vneg.f32	s13, s15
 80023ce:	4ba3      	ldr	r3, [pc, #652]	; (800265c <madgwickUpdate+0xbdc>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023d8:	4ba1      	ldr	r3, [pc, #644]	; (8002660 <madgwickUpdate+0xbe0>)
 80023da:	ed93 6a00 	vldr	s12, [r3]
 80023de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
	             (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 80023ea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80023f2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80023f6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80023fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80023fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002402:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002406:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800240a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800240e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002412:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002416:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800241a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800241e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002422:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (-_4bx * q2 - _2bz * q0) *
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) +
 800242a:	ee37 7a27 	vadd.f32	s14, s14, s15
	         (_2bx * q1 + _2bz * q3) *
 800242e:	4b8e      	ldr	r3, [pc, #568]	; (8002668 <madgwickUpdate+0xbe8>)
 8002430:	edd3 6a00 	vldr	s13, [r3]
 8002434:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800243c:	4b89      	ldr	r3, [pc, #548]	; (8002664 <madgwickUpdate+0xbe4>)
 800243e:	ed93 6a00 	vldr	s12, [r3]
 8002442:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002446:	ee66 7a27 	vmul.f32	s15, s12, s15
 800244a:	ee76 6aa7 	vadd.f32	s13, s13, s15
	             (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) +
 800244e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8002452:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002456:	ee36 6a67 	vsub.f32	s12, s12, s15
 800245a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800245e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002462:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8002466:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800246a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800246e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002472:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002476:	ee36 6a27 	vadd.f32	s12, s12, s15
 800247a:	edd7 7a02 	vldr	s15, [r7, #8]
 800247e:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (_2bx * q1 + _2bz * q3) *
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
	             (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 8002486:	ee37 7a27 	vadd.f32	s14, s14, s15
	         (_2bx * q0 - _4bz * q2) *
 800248a:	4b75      	ldr	r3, [pc, #468]	; (8002660 <madgwickUpdate+0xbe0>)
 800248c:	edd3 6a00 	vldr	s13, [r3]
 8002490:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002498:	4b70      	ldr	r3, [pc, #448]	; (800265c <madgwickUpdate+0xbdc>)
 800249a:	ed93 6a00 	vldr	s12, [r3]
 800249e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
	             (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80024aa:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80024ae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80024b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80024b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80024ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80024c2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80024c6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80024ca:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024ce:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80024d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80024da:	ee36 6a27 	vadd.f32	s12, s12, s15
 80024de:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e2:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (_2bx * q0 - _4bz * q2) *
 80024e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) +
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) +
 80024f2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80024f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80024fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002502:	edd7 7a06 	vldr	s15, [r7, #24]
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800250e:	ee27 7a27 	vmul.f32	s14, s14, s15
	         _2q2 * (2.0f * q0q1 + _2q2q3 - ay) +
 8002512:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002516:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800251a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800251e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002522:	edd7 7a05 	vldr	s15, [r7, #20]
 8002526:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800252a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800252e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) +
 8002532:	ee37 7a27 	vadd.f32	s14, s14, s15
	         (-_4bx * q3 + _2bz * q1) *
 8002536:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800253a:	eef1 6a67 	vneg.f32	s13, s15
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <madgwickUpdate+0xbe4>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <madgwickUpdate+0xbe8>)
 800254a:	ed93 6a00 	vldr	s12, [r3]
 800254e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002552:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002556:	ee76 6aa7 	vadd.f32	s13, s13, s15
	             (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 800255a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800255e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002562:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002566:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800256a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800256e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002572:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002576:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800257a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800257e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002582:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002586:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800258a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800258e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002592:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (-_4bx * q3 + _2bz * q1) *
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
	         _2q2 * (2.0f * q0q1 + _2q2q3 - ay) +
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
	         (-_2bx * q0 + _2bz * q2) *
 800259e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025a2:	eef1 6a67 	vneg.f32	s13, s15
 80025a6:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <madgwickUpdate+0xbe0>)
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <madgwickUpdate+0xbdc>)
 80025b2:	ed93 6a00 	vldr	s12, [r3]
 80025b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025be:	ee76 6aa7 	vadd.f32	s13, s13, s15
	             (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) +
 80025c2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80025c6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80025ca:	ee36 6a67 	vsub.f32	s12, s12, s15
 80025ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025d6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80025da:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80025de:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80025e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025e6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025ea:	ee36 6a27 	vadd.f32	s12, s12, s15
 80025ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f2:	ee76 7a67 	vsub.f32	s15, s12, s15
	         (-_2bx * q0 + _2bz * q2) *
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	             (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) +
 80025fa:	ee37 7a27 	vadd.f32	s14, s14, s15
	         _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <madgwickUpdate+0xbe8>)
 8002600:	edd3 6a00 	vldr	s13, [r3]
 8002604:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002608:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800260c:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8002610:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002614:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002618:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800261c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002620:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8002624:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002628:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800262c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002630:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002634:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002638:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800263c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002640:	edd7 7a01 	vldr	s15, [r7, #4]
 8002644:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) +
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 +
 8002654:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002658:	e008      	b.n	800266c <madgwickUpdate+0xbec>
 800265a:	bf00      	nop
 800265c:	2000025c 	.word	0x2000025c
 8002660:	20000004 	.word	0x20000004
 8002664:	20000260 	.word	0x20000260
 8002668:	20000258 	.word	0x20000258
 800266c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002670:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002674:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800267c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002680:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002684:	ee37 7a27 	vadd.f32	s14, s14, s15
	                        s3 * s3); // normalise step magnitude
 8002688:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800268c:	ee67 7aa7 	vmul.f32	s15, s15, s15
	    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 +
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002694:	eeb0 0a67 	vmov.f32	s0, s15
 8002698:	f7ff f9a2 	bl	80019e0 <invSqrt>
 800269c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	    s0 *= recipNorm;
 80026a0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80026a4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	    s1 *= recipNorm;
 80026b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80026b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	    s2 *= recipNorm;
 80026c0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80026c4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026cc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	    s3 *= recipNorm;
 80026d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026d4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	    // Apply feedback step
	    qDot1 -= beta * s0;
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <madgwickUpdate+0xdf0>)
 80026e2:	ed93 7a00 	vldr	s14, [r3]
 80026e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80026f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	    qDot2 -= beta * s1;
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <madgwickUpdate+0xdf0>)
 80026fc:	ed93 7a00 	vldr	s14, [r3]
 8002700:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002708:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800270c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002710:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	    qDot3 -= beta * s2;
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <madgwickUpdate+0xdf0>)
 8002716:	ed93 7a00 	vldr	s14, [r3]
 800271a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800271e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002722:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	    qDot4 -= beta * s3;
 800272e:	4b50      	ldr	r3, [pc, #320]	; (8002870 <madgwickUpdate+0xdf0>)
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002744:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	  }
	  q0 += qDot1 * dt;
 8002748:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800274c:	edd7 7a00 	vldr	s15, [r7]
 8002750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002754:	4b47      	ldr	r3, [pc, #284]	; (8002874 <madgwickUpdate+0xdf4>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	4b45      	ldr	r3, [pc, #276]	; (8002874 <madgwickUpdate+0xdf4>)
 8002760:	edc3 7a00 	vstr	s15, [r3]
	  q1 += qDot2 * dt;
 8002764:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002768:	edd7 7a00 	vldr	s15, [r7]
 800276c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <madgwickUpdate+0xdf8>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <madgwickUpdate+0xdf8>)
 800277c:	edc3 7a00 	vstr	s15, [r3]
	  q2 += qDot3 * dt;
 8002780:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002784:	edd7 7a00 	vldr	s15, [r7]
 8002788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278c:	4b3b      	ldr	r3, [pc, #236]	; (800287c <madgwickUpdate+0xdfc>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	4b39      	ldr	r3, [pc, #228]	; (800287c <madgwickUpdate+0xdfc>)
 8002798:	edc3 7a00 	vstr	s15, [r3]
	  q3 += qDot4 * dt;
 800279c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80027a0:	edd7 7a00 	vldr	s15, [r7]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <madgwickUpdate+0xe00>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	4b33      	ldr	r3, [pc, #204]	; (8002880 <madgwickUpdate+0xe00>)
 80027b4:	edc3 7a00 	vstr	s15, [r3]

	  // Normalise quaternion
	  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80027b8:	4b2e      	ldr	r3, [pc, #184]	; (8002874 <madgwickUpdate+0xdf4>)
 80027ba:	ed93 7a00 	vldr	s14, [r3]
 80027be:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <madgwickUpdate+0xdf4>)
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <madgwickUpdate+0xdf8>)
 80027ca:	edd3 6a00 	vldr	s13, [r3]
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <madgwickUpdate+0xdf8>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <madgwickUpdate+0xdfc>)
 80027de:	edd3 6a00 	vldr	s13, [r3]
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <madgwickUpdate+0xdfc>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <madgwickUpdate+0xe00>)
 80027f2:	edd3 6a00 	vldr	s13, [r3]
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <madgwickUpdate+0xe00>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	eeb0 0a67 	vmov.f32	s0, s15
 8002808:	f7ff f8ea 	bl	80019e0 <invSqrt>
 800280c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	  q0 *= recipNorm;
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <madgwickUpdate+0xdf4>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <madgwickUpdate+0xdf4>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	  q1 *= recipNorm;
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <madgwickUpdate+0xdf8>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <madgwickUpdate+0xdf8>)
 8002834:	edc3 7a00 	vstr	s15, [r3]
	  q2 *= recipNorm;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <madgwickUpdate+0xdfc>)
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <madgwickUpdate+0xdfc>)
 8002848:	edc3 7a00 	vstr	s15, [r3]
	  q3 *= recipNorm;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <madgwickUpdate+0xe00>)
 800284e:	ed93 7a00 	vldr	s14, [r3]
 8002852:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	4b09      	ldr	r3, [pc, #36]	; (8002880 <madgwickUpdate+0xe00>)
 800285c:	edc3 7a00 	vstr	s15, [r3]

	  angleComputed = 0;
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <madgwickUpdate+0xe04>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	37b8      	adds	r7, #184	; 0xb8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004
 8002878:	20000258 	.word	0x20000258
 800287c:	2000025c 	.word	0x2000025c
 8002880:	20000260 	.word	0x20000260
 8002884:	2000027c 	.word	0x2000027c

08002888 <computeAngles>:


void computeAngles(){
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	roll = atan2f(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2);
 800288c:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <computeAngles+0x1c8>)
 800288e:	ed93 7a00 	vldr	s14, [r3]
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <computeAngles+0x1cc>)
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289c:	4b6e      	ldr	r3, [pc, #440]	; (8002a58 <computeAngles+0x1d0>)
 800289e:	edd3 6a00 	vldr	s13, [r3]
 80028a2:	4b6e      	ldr	r3, [pc, #440]	; (8002a5c <computeAngles+0x1d4>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ac:	ee37 6a27 	vadd.f32	s12, s14, s15
 80028b0:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <computeAngles+0x1cc>)
 80028b2:	ed93 7a00 	vldr	s14, [r3]
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <computeAngles+0x1cc>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028c8:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <computeAngles+0x1d0>)
 80028ca:	edd3 6a00 	vldr	s13, [r3]
 80028ce:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <computeAngles+0x1d0>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	eef0 0a67 	vmov.f32	s1, s15
 80028e0:	eeb0 0a46 	vmov.f32	s0, s12
 80028e4:	f00b f8a6 	bl	800da34 <atan2f>
 80028e8:	eef0 7a40 	vmov.f32	s15, s0
 80028ec:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <computeAngles+0x1d8>)
 80028ee:	edc3 7a00 	vstr	s15, [r3]
	pitch = asinf(-2.0f * (q1 * q3 - q0 * q2));
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <computeAngles+0x1cc>)
 80028f4:	ed93 7a00 	vldr	s14, [r3]
 80028f8:	4b58      	ldr	r3, [pc, #352]	; (8002a5c <computeAngles+0x1d4>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002902:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <computeAngles+0x1c8>)
 8002904:	edd3 6a00 	vldr	s13, [r3]
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <computeAngles+0x1d0>)
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002916:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800291a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	f00b f85b 	bl	800d9dc <asinf>
 8002926:	eef0 7a40 	vmov.f32	s15, s0
 800292a:	4b4e      	ldr	r3, [pc, #312]	; (8002a64 <computeAngles+0x1dc>)
 800292c:	edc3 7a00 	vstr	s15, [r3]
	yaw = atan2f(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3);
 8002930:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <computeAngles+0x1cc>)
 8002932:	ed93 7a00 	vldr	s14, [r3]
 8002936:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <computeAngles+0x1d0>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002940:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <computeAngles+0x1c8>)
 8002942:	edd3 6a00 	vldr	s13, [r3]
 8002946:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <computeAngles+0x1d4>)
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002950:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <computeAngles+0x1d0>)
 8002956:	ed93 7a00 	vldr	s14, [r3]
 800295a:	4b3f      	ldr	r3, [pc, #252]	; (8002a58 <computeAngles+0x1d0>)
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <computeAngles+0x1d4>)
 800296e:	edd3 6a00 	vldr	s13, [r3]
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <computeAngles+0x1d4>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800297c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002980:	eef0 0a67 	vmov.f32	s1, s15
 8002984:	eeb0 0a46 	vmov.f32	s0, s12
 8002988:	f00b f854 	bl	800da34 <atan2f>
 800298c:	eef0 7a40 	vmov.f32	s15, s0
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <computeAngles+0x1e0>)
 8002992:	edc3 7a00 	vstr	s15, [r3]
	grav[0] = 2.0f * (q1 * q3 - q0 * q2);
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <computeAngles+0x1cc>)
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <computeAngles+0x1d4>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <computeAngles+0x1c8>)
 80029a8:	edd3 6a00 	vldr	s13, [r3]
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <computeAngles+0x1d0>)
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <computeAngles+0x1e4>)
 80029c0:	edc3 7a00 	vstr	s15, [r3]
	grav[1] = 2.0f * (q0 * q1 + q2 * q3);
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <computeAngles+0x1c8>)
 80029c6:	ed93 7a00 	vldr	s14, [r3]
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <computeAngles+0x1cc>)
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <computeAngles+0x1d0>)
 80029d6:	edd3 6a00 	vldr	s13, [r3]
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <computeAngles+0x1d4>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <computeAngles+0x1e4>)
 80029ee:	edc3 7a01 	vstr	s15, [r3, #4]
	grav[2] = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3;
 80029f2:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <computeAngles+0x1c8>)
 80029f4:	ed93 7a00 	vldr	s14, [r3]
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <computeAngles+0x1c8>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <computeAngles+0x1cc>)
 8002a04:	edd3 6a00 	vldr	s13, [r3]
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <computeAngles+0x1cc>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <computeAngles+0x1d0>)
 8002a18:	edd3 6a00 	vldr	s13, [r3]
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <computeAngles+0x1d0>)
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <computeAngles+0x1d4>)
 8002a2c:	edd3 6a00 	vldr	s13, [r3]
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <computeAngles+0x1d4>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <computeAngles+0x1e4>)
 8002a40:	edc3 7a02 	vstr	s15, [r3, #8]
	angleComputed = 1;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <computeAngles+0x1e8>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000004 	.word	0x20000004
 8002a54:	20000258 	.word	0x20000258
 8002a58:	2000025c 	.word	0x2000025c
 8002a5c:	20000260 	.word	0x20000260
 8002a60:	20000264 	.word	0x20000264
 8002a64:	20000268 	.word	0x20000268
 8002a68:	2000026c 	.word	0x2000026c
 8002a6c:	20000270 	.word	0x20000270
 8002a70:	2000027c 	.word	0x2000027c

08002a74 <getYaw>:

float getYaw() {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	if(!angleComputed)
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <getYaw+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <getYaw+0x10>
		computeAngles();
 8002a80:	f7ff ff02 	bl	8002888 <computeAngles>
	return yaw; //* 180.0f / M_PI + 180.0f;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <getYaw+0x24>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	ee07 3a90 	vmov	s15, r3
}
 8002a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	2000027c 	.word	0x2000027c
 8002a98:	2000026c 	.word	0x2000026c

08002a9c <getPitch>:

float getPitch() {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	if(!angleComputed)
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <getPitch+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <getPitch+0x10>
		computeAngles();
 8002aa8:	f7ff feee 	bl	8002888 <computeAngles>
	return pitch; //* 180 / M_PI;
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <getPitch+0x24>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	ee07 3a90 	vmov	s15, r3
}
 8002ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000027c 	.word	0x2000027c
 8002ac0:	20000268 	.word	0x20000268

08002ac4 <getRoll>:

float getRoll() {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	if(!angleComputed)
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <getRoll+0x20>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <getRoll+0x10>
		computeAngles();
 8002ad0:	f7ff feda 	bl	8002888 <computeAngles>
	return roll; //* 180 / M_PI;
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <getRoll+0x24>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	ee07 3a90 	vmov	s15, r3
}
 8002adc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	2000027c 	.word	0x2000027c
 8002ae8:	20000264 	.word	0x20000264

08002aec <getGravity>:

void getGravity() {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	if(!angleComputed)
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <getGravity+0x14>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <getGravity+0x10>
		computeAngles();
 8002af8:	f7ff fec6 	bl	8002888 <computeAngles>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000027c 	.word	0x2000027c

08002b04 <getLinearAccel>:

void getLinearAccel(int16_t* linearAccel, int16_t* accel ){
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	linearAccel[0] = accel[0] - grav[0] * 8192;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1c:	4b23      	ldr	r3, [pc, #140]	; (8002bac <getLinearAccel+0xa8>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002bb0 <getLinearAccel+0xac>
 8002b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b32:	ee17 3a90 	vmov	r3, s15
 8002b36:	b21a      	sxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	801a      	strh	r2, [r3, #0]
	linearAccel[1] = accel[1] - grav[1] * 8192;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	3302      	adds	r3, #2
 8002b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <getLinearAccel+0xa8>)
 8002b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b52:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002bb0 <getLinearAccel+0xac>
 8002b56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3302      	adds	r3, #2
 8002b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b66:	ee17 2a90 	vmov	r2, s15
 8002b6a:	b212      	sxth	r2, r2
 8002b6c:	801a      	strh	r2, [r3, #0]
	linearAccel[2] = accel[2] - grav[2] * 8192;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	3304      	adds	r3, #4
 8002b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <getLinearAccel+0xa8>)
 8002b80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b84:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002bb0 <getLinearAccel+0xac>
 8002b88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b98:	ee17 2a90 	vmov	r2, s15
 8002b9c:	b212      	sxth	r2, r2
 8002b9e:	801a      	strh	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	20000270 	.word	0x20000270
 8002bb0:	46000000 	.word	0x46000000

08002bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bba:	f001 fe8c 	bl	80048d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bbe:	f000 f843 	bl	8002c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc2:	f000 fa55 	bl	8003070 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002bc6:	f000 fa07 	bl	8002fd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002bca:	f000 f903 	bl	8002dd4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002bce:	f000 f9b7 	bl	8002f40 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002bd2:	f000 f885 	bl	8002ce0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002bd6:	f000 f93d 	bl	8002e54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  buf[0] = 0xA0 | 0x12;
 8002bda:	23b2      	movs	r3, #178	; 0xb2
 8002bdc:	703b      	strb	r3, [r7, #0]

  sms.my_device = huart2;
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <main+0x74>)
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <main+0x78>)
 8002be2:	3390      	adds	r3, #144	; 0x90
 8002be4:	4611      	mov	r1, r2
 8002be6:	2290      	movs	r2, #144	; 0x90
 8002be8:	4618      	mov	r0, r3
 8002bea:	f007 ff69 	bl	800aac0 <memcpy>
  sms.sms_device = huart1;
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <main+0x74>)
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <main+0x7c>)
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	2390      	movs	r3, #144	; 0x90
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f007 ff61 	bl	800aac0 <memcpy>

  rectrix_init(&sms, "1111111111"); // XBee3 Setting
 8002bfe:	490d      	ldr	r1, [pc, #52]	; (8002c34 <main+0x80>)
 8002c00:	4809      	ldr	r0, [pc, #36]	; (8002c28 <main+0x74>)
 8002c02:	f001 f923 	bl	8003e4c <rectrix_init>

  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
 8002c06:	2100      	movs	r1, #0
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <main+0x84>)
 8002c0a:	f006 fa99 	bl	8009140 <HAL_TIMEx_PWMN_Start>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002c0e:	217f      	movs	r1, #127	; 0x7f
 8002c10:	480a      	ldr	r0, [pc, #40]	; (8002c3c <main+0x88>)
 8002c12:	f003 f979 	bl	8005f08 <HAL_ADCEx_Calibration_Start>

  init_hack_led(&led, GPIOB, GPIO_PIN_4);
 8002c16:	2210      	movs	r2, #16
 8002c18:	4909      	ldr	r1, [pc, #36]	; (8002c40 <main+0x8c>)
 8002c1a:	480a      	ldr	r0, [pc, #40]	; (8002c44 <main+0x90>)
 8002c1c:	f7fe f9be 	bl	8000f9c <init_hack_led>

  lsm9ds1_self_test();
 8002c20:	f000 fa6c 	bl	80030fc <lsm9ds1_self_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <main+0x70>
 8002c26:	bf00      	nop
 8002c28:	20000648 	.word	0x20000648
 8002c2c:	20000414 	.word	0x20000414
 8002c30:	20000384 	.word	0x20000384
 8002c34:	0800ecc0 	.word	0x0800ecc0
 8002c38:	20000338 	.word	0x20000338
 8002c3c:	20000280 	.word	0x20000280
 8002c40:	48000400 	.word	0x48000400
 8002c44:	200004a8 	.word	0x200004a8

08002c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b094      	sub	sp, #80	; 0x50
 8002c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c4e:	f107 0318 	add.w	r3, r7, #24
 8002c52:	2238      	movs	r2, #56	; 0x38
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f007 ff40 	bl	800aadc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c6e:	f004 fbb7 	bl	80073e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c72:	2302      	movs	r3, #2
 8002c74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c7c:	2340      	movs	r3, #64	; 0x40
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c80:	2302      	movs	r3, #2
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c84:	2302      	movs	r3, #2
 8002c86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8002c8c:	2309      	movs	r3, #9
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c90:	2302      	movs	r3, #2
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c94:	2302      	movs	r3, #2
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 fc41 	bl	8007528 <HAL_RCC_OscConfig>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002cac:	f001 f8c8 	bl	8003e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 ff45 	bl	8007b58 <HAL_RCC_ClockConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002cd4:	f001 f8b4 	bl	8003e40 <Error_Handler>
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3750      	adds	r7, #80	; 0x50
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f007 feef 	bl	800aadc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cfe:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002d04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d06:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d26:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d28:	2204      	movs	r2, #4
 8002d2a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d2c:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d3e:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d68:	4817      	ldr	r0, [pc, #92]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d6a:	f002 f89d 	bl	8004ea8 <HAL_ADC_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002d74:	f001 f864 	bl	8003e40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	4619      	mov	r1, r3
 8002d82:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002d84:	f003 f922 	bl	8005fcc <HAL_ADCEx_MultiModeConfigChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002d8e:	f001 f857 	bl	8003e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_ADC1_Init+0xec>)
 8002d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d96:	2306      	movs	r3, #6
 8002d98:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_ADC1_Init+0xf0>)
 8002da0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002da2:	2304      	movs	r3, #4
 8002da4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4806      	ldr	r0, [pc, #24]	; (8002dc8 <MX_ADC1_Init+0xe8>)
 8002db0:	f002 fba6 	bl	8005500 <HAL_ADC_ConfigChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002dba:	f001 f841 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dbe:	bf00      	nop
 8002dc0:	3730      	adds	r7, #48	; 0x30
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000280 	.word	0x20000280
 8002dcc:	04300002 	.word	0x04300002
 8002dd0:	407f0000 	.word	0x407f0000

08002dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <MX_I2C1_Init+0x78>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007026BD;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <MX_I2C1_Init+0x7c>)
 8002de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e0e:	480e      	ldr	r0, [pc, #56]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e10:	f003 fcea 	bl	80067e8 <HAL_I2C_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e1a:	f001 f811 	bl	8003e40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4809      	ldr	r0, [pc, #36]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e22:	f004 fa45 	bl	80072b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002e2c:	f001 f808 	bl	8003e40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002e30:	2100      	movs	r1, #0
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_I2C1_Init+0x74>)
 8002e34:	f004 fa87 	bl	8007346 <HAL_I2CEx_ConfigDigitalFilter>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002e3e:	f000 ffff 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002ec 	.word	0x200002ec
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	007026bd 	.word	0x007026bd

08002e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08e      	sub	sp, #56	; 0x38
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e74:	463b      	mov	r3, r7
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	615a      	str	r2, [r3, #20]
 8002e84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e94:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002eae:	4823      	ldr	r0, [pc, #140]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002eb0:	f005 fa5e 	bl	8008370 <HAL_TIM_Base_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002eba:	f000 ffc1 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ec8:	4619      	mov	r1, r3
 8002eca:	481c      	ldr	r0, [pc, #112]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002ecc:	f005 fc1c 	bl	8008708 <HAL_TIM_ConfigClockSource>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002ed6:	f000 ffb3 	bl	8003e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002eda:	4818      	ldr	r0, [pc, #96]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002edc:	f005 fa9f 	bl	800841e <HAL_TIM_PWM_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ee6:	f000 ffab 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ef2:	f107 031c 	add.w	r3, r7, #28
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4810      	ldr	r0, [pc, #64]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002efa:	f006 f9d5 	bl	80092a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002f04:	f000 ff9c 	bl	8003e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f08:	2360      	movs	r3, #96	; 0x60
 8002f0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4807      	ldr	r0, [pc, #28]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002f20:	f005 fade 	bl	80084e0 <HAL_TIM_PWM_ConfigChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002f2a:	f000 ff89 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f2e:	4803      	ldr	r0, [pc, #12]	; (8002f3c <MX_TIM2_Init+0xe8>)
 8002f30:	f001 fac0 	bl	80044b4 <HAL_TIM_MspPostInit>

}
 8002f34:	bf00      	nop
 8002f36:	3738      	adds	r7, #56	; 0x38
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000338 	.word	0x20000338

08002f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f46:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <MX_USART1_UART_Init+0x94>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f58:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f66:	220c      	movs	r2, #12
 8002f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f88:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f8a:	f006 fa34 	bl	80093f6 <HAL_UART_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f94:	f000 ff54 	bl	8003e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002f9c:	f007 fc9b 	bl	800a8d6 <HAL_UARTEx_SetTxFifoThreshold>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fa6:	f000 ff4b 	bl	8003e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002faa:	2100      	movs	r1, #0
 8002fac:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002fae:	f007 fcd0 	bl	800a952 <HAL_UARTEx_SetRxFifoThreshold>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fb8:	f000 ff42 	bl	8003e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002fbc:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <MX_USART1_UART_Init+0x90>)
 8002fbe:	f007 fc51 	bl	800a864 <HAL_UARTEx_DisableFifoMode>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fc8:	f000 ff3a 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000384 	.word	0x20000384
 8002fd4:	40013800 	.word	0x40013800

08002fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8002fde:	4a23      	ldr	r2, [pc, #140]	; (800306c <MX_USART2_UART_Init+0x94>)
 8002fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fe2:	4b21      	ldr	r3, [pc, #132]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8002fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8002ffe:	220c      	movs	r2, #12
 8003000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <MX_USART2_UART_Init+0x90>)
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <MX_USART2_UART_Init+0x90>)
 800301c:	2200      	movs	r2, #0
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003020:	4811      	ldr	r0, [pc, #68]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003022:	f006 f9e8 	bl	80093f6 <HAL_UART_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800302c:	f000 ff08 	bl	8003e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003030:	2100      	movs	r1, #0
 8003032:	480d      	ldr	r0, [pc, #52]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003034:	f007 fc4f 	bl	800a8d6 <HAL_UARTEx_SetTxFifoThreshold>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800303e:	f000 feff 	bl	8003e40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003042:	2100      	movs	r1, #0
 8003044:	4808      	ldr	r0, [pc, #32]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003046:	f007 fc84 	bl	800a952 <HAL_UARTEx_SetRxFifoThreshold>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003050:	f000 fef6 	bl	8003e40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003054:	4804      	ldr	r0, [pc, #16]	; (8003068 <MX_USART2_UART_Init+0x90>)
 8003056:	f007 fc05 	bl	800a864 <HAL_UARTEx_DisableFifoMode>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003060:	f000 feee 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000414 	.word	0x20000414
 800306c:	40004400 	.word	0x40004400

08003070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <MX_GPIO_Init+0x84>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <MX_GPIO_Init+0x84>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <MX_GPIO_Init+0x84>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <MX_GPIO_Init+0x84>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <MX_GPIO_Init+0x84>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <MX_GPIO_Init+0x84>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2110      	movs	r1, #16
 80030ba:	480f      	ldr	r0, [pc, #60]	; (80030f8 <MX_GPIO_Init+0x88>)
 80030bc:	f003 fb7c 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030c6:	480c      	ldr	r0, [pc, #48]	; (80030f8 <MX_GPIO_Init+0x88>)
 80030c8:	f003 fb76 	bl	80067b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80030cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80030d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4619      	mov	r1, r3
 80030e4:	4804      	ldr	r0, [pc, #16]	; (80030f8 <MX_GPIO_Init+0x88>)
 80030e6:	f003 f9e5 	bl	80064b4 <HAL_GPIO_Init>

}
 80030ea:	bf00      	nop
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	48000400 	.word	0x48000400

080030fc <lsm9ds1_self_test>:

/* USER CODE BEGIN 4 */

void lsm9ds1_self_test(void){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b096      	sub	sp, #88	; 0x58
 8003100:	af00      	add	r7, sp, #0
	double crashPropability;

	stmdev_ctx_t dev_ctx_imu;
	stmdev_ctx_t dev_ctx_mag;

	uint16_t AD_RES = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	lsm9ds1_status_t reg;
	lsm9ds1_id_t whoamI;

	int16_t data_raw[3];

	dev_ctx_imu.write_reg = platform_write_imu;
 8003108:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <lsm9ds1_self_test+0x200>)
 800310a:	61fb      	str	r3, [r7, #28]
	dev_ctx_imu.read_reg = platform_read_imu;
 800310c:	4b7c      	ldr	r3, [pc, #496]	; (8003300 <lsm9ds1_self_test+0x204>)
 800310e:	623b      	str	r3, [r7, #32]
	dev_ctx_imu.handle = (void*)&imu_bus;
 8003110:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <lsm9ds1_self_test+0x208>)
 8003112:	627b      	str	r3, [r7, #36]	; 0x24

	dev_ctx_mag.write_reg = platform_write_mag;
 8003114:	4b7c      	ldr	r3, [pc, #496]	; (8003308 <lsm9ds1_self_test+0x20c>)
 8003116:	613b      	str	r3, [r7, #16]
	dev_ctx_mag.read_reg = platform_read_mag;
 8003118:	4b7c      	ldr	r3, [pc, #496]	; (800330c <lsm9ds1_self_test+0x210>)
 800311a:	617b      	str	r3, [r7, #20]
	dev_ctx_mag.handle = (void*)&mag_bus;
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <lsm9ds1_self_test+0x214>)
 800311e:	61bb      	str	r3, [r7, #24]

	platform_delay(BOOT_TIME);
 8003120:	2014      	movs	r0, #20
 8003122:	f000 fb17 	bl	8003754 <platform_delay>
	lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 8003126:	f107 0208 	add.w	r2, r7, #8
 800312a:	f107 011c 	add.w	r1, r7, #28
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fa94 	bl	8001660 <lsm9ds1_dev_id_get>

//	sprintf(str, "IMU: 0x%02x\r\nMAG:0x%02x\r\n", whoamI.imu, whoamI.mag);
//	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);

	if(whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID){
 8003138:	7a3b      	ldrb	r3, [r7, #8]
 800313a:	2b68      	cmp	r3, #104	; 0x68
 800313c:	d102      	bne.n	8003144 <lsm9ds1_self_test+0x48>
 800313e:	7a7b      	ldrb	r3, [r7, #9]
 8003140:	2b3d      	cmp	r3, #61	; 0x3d
 8003142:	d004      	beq.n	800314e <lsm9ds1_self_test+0x52>
		rectrix_SendMessage(&sms, "Cycling Emergency System Disabled");
 8003144:	4973      	ldr	r1, [pc, #460]	; (8003314 <lsm9ds1_self_test+0x218>)
 8003146:	4874      	ldr	r0, [pc, #464]	; (8003318 <lsm9ds1_self_test+0x21c>)
 8003148:	f001 f878 	bl	800423c <rectrix_SendMessage>
		while(1);
 800314c:	e7fe      	b.n	800314c <lsm9ds1_self_test+0x50>
	}
	else{
		rectrix_SendMessage(&sms, "Cycling Emergency System Enabled");
 800314e:	4973      	ldr	r1, [pc, #460]	; (800331c <lsm9ds1_self_test+0x220>)
 8003150:	4871      	ldr	r0, [pc, #452]	; (8003318 <lsm9ds1_self_test+0x21c>)
 8003152:	f001 f873 	bl	800423c <rectrix_SendMessage>
	}

	lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8003156:	f107 011c 	add.w	r1, r7, #28
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	2201      	movs	r2, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fab7 	bl	80016d4 <lsm9ds1_dev_reset_set>

	do {
		lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8003166:	f107 011c 	add.w	r1, r7, #28
 800316a:	f107 0310 	add.w	r3, r7, #16
 800316e:	4a6c      	ldr	r2, [pc, #432]	; (8003320 <lsm9ds1_self_test+0x224>)
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe faf4 	bl	800175e <lsm9ds1_dev_reset_get>
	}while(rst);
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <lsm9ds1_self_test+0x224>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f3      	bne.n	8003166 <lsm9ds1_self_test+0x6a>

//	sprintf(str, "Reset Complete!\r\n");
//	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);

	lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 800317e:	f107 011c 	add.w	r1, r7, #28
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	2201      	movs	r2, #1
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe f898 	bl	80012be <lsm9ds1_block_data_update_set>

//	sprintf(str, "Block Update Enable Complete!\r\n");
//	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);

	lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe f86c 	bl	8001272 <lsm9ds1_xl_full_scale_set>
	lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	2103      	movs	r1, #3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd ffdb 	bl	800115c <lsm9ds1_gy_full_scale_set>
	lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	2103      	movs	r1, #3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fe f950 	bl	8001452 <lsm9ds1_mag_full_scale_set>

	lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_50Hz);
 80031b2:	f107 031c 	add.w	r3, r7, #28
 80031b6:	2113      	movs	r1, #19
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe fb8c 	bl	80018d6 <lsm9ds1_xl_filter_aalias_bandwidth_set>
	lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	2110      	movs	r1, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fbdb 	bl	8001980 <lsm9ds1_xl_filter_lp_bandwidth_set>
	lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fbaf 	bl	8001934 <lsm9ds1_xl_filter_out_path_set>

//	sprintf(str, "Acceleometer filtering Complete!\r\n");
//	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);

	lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	2103      	movs	r1, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fae9 	bl	80017b4 <lsm9ds1_gy_filter_lp_bandwidth_set>
	lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	2105      	movs	r1, #5
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fb4e 	bl	800188a <lsm9ds1_gy_filter_hp_bandwidth_set>
	lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	2112      	movs	r1, #18
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fb03 	bl	8001800 <lsm9ds1_gy_filter_out_path_set>

//	sprintf(str, "Gyrormeter filtering Complete!\r\n");
//	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);

	lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_119Hz_LP);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	21b3      	movs	r1, #179	; 0xb3
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd ffd1 	bl	80011a8 <lsm9ds1_imu_data_rate_set>
	lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_LP_80Hz);
 8003206:	f107 0310 	add.w	r3, r7, #16
 800320a:	2107      	movs	r1, #7
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe f8a5 	bl	800135c <lsm9ds1_mag_data_rate_set>

	unsigned int tick_start = 0, tick_end = 0,
 8003212:	2300      	movs	r3, #0
 8003214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003216:	2300      	movs	r3, #0
 8003218:	657b      	str	r3, [r7, #84]	; 0x54
				 emergency_tick_now = 0, emergency_tick_before = 0,
 800321a:	2300      	movs	r3, #0
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
 800321e:	2300      	movs	r3, #0
 8003220:	653b      	str	r3, [r7, #80]	; 0x50
				 brightness_tick_before = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_PinState brightness_state = GPIO_PIN_SET;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	_Bool sms_trigger = 0u;
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	while(1){
		double delta_x, delta_y, delta_z;
		tick_start = HAL_GetTick();
 8003232:	f001 fbb5 	bl	80049a0 <HAL_GetTick>
 8003236:	63f8      	str	r0, [r7, #60]	; 0x3c

		if(tick_start - brightness_tick_before > 50 && count > 0) {
 8003238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800323a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b32      	cmp	r3, #50	; 0x32
 8003240:	d91a      	bls.n	8003278 <lsm9ds1_self_test+0x17c>
 8003242:	4b38      	ldr	r3, [pc, #224]	; (8003324 <lsm9ds1_self_test+0x228>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <lsm9ds1_self_test+0x17c>
			hack_led_gpio_set_reset(&led, brightness_state);
 800324a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800324e:	4619      	mov	r1, r3
 8003250:	4835      	ldr	r0, [pc, #212]	; (8003328 <lsm9ds1_self_test+0x22c>)
 8003252:	f7fd fef9 	bl	8001048 <hack_led_gpio_set_reset>
			brightness_state = !brightness_state;
 8003256:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf0c      	ite	eq
 800325e:	2301      	moveq	r3, #1
 8003260:	2300      	movne	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			brightness_tick_before = tick_start;
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
			count--;
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <lsm9ds1_self_test+0x228>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	3b01      	subs	r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <lsm9ds1_self_test+0x228>)
 8003276:	701a      	strb	r2, [r3, #0]
		}

		if(tick_start - tick_end > (1000 * invSampleFreq2)){
 8003278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <lsm9ds1_self_test+0x230>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003330 <lsm9ds1_self_test+0x234>
 8003290:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	f340 8199 	ble.w	80035d2 <lsm9ds1_self_test+0x4d6>
			lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 80032a0:	f107 020c 	add.w	r2, r7, #12
 80032a4:	f107 011c 	add.w	r1, r7, #28
 80032a8:	f107 0310 	add.w	r3, r7, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe f9f4 	bl	800169a <lsm9ds1_dev_status_get>

			if ( reg.status_imu.xlda && reg.status_imu.gda ) {
 80032b2:	7b7b      	ldrb	r3, [r7, #13]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d06a      	beq.n	8003394 <lsm9ds1_self_test+0x298>
 80032be:	7b7b      	ldrb	r3, [r7, #13]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d064      	beq.n	8003394 <lsm9ds1_self_test+0x298>
			  /* Read imu data */
			  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80032ca:	2206      	movs	r2, #6
 80032cc:	2100      	movs	r1, #0
 80032ce:	4819      	ldr	r0, [pc, #100]	; (8003334 <lsm9ds1_self_test+0x238>)
 80032d0:	f007 fc04 	bl	800aadc <memset>
			  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80032d4:	2206      	movs	r2, #6
 80032d6:	2100      	movs	r1, #0
 80032d8:	4817      	ldr	r0, [pc, #92]	; (8003338 <lsm9ds1_self_test+0x23c>)
 80032da:	f007 fbff 	bl	800aadc <memset>
			  lsm9ds1_acceleration_raw_get(&dev_ctx_imu,
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	4914      	ldr	r1, [pc, #80]	; (8003334 <lsm9ds1_self_test+0x238>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe f925 	bl	8001534 <lsm9ds1_acceleration_raw_get>
										   data_raw_acceleration);
			  lsm9ds1_angular_rate_raw_get(&dev_ctx_imu,
 80032ea:	f107 031c 	add.w	r3, r7, #28
 80032ee:	4912      	ldr	r1, [pc, #72]	; (8003338 <lsm9ds1_self_test+0x23c>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe f8d4 	bl	800149e <lsm9ds1_angular_rate_raw_get>
										   data_raw_angular_rate);
			  for(int i = 0; i < 3; i++){
 80032f6:	2300      	movs	r3, #0
 80032f8:	647b      	str	r3, [r7, #68]	; 0x44
 80032fa:	e048      	b.n	800338e <lsm9ds1_self_test+0x292>
 80032fc:	08003635 	.word	0x08003635
 8003300:	080036c5 	.word	0x080036c5
 8003304:	2000000c 	.word	0x2000000c
 8003308:	08003679 	.word	0x08003679
 800330c:	08003709 	.word	0x08003709
 8003310:	2000001c 	.word	0x2000001c
 8003314:	0800eccc 	.word	0x0800eccc
 8003318:	20000648 	.word	0x20000648
 800331c:	0800ecf0 	.word	0x0800ecf0
 8003320:	200004a4 	.word	0x200004a4
 8003324:	20000254 	.word	0x20000254
 8003328:	200004a8 	.word	0x200004a8
 800332c:	20000008 	.word	0x20000008
 8003330:	447a0000 	.word	0x447a0000
 8003334:	200004b4 	.word	0x200004b4
 8003338:	200004bc 	.word	0x200004bc
				acceleration_mg[i] = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[i]) / 1000;
 800333c:	4aa5      	ldr	r2, [pc, #660]	; (80035d4 <lsm9ds1_self_test+0x4d8>)
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fec1 	bl	80010cc <lsm9ds1_from_fs4g_to_mg>
 800334a:	eeb0 7a40 	vmov.f32	s14, s0
 800334e:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80035d8 <lsm9ds1_self_test+0x4dc>
 8003352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003356:	4aa1      	ldr	r2, [pc, #644]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 8003358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	edc3 7a00 	vstr	s15, [r3]
				angular_rate_mdps[i] = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[i]) / 1000;
 8003362:	4a9f      	ldr	r2, [pc, #636]	; (80035e0 <lsm9ds1_self_test+0x4e4>)
 8003364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003366:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fec6 	bl	80010fc <lsm9ds1_from_fs2000dps_to_mdps>
 8003370:	eeb0 7a40 	vmov.f32	s14, s0
 8003374:	eddf 6a98 	vldr	s13, [pc, #608]	; 80035d8 <lsm9ds1_self_test+0x4dc>
 8003378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800337c:	4a99      	ldr	r2, [pc, #612]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 800337e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	edc3 7a00 	vstr	s15, [r3]
			  for(int i = 0; i < 3; i++){
 8003388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338a:	3301      	adds	r3, #1
 800338c:	647b      	str	r3, [r7, #68]	; 0x44
 800338e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003390:	2b02      	cmp	r3, #2
 8003392:	ddd3      	ble.n	800333c <lsm9ds1_self_test+0x240>
			  }

			}

			if ( reg.status_mag.zyxda ) {
 8003394:	7b3b      	ldrb	r3, [r7, #12]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02b      	beq.n	80033f8 <lsm9ds1_self_test+0x2fc>
			  /* Read magnetometer data */
			  memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 80033a0:	2206      	movs	r2, #6
 80033a2:	2100      	movs	r1, #0
 80033a4:	4890      	ldr	r0, [pc, #576]	; (80035e8 <lsm9ds1_self_test+0x4ec>)
 80033a6:	f007 fb99 	bl	800aadc <memset>
			  lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 80033aa:	f107 0310 	add.w	r3, r7, #16
 80033ae:	498e      	ldr	r1, [pc, #568]	; (80035e8 <lsm9ds1_self_test+0x4ec>)
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f90a 	bl	80015ca <lsm9ds1_magnetic_raw_get>
			  magnetic_field_mgauss[0] = lsm9ds1_from_fs16gauss_to_mG(
 80033b6:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <lsm9ds1_self_test+0x4ec>)
 80033b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd feb5 	bl	800112c <lsm9ds1_from_fs16gauss_to_mG>
 80033c2:	eef0 7a40 	vmov.f32	s15, s0
 80033c6:	4b89      	ldr	r3, [pc, #548]	; (80035ec <lsm9ds1_self_test+0x4f0>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]
										   data_raw_magnetic_field[0]);
			  magnetic_field_mgauss[1] = lsm9ds1_from_fs16gauss_to_mG(
 80033cc:	4b86      	ldr	r3, [pc, #536]	; (80035e8 <lsm9ds1_self_test+0x4ec>)
 80033ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd feaa 	bl	800112c <lsm9ds1_from_fs16gauss_to_mG>
 80033d8:	eef0 7a40 	vmov.f32	s15, s0
 80033dc:	4b83      	ldr	r3, [pc, #524]	; (80035ec <lsm9ds1_self_test+0x4f0>)
 80033de:	edc3 7a01 	vstr	s15, [r3, #4]
										   data_raw_magnetic_field[1]);
			  magnetic_field_mgauss[2] = lsm9ds1_from_fs16gauss_to_mG(
 80033e2:	4b81      	ldr	r3, [pc, #516]	; (80035e8 <lsm9ds1_self_test+0x4ec>)
 80033e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fe9f 	bl	800112c <lsm9ds1_from_fs16gauss_to_mG>
 80033ee:	eef0 7a40 	vmov.f32	s15, s0
 80033f2:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <lsm9ds1_self_test+0x4f0>)
 80033f4:	edc3 7a02 	vstr	s15, [r3, #8]
	//		  HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
			}



			madgwickUpdate(angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 80033f8:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	4b79      	ldr	r3, [pc, #484]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 8003400:	ed93 7a01 	vldr	s14, [r3, #4]
 8003404:	4b77      	ldr	r3, [pc, #476]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 8003406:	edd3 6a02 	vldr	s13, [r3, #8]
 800340a:	4b74      	ldr	r3, [pc, #464]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 800340c:	ed93 6a00 	vldr	s12, [r3]
 8003410:	4b72      	ldr	r3, [pc, #456]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 8003412:	edd3 5a01 	vldr	s11, [r3, #4]
 8003416:	4b71      	ldr	r3, [pc, #452]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 8003418:	ed93 5a02 	vldr	s10, [r3, #8]
 800341c:	4b73      	ldr	r3, [pc, #460]	; (80035ec <lsm9ds1_self_test+0x4f0>)
 800341e:	ed93 3a00 	vldr	s6, [r3]
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <lsm9ds1_self_test+0x4f0>)
 8003424:	edd3 3a01 	vldr	s7, [r3, #4]
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <lsm9ds1_self_test+0x4f0>)
 800342a:	ed93 4a02 	vldr	s8, [r3, #8]
 800342e:	4b70      	ldr	r3, [pc, #448]	; (80035f0 <lsm9ds1_self_test+0x4f4>)
 8003430:	edd3 4a00 	vldr	s9, [r3]
 8003434:	eef0 2a45 	vmov.f32	s5, s10
 8003438:	eeb0 2a65 	vmov.f32	s4, s11
 800343c:	eef0 1a46 	vmov.f32	s3, s12
 8003440:	eeb0 1a66 	vmov.f32	s2, s13
 8003444:	eef0 0a47 	vmov.f32	s1, s14
 8003448:	eeb0 0a67 	vmov.f32	s0, s15
 800344c:	f7fe fb18 	bl	8001a80 <madgwickUpdate>
						   acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
						   magnetic_field_mgauss[0], magnetic_field_mgauss[1], magnetic_field_mgauss[2],
						   invSampleFreq2);

			getGravity();
 8003450:	f7ff fb4c 	bl	8002aec <getGravity>
			getLinearAccel(aaReal, data_raw_acceleration);
 8003454:	495f      	ldr	r1, [pc, #380]	; (80035d4 <lsm9ds1_self_test+0x4d8>)
 8003456:	4867      	ldr	r0, [pc, #412]	; (80035f4 <lsm9ds1_self_test+0x4f8>)
 8003458:	f7ff fb54 	bl	8002b04 <getLinearAccel>

//			computeAngles();

			pitch = getPitch();
 800345c:	f7ff fb1e 	bl	8002a9c <getPitch>
 8003460:	eef0 7a40 	vmov.f32	s15, s0
 8003464:	4b64      	ldr	r3, [pc, #400]	; (80035f8 <lsm9ds1_self_test+0x4fc>)
 8003466:	edc3 7a00 	vstr	s15, [r3]
			roll = getRoll();
 800346a:	f7ff fb2b 	bl	8002ac4 <getRoll>
 800346e:	eef0 7a40 	vmov.f32	s15, s0
 8003472:	4b62      	ldr	r3, [pc, #392]	; (80035fc <lsm9ds1_self_test+0x500>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
			yaw = getYaw();
 8003478:	f7ff fafc 	bl	8002a74 <getYaw>
 800347c:	eef0 7a40 	vmov.f32	s15, s0
 8003480:	4b5f      	ldr	r3, [pc, #380]	; (8003600 <lsm9ds1_self_test+0x504>)
 8003482:	edc3 7a00 	vstr	s15, [r3]

			ypr[0] = yaw;
 8003486:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <lsm9ds1_self_test+0x504>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5e      	ldr	r2, [pc, #376]	; (8003604 <lsm9ds1_self_test+0x508>)
 800348c:	6013      	str	r3, [r2, #0]
			ypr[1] = pitch;
 800348e:	4b5a      	ldr	r3, [pc, #360]	; (80035f8 <lsm9ds1_self_test+0x4fc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5c      	ldr	r2, [pc, #368]	; (8003604 <lsm9ds1_self_test+0x508>)
 8003494:	6053      	str	r3, [r2, #4]
			ypr[2] = roll;
 8003496:	4b59      	ldr	r3, [pc, #356]	; (80035fc <lsm9ds1_self_test+0x500>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a5a      	ldr	r2, [pc, #360]	; (8003604 <lsm9ds1_self_test+0x508>)
 800349c:	6093      	str	r3, [r2, #8]


//			getLinearAccel(angular_rate_mdps, aaReal);

			prepareData();
 800349e:	f000 fb25 	bl	8003aec <prepareData>

			crashPropability = evalContinuous(yaw, pitch, roll,
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <lsm9ds1_self_test+0x504>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <lsm9ds1_self_test+0x4fc>)
 80034aa:	ed93 7a00 	vldr	s14, [r3]
 80034ae:	4b53      	ldr	r3, [pc, #332]	; (80035fc <lsm9ds1_self_test+0x500>)
 80034b0:	edd3 6a00 	vldr	s13, [r3]
 80034b4:	4b4b      	ldr	r3, [pc, #300]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 80034b6:	ed93 6a00 	vldr	s12, [r3]
 80034ba:	4b4a      	ldr	r3, [pc, #296]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 80034bc:	edd3 5a01 	vldr	s11, [r3, #4]
 80034c0:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <lsm9ds1_self_test+0x4e8>)
 80034c2:	ed93 5a02 	vldr	s10, [r3, #8]
 80034c6:	4b45      	ldr	r3, [pc, #276]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 80034c8:	edd3 4a00 	vldr	s9, [r3]
 80034cc:	4b43      	ldr	r3, [pc, #268]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 80034ce:	edd3 3a01 	vldr	s7, [r3, #4]
 80034d2:	4b42      	ldr	r3, [pc, #264]	; (80035dc <lsm9ds1_self_test+0x4e0>)
 80034d4:	ed93 4a02 	vldr	s8, [r3, #8]
 80034d8:	484b      	ldr	r0, [pc, #300]	; (8003608 <lsm9ds1_self_test+0x50c>)
 80034da:	eeb0 3a64 	vmov.f32	s6, s9
 80034de:	eef0 2a45 	vmov.f32	s5, s10
 80034e2:	eeb0 2a65 	vmov.f32	s4, s11
 80034e6:	eef0 1a46 	vmov.f32	s3, s12
 80034ea:	eeb0 1a66 	vmov.f32	s2, s13
 80034ee:	eef0 0a47 	vmov.f32	s1, s14
 80034f2:	eeb0 0a67 	vmov.f32	s0, s15
 80034f6:	f000 f983 	bl	8003800 <evalContinuous>
 80034fa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
											  angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
											  acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
											  grav);

			sprintf(str, "%.2f\r\n", crashPropability);
 80034fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003502:	4942      	ldr	r1, [pc, #264]	; (800360c <lsm9ds1_self_test+0x510>)
 8003504:	4842      	ldr	r0, [pc, #264]	; (8003610 <lsm9ds1_self_test+0x514>)
 8003506:	f007 ff5b 	bl	800b3c0 <siprintf>
							HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 800350a:	4841      	ldr	r0, [pc, #260]	; (8003610 <lsm9ds1_self_test+0x514>)
 800350c:	f7fc fe88 	bl	8000220 <strlen>
 8003510:	4603      	mov	r3, r0
 8003512:	b29a      	uxth	r2, r3
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	493d      	ldr	r1, [pc, #244]	; (8003610 <lsm9ds1_self_test+0x514>)
 800351a:	483e      	ldr	r0, [pc, #248]	; (8003614 <lsm9ds1_self_test+0x518>)
 800351c:	f005 ffbb 	bl	8009496 <HAL_UART_Transmit>

			if(crashPropability > 0.5f && tick_start - emergency_tick_before > 1000){
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <lsm9ds1_self_test+0x51c>)
 8003526:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800352a:	f7fd fb1d 	bl	8000b68 <__aeabi_dcmpgt>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00b      	beq.n	800354c <lsm9ds1_self_test+0x450>
 8003534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800353e:	d905      	bls.n	800354c <lsm9ds1_self_test+0x450>
				rectrix_SendMessage(&sms, "Helmet detected a Cycling accident!");
 8003540:	4936      	ldr	r1, [pc, #216]	; (800361c <lsm9ds1_self_test+0x520>)
 8003542:	4837      	ldr	r0, [pc, #220]	; (8003620 <lsm9ds1_self_test+0x524>)
 8003544:	f000 fe7a 	bl	800423c <rectrix_SendMessage>
				emergency_tick_before = tick_start;
 8003548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354a:	653b      	str	r3, [r7, #80]	; 0x50
			}

			// Start ADC Conversion
			HAL_ADC_Start(&hadc1);
 800354c:	4835      	ldr	r0, [pc, #212]	; (8003624 <lsm9ds1_self_test+0x528>)
 800354e:	f001 fe35 	bl	80051bc <HAL_ADC_Start>
		   // Poll ADC1 Perihperal & TimeOut = 1mSec
			HAL_ADC_PollForConversion(&hadc1, (1000 * invSampleFreq2));
 8003552:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <lsm9ds1_self_test+0x4f4>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80035d8 <lsm9ds1_self_test+0x4dc>
 800355c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003564:	ee17 1a90 	vmov	r1, s15
 8003568:	482e      	ldr	r0, [pc, #184]	; (8003624 <lsm9ds1_self_test+0x528>)
 800356a:	f001 fee3 	bl	8005334 <HAL_ADC_PollForConversion>
		   // Read The ADC Conversion Result & Map It To PWM DutyCycle
			AD_RES = HAL_ADC_GetValue(&hadc1);
 800356e:	482d      	ldr	r0, [pc, #180]	; (8003624 <lsm9ds1_self_test+0x528>)
 8003570:	f001 ffb8 	bl	80054e4 <HAL_ADC_GetValue>
 8003574:	4603      	mov	r3, r0
 8003576:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			TIM2->CCR1 = (AD_RES<<4);
 800357a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800357e:	011a      	lsls	r2, r3, #4
 8003580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003584:	635a      	str	r2, [r3, #52]	; 0x34

			sprintf(str,
 8003586:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800358a:	461a      	mov	r2, r3
 800358c:	4926      	ldr	r1, [pc, #152]	; (8003628 <lsm9ds1_self_test+0x52c>)
 800358e:	4820      	ldr	r0, [pc, #128]	; (8003610 <lsm9ds1_self_test+0x514>)
 8003590:	f007 ff16 	bl	800b3c0 <siprintf>
					  "%d\r\n", AD_RES);
			HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);
 8003594:	481e      	ldr	r0, [pc, #120]	; (8003610 <lsm9ds1_self_test+0x514>)
 8003596:	f7fc fe43 	bl	8000220 <strlen>
 800359a:	4603      	mov	r3, r0
 800359c:	b29a      	uxth	r2, r3
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	491b      	ldr	r1, [pc, #108]	; (8003610 <lsm9ds1_self_test+0x514>)
 80035a4:	481b      	ldr	r0, [pc, #108]	; (8003614 <lsm9ds1_self_test+0x518>)
 80035a6:	f005 ff76 	bl	8009496 <HAL_UART_Transmit>

			if(count == 0){
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <lsm9ds1_self_test+0x530>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <lsm9ds1_self_test+0x4d2>
				if(AD_RES < 2900){
 80035b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80035b6:	f640 3253 	movw	r2, #2899	; 0xb53
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d804      	bhi.n	80035c8 <lsm9ds1_self_test+0x4cc>
					hack_led_set(&led, TURN_ON_1);
 80035be:	2102      	movs	r1, #2
 80035c0:	481b      	ldr	r0, [pc, #108]	; (8003630 <lsm9ds1_self_test+0x534>)
 80035c2:	f7fd fd0f 	bl	8000fe4 <hack_led_set>
 80035c6:	e002      	b.n	80035ce <lsm9ds1_self_test+0x4d2>
				}
				else{
					hack_led_off(&led);
 80035c8:	4819      	ldr	r0, [pc, #100]	; (8003630 <lsm9ds1_self_test+0x534>)
 80035ca:	f7fd fcfd 	bl	8000fc8 <hack_led_off>
				}
			}

			tick_end = tick_start;
 80035ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d0:	657b      	str	r3, [r7, #84]	; 0x54
	while(1){
 80035d2:	e62e      	b.n	8003232 <lsm9ds1_self_test+0x136>
 80035d4:	200004b4 	.word	0x200004b4
 80035d8:	447a0000 	.word	0x447a0000
 80035dc:	200004cc 	.word	0x200004cc
 80035e0:	200004bc 	.word	0x200004bc
 80035e4:	200004d8 	.word	0x200004d8
 80035e8:	200004c4 	.word	0x200004c4
 80035ec:	200004e4 	.word	0x200004e4
 80035f0:	20000008 	.word	0x20000008
 80035f4:	20000508 	.word	0x20000508
 80035f8:	20000528 	.word	0x20000528
 80035fc:	20000524 	.word	0x20000524
 8003600:	20000520 	.word	0x20000520
 8003604:	20000510 	.word	0x20000510
 8003608:	20000270 	.word	0x20000270
 800360c:	0800ed14 	.word	0x0800ed14
 8003610:	20000548 	.word	0x20000548
 8003614:	20000414 	.word	0x20000414
 8003618:	3fe00000 	.word	0x3fe00000
 800361c:	0800ed1c 	.word	0x0800ed1c
 8003620:	20000648 	.word	0x20000648
 8003624:	20000280 	.word	0x20000280
 8003628:	0800ed40 	.word	0x0800ed40
 800362c:	20000254 	.word	0x20000254
 8003630:	200004a8 	.word	0x200004a8

08003634 <platform_write_imu>:
		}
	}
}

static int32_t platform_write_imu(void* handle, uint8_t reg, const uint8_t* bufp, uint16_t len){
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af04      	add	r7, sp, #16
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	461a      	mov	r2, r3
 8003640:	460b      	mov	r3, r1
 8003642:	72fb      	strb	r3, [r7, #11]
 8003644:	4613      	mov	r3, r2
 8003646:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*)handle;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	617b      	str	r3, [r7, #20]

	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	791b      	ldrb	r3, [r3, #4]
 8003654:	b299      	uxth	r1, r3
 8003656:	7afb      	ldrb	r3, [r7, #11]
 8003658:	b29a      	uxth	r2, r3
 800365a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2301      	movs	r3, #1
 800366a:	f003 f94d 	bl	8006908 <HAL_I2C_Mem_Write>
}
 800366e:	bf00      	nop
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <platform_write_mag>:

int32_t platform_write_mag(void* handle, uint8_t reg, const uint8_t* bufp, uint16_t len){
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af04      	add	r7, sp, #16
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	460b      	mov	r3, r1
 8003686:	72fb      	strb	r3, [r7, #11]
 8003688:	4613      	mov	r3, r2
 800368a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*)handle;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	617b      	str	r3, [r7, #20]

	reg |= 0x80;
 8003690:	7afb      	ldrb	r3, [r7, #11]
 8003692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003696:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	791b      	ldrb	r3, [r3, #4]
 80036a0:	b299      	uxth	r1, r3
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036aa:	9302      	str	r3, [sp, #8]
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2301      	movs	r3, #1
 80036b6:	f003 f927 	bl	8006908 <HAL_I2C_Mem_Write>
}
 80036ba:	bf00      	nop
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <platform_read_imu>:

static int32_t platform_read_imu(void* handle, uint8_t reg, uint8_t* bufp, uint16_t len){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af04      	add	r7, sp, #16
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	460b      	mov	r3, r1
 80036d2:	72fb      	strb	r3, [r7, #11]
 80036d4:	4613      	mov	r3, r2
 80036d6:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*)handle;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	617b      	str	r3, [r7, #20]

	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	791b      	ldrb	r3, [r3, #4]
 80036e4:	b299      	uxth	r1, r3
 80036e6:	7afb      	ldrb	r3, [r7, #11]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ee:	9302      	str	r3, [sp, #8]
 80036f0:	893b      	ldrh	r3, [r7, #8]
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	f003 fa19 	bl	8006b30 <HAL_I2C_Mem_Read>
}
 80036fe:	bf00      	nop
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <platform_read_mag>:

static int32_t platform_read_mag(void* handle, uint8_t reg, uint8_t* bufp, uint16_t len){
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af04      	add	r7, sp, #16
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	460b      	mov	r3, r1
 8003716:	72fb      	strb	r3, [r7, #11]
 8003718:	4613      	mov	r3, r2
 800371a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t*)handle;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	617b      	str	r3, [r7, #20]

	reg |= 0x80;
 8003720:	7afb      	ldrb	r3, [r7, #11]
 8003722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003726:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	791b      	ldrb	r3, [r3, #4]
 8003730:	b299      	uxth	r1, r3
 8003732:	7afb      	ldrb	r3, [r7, #11]
 8003734:	b29a      	uxth	r2, r3
 8003736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800373a:	9302      	str	r3, [sp, #8]
 800373c:	893b      	ldrh	r3, [r7, #8]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2301      	movs	r3, #1
 8003746:	f003 f9f3 	bl	8006b30 <HAL_I2C_Mem_Read>
}
 800374a:	bf00      	nop
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <platform_delay>:

static void platform_delay(uint32_t ms){
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 f92b 	bl	80049b8 <HAL_Delay>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	0000      	movs	r0, r0
 800376c:	0000      	movs	r0, r0
	...

08003770 <norm>:

double sigmoid_function(double x){
	return x / (2 * (1 + abs(x))) + 0.5;
}

double norm(double a, double b, double c){
 8003770:	b5b0      	push	{r4, r5, r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	ed87 0b04 	vstr	d0, [r7, #16]
 800377a:	ed87 1b02 	vstr	d1, [r7, #8]
 800377e:	ed87 2b00 	vstr	d2, [r7]
#define sq(X) pow(X, 2)
	return sqrt(sq(a) + sq(b) + sq(c));
 8003782:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 80037f8 <norm+0x88>
 8003786:	ed97 0b04 	vldr	d0, [r7, #16]
 800378a:	f00a f88b 	bl	800d8a4 <pow>
 800378e:	ec55 4b10 	vmov	r4, r5, d0
 8003792:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80037f8 <norm+0x88>
 8003796:	ed97 0b02 	vldr	d0, [r7, #8]
 800379a:	f00a f883 	bl	800d8a4 <pow>
 800379e:	ec53 2b10 	vmov	r2, r3, d0
 80037a2:	4620      	mov	r0, r4
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7fc fd99 	bl	80002dc <__adddf3>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4614      	mov	r4, r2
 80037b0:	461d      	mov	r5, r3
 80037b2:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80037f8 <norm+0x88>
 80037b6:	ed97 0b00 	vldr	d0, [r7]
 80037ba:	f00a f873 	bl	800d8a4 <pow>
 80037be:	ec53 2b10 	vmov	r2, r3, d0
 80037c2:	4620      	mov	r0, r4
 80037c4:	4629      	mov	r1, r5
 80037c6:	f7fc fd89 	bl	80002dc <__adddf3>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	ec43 2b17 	vmov	d7, r2, r3
 80037d2:	eeb0 0a47 	vmov.f32	s0, s14
 80037d6:	eef0 0a67 	vmov.f32	s1, s15
 80037da:	f00a f8d3 	bl	800d984 <sqrt>
 80037de:	eeb0 7a40 	vmov.f32	s14, s0
 80037e2:	eef0 7a60 	vmov.f32	s15, s1
#undef sq
}
 80037e6:	eeb0 0a47 	vmov.f32	s0, s14
 80037ea:	eef0 0a67 	vmov.f32	s1, s15
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bdb0      	pop	{r4, r5, r7, pc}
 80037f4:	f3af 8000 	nop.w
 80037f8:	00000000 	.word	0x00000000
 80037fc:	40000000 	.word	0x40000000

08003800 <evalContinuous>:

double evalContinuous(float yaw, float pitch, float roll,
					  float gx, float gy, float gz,
					  float ax, float ay, float az,
					  float* gravity) {
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b08d      	sub	sp, #52	; 0x34
 8003804:	af00      	add	r7, sp, #0
 8003806:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800380a:	edc7 0a08 	vstr	s1, [r7, #32]
 800380e:	ed87 1a07 	vstr	s2, [r7, #28]
 8003812:	edc7 1a06 	vstr	s3, [r7, #24]
 8003816:	ed87 2a05 	vstr	s4, [r7, #20]
 800381a:	edc7 2a04 	vstr	s5, [r7, #16]
 800381e:	ed87 3a03 	vstr	s6, [r7, #12]
 8003822:	edc7 3a02 	vstr	s7, [r7, #8]
 8003826:	ed87 4a01 	vstr	s8, [r7, #4]
 800382a:	6038      	str	r0, [r7, #0]
//				  + 1 * (abs(accelIntegral[2]) > THRESHOLD_INT_ACCEL_Z * 10000/ 100)
//				  + 1 * (abs(accelGravityIntegral[0]) > THRESHOLD_INT_GRAVITY_X * 10000 / 100)
//				  + 1 * (abs(accelGravityIntegral[1]) > THRESHOLD_INT_GRAVITY_Y * 10000 / 100)
//				  + 1 * (abs(acc_vsm) > THRESHOLD_INT_GRAVITY_X * 10000 / 100);
#define ABS_CAST(X) abs((int)(X))
	float stepCount = 0;
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
	stepCount = 0
			+ 1 * checkThreshold(ABS_CAST(ypr[1] * 180 / M_PI), THRESHOLD_PITCH)
 8003832:	4b9d      	ldr	r3, [pc, #628]	; (8003aa8 <evalContinuous+0x2a8>)
 8003834:	edd3 7a01 	vldr	s15, [r3, #4]
 8003838:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8003aac <evalContinuous+0x2ac>
 800383c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003840:	ee17 0a90 	vmov	r0, s15
 8003844:	f7fc fea8 	bl	8000598 <__aeabi_f2d>
 8003848:	a395      	add	r3, pc, #596	; (adr r3, 8003aa0 <evalContinuous+0x2a0>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f7fd f825 	bl	800089c <__aeabi_ddiv>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f7fd f9a5 	bl	8000ba8 <__aeabi_d2iz>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	bfb8      	it	lt
 8003864:	425b      	neglt	r3, r3
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386e:	4b90      	ldr	r3, [pc, #576]	; (8003ab0 <evalContinuous+0x2b0>)
 8003870:	ed93 7a00 	vldr	s14, [r3]
 8003874:	eef0 0a47 	vmov.f32	s1, s14
 8003878:	eeb0 0a67 	vmov.f32	s0, s15
 800387c:	f000 faa8 	bl	8003dd0 <checkThreshold>
 8003880:	4603      	mov	r3, r0
 8003882:	461c      	mov	r4, r3
			+ 1 * checkThreshold(ABS_CAST(ypr[2] * 180 / M_PI), THRESHOLD_ROLL)
 8003884:	4b88      	ldr	r3, [pc, #544]	; (8003aa8 <evalContinuous+0x2a8>)
 8003886:	edd3 7a02 	vldr	s15, [r3, #8]
 800388a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003aac <evalContinuous+0x2ac>
 800388e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003892:	ee17 0a90 	vmov	r0, s15
 8003896:	f7fc fe7f 	bl	8000598 <__aeabi_f2d>
 800389a:	a381      	add	r3, pc, #516	; (adr r3, 8003aa0 <evalContinuous+0x2a0>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc fffc 	bl	800089c <__aeabi_ddiv>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4610      	mov	r0, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	f7fd f97c 	bl	8000ba8 <__aeabi_d2iz>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bfb8      	it	lt
 80038b6:	425b      	neglt	r3, r3
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c0:	4b7c      	ldr	r3, [pc, #496]	; (8003ab4 <evalContinuous+0x2b4>)
 80038c2:	ed93 7a00 	vldr	s14, [r3]
 80038c6:	eef0 0a47 	vmov.f32	s1, s14
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	f000 fa7f 	bl	8003dd0 <checkThreshold>
 80038d2:	4603      	mov	r3, r0
 80038d4:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(gyroSmoothend[0]), THRESHOLD_SMOOTH_GYRO_X)
 80038d6:	4b78      	ldr	r3, [pc, #480]	; (8003ab8 <evalContinuous+0x2b8>)
 80038d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bfb8      	it	lt
 80038e0:	425b      	neglt	r3, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ec:	4b73      	ldr	r3, [pc, #460]	; (8003abc <evalContinuous+0x2bc>)
 80038ee:	ed93 7a00 	vldr	s14, [r3]
 80038f2:	eef0 0a47 	vmov.f32	s1, s14
 80038f6:	eeb0 0a67 	vmov.f32	s0, s15
 80038fa:	f000 fa69 	bl	8003dd0 <checkThreshold>
 80038fe:	4603      	mov	r3, r0
 8003900:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(gyroSmoothend[1]), THRESHOLD_SMOOTH_GYRO_Y)
 8003902:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <evalContinuous+0x2b8>)
 8003904:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003908:	2b00      	cmp	r3, #0
 800390a:	bfb8      	it	lt
 800390c:	425b      	neglt	r3, r3
 800390e:	b29b      	uxth	r3, r3
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003918:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <evalContinuous+0x2c0>)
 800391a:	ed93 7a00 	vldr	s14, [r3]
 800391e:	eef0 0a47 	vmov.f32	s1, s14
 8003922:	eeb0 0a67 	vmov.f32	s0, s15
 8003926:	f000 fa53 	bl	8003dd0 <checkThreshold>
 800392a:	4603      	mov	r3, r0
 800392c:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(gyroSmoothend[2]), THRESHOLD_SMOOTH_GYRO_Z)
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <evalContinuous+0x2b8>)
 8003930:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	bfb8      	it	lt
 8003938:	425b      	neglt	r3, r3
 800393a:	b29b      	uxth	r3, r3
 800393c:	ee07 3a90 	vmov	s15, r3
 8003940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003944:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <evalContinuous+0x2c4>)
 8003946:	ed93 7a00 	vldr	s14, [r3]
 800394a:	eef0 0a47 	vmov.f32	s1, s14
 800394e:	eeb0 0a67 	vmov.f32	s0, s15
 8003952:	f000 fa3d 	bl	8003dd0 <checkThreshold>
 8003956:	4603      	mov	r3, r0
 8003958:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(accelIntegral[0]), THRESHOLD_INT_ACCEL_X)
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <evalContinuous+0x2c8>)
 800395c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003960:	2b00      	cmp	r3, #0
 8003962:	bfb8      	it	lt
 8003964:	425b      	neglt	r3, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003970:	4b56      	ldr	r3, [pc, #344]	; (8003acc <evalContinuous+0x2cc>)
 8003972:	ed93 7a00 	vldr	s14, [r3]
 8003976:	eef0 0a47 	vmov.f32	s1, s14
 800397a:	eeb0 0a67 	vmov.f32	s0, s15
 800397e:	f000 fa27 	bl	8003dd0 <checkThreshold>
 8003982:	4603      	mov	r3, r0
 8003984:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(accelIntegral[1]), THRESHOLD_INT_ACCEL_Y)
 8003986:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <evalContinuous+0x2c8>)
 8003988:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800398c:	2b00      	cmp	r3, #0
 800398e:	bfb8      	it	lt
 8003990:	425b      	neglt	r3, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399c:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <evalContinuous+0x2d0>)
 800399e:	ed93 7a00 	vldr	s14, [r3]
 80039a2:	eef0 0a47 	vmov.f32	s1, s14
 80039a6:	eeb0 0a67 	vmov.f32	s0, s15
 80039aa:	f000 fa11 	bl	8003dd0 <checkThreshold>
 80039ae:	4603      	mov	r3, r0
 80039b0:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(accelIntegral[2]), THRESHOLD_INT_ACCEL_Z)
 80039b2:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <evalContinuous+0x2c8>)
 80039b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfb8      	it	lt
 80039bc:	425b      	neglt	r3, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <evalContinuous+0x2d4>)
 80039ca:	ed93 7a00 	vldr	s14, [r3]
 80039ce:	eef0 0a47 	vmov.f32	s1, s14
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	f000 f9fb 	bl	8003dd0 <checkThreshold>
 80039da:	4603      	mov	r3, r0
 80039dc:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(accelGravityIntegral[0]), THRESHOLD_INT_GRAVITY_X)
 80039de:	4b3e      	ldr	r3, [pc, #248]	; (8003ad8 <evalContinuous+0x2d8>)
 80039e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bfb8      	it	lt
 80039e8:	425b      	neglt	r3, r3
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f4:	4b39      	ldr	r3, [pc, #228]	; (8003adc <evalContinuous+0x2dc>)
 80039f6:	ed93 7a00 	vldr	s14, [r3]
 80039fa:	eef0 0a47 	vmov.f32	s1, s14
 80039fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003a02:	f000 f9e5 	bl	8003dd0 <checkThreshold>
 8003a06:	4603      	mov	r3, r0
 8003a08:	441c      	add	r4, r3
			+ 1 * checkThreshold(ABS_CAST(accelGravityIntegral[1]), THRESHOLD_INT_GRAVITY_Y)
 8003a0a:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <evalContinuous+0x2d8>)
 8003a0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfb8      	it	lt
 8003a14:	425b      	neglt	r3, r3
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a20:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <evalContinuous+0x2e0>)
 8003a22:	ed93 7a00 	vldr	s14, [r3]
 8003a26:	eef0 0a47 	vmov.f32	s1, s14
 8003a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2e:	f000 f9cf 	bl	8003dd0 <checkThreshold>
 8003a32:	4603      	mov	r3, r0
 8003a34:	441c      	add	r4, r3
		 	+ 1 * checkThreshold(ABS_CAST(acc_vsm), THRESHOLD_ACCEL_DELTA);
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <evalContinuous+0x2e4>)
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a40:	ee17 3a90 	vmov	r3, s15
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bfb8      	it	lt
 8003a48:	425b      	neglt	r3, r3
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <evalContinuous+0x2e8>)
 8003a54:	ed93 7a00 	vldr	s14, [r3]
 8003a58:	eef0 0a47 	vmov.f32	s1, s14
 8003a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a60:	f000 f9b6 	bl	8003dd0 <checkThreshold>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4423      	add	r3, r4
	stepCount = 0
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//				  "%d %2.2f\r\n",
//				  (abs((int)(ypr[1] * 180 / M_PI))),
//				  THRESHOLD_PITCH);
//	HAL_UART_Transmit(&huart2, str, strlen(str), HAL_MAX_DELAY);

	return stepCount / 11;
 8003a74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a78:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003a7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a80:	ee16 0a90 	vmov	r0, s13
 8003a84:	f7fc fd88 	bl	8000598 <__aeabi_f2d>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a90:	eeb0 0a47 	vmov.f32	s0, s14
 8003a94:	eef0 0a67 	vmov.f32	s1, s15
 8003a98:	3734      	adds	r7, #52	; 0x34
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	54442d18 	.word	0x54442d18
 8003aa4:	400921fb 	.word	0x400921fb
 8003aa8:	20000510 	.word	0x20000510
 8003aac:	43340000 	.word	0x43340000
 8003ab0:	2000004c 	.word	0x2000004c
 8003ab4:	20000050 	.word	0x20000050
 8003ab8:	20000500 	.word	0x20000500
 8003abc:	20000040 	.word	0x20000040
 8003ac0:	20000044 	.word	0x20000044
 8003ac4:	20000048 	.word	0x20000048
 8003ac8:	200004f0 	.word	0x200004f0
 8003acc:	2000002c 	.word	0x2000002c
 8003ad0:	20000030 	.word	0x20000030
 8003ad4:	20000034 	.word	0x20000034
 8003ad8:	200004f8 	.word	0x200004f8
 8003adc:	20000038 	.word	0x20000038
 8003ae0:	2000003c 	.word	0x2000003c
 8003ae4:	2000051c 	.word	0x2000051c
 8003ae8:	20000054 	.word	0x20000054

08003aec <prepareData>:

void prepareData(){
 8003aec:	b5b0      	push	{r4, r5, r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
//	rotateZ(rotateZAngle, acceleration_mg, aa_rot);
//	rotateZ(rotateZAngle, aaReal, aaReal_rot);
//	rotateZ(rotateZAngle, angular_rate_mdps, gy_rot);
//	rotateZ(rotateZAngle, ypr, ypr_rot);

	for(register uint8_t i = 0; i < 3; i++)
 8003af2:	2400      	movs	r4, #0
 8003af4:	e029      	b.n	8003b4a <prepareData+0x5e>
		accelIntegral[i] = accelIntegral[i] * (1 - MOVING_AVERAGE_DECLINE) + aaReal[i] * MOVING_AVERAGE_DECLINE;
 8003af6:	4622      	mov	r2, r4
 8003af8:	4baa      	ldr	r3, [pc, #680]	; (8003da4 <prepareData+0x2b8>)
 8003afa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b06:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8003da8 <prepareData+0x2bc>
 8003b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b16:	4622      	mov	r2, r4
 8003b18:	4ba4      	ldr	r3, [pc, #656]	; (8003dac <prepareData+0x2c0>)
 8003b1a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b26:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003da8 <prepareData+0x2bc>
 8003b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b32:	4622      	mov	r2, r4
 8003b34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b38:	ee17 3a90 	vmov	r3, s15
 8003b3c:	b219      	sxth	r1, r3
 8003b3e:	4b99      	ldr	r3, [pc, #612]	; (8003da4 <prepareData+0x2b8>)
 8003b40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(register uint8_t i = 0; i < 3; i++)
 8003b44:	4623      	mov	r3, r4
 8003b46:	3301      	adds	r3, #1
 8003b48:	b2dc      	uxtb	r4, r3
 8003b4a:	2c02      	cmp	r4, #2
 8003b4c:	d9d3      	bls.n	8003af6 <prepareData+0xa>

	for(register uint8_t i = 0; i < 3; i++)
 8003b4e:	2400      	movs	r4, #0
 8003b50:	e029      	b.n	8003ba6 <prepareData+0xba>
		accelGravityIntegral[i] = accelGravityIntegral[i] * (1 - MOVING_AVERAGE_DECLINE) + data_raw_acceleration[i] * MOVING_AVERAGE_DECLINE;
 8003b52:	4622      	mov	r2, r4
 8003b54:	4b96      	ldr	r3, [pc, #600]	; (8003db0 <prepareData+0x2c4>)
 8003b56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b62:	eddf 7a91 	vldr	s15, [pc, #580]	; 8003da8 <prepareData+0x2bc>
 8003b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b72:	4622      	mov	r2, r4
 8003b74:	4b8f      	ldr	r3, [pc, #572]	; (8003db4 <prepareData+0x2c8>)
 8003b76:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b82:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003da8 <prepareData+0x2bc>
 8003b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8e:	4622      	mov	r2, r4
 8003b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b94:	ee17 3a90 	vmov	r3, s15
 8003b98:	b219      	sxth	r1, r3
 8003b9a:	4b85      	ldr	r3, [pc, #532]	; (8003db0 <prepareData+0x2c4>)
 8003b9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(register uint8_t i = 0; i < 3; i++)
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	b2dc      	uxtb	r4, r3
 8003ba6:	2c02      	cmp	r4, #2
 8003ba8:	d9d3      	bls.n	8003b52 <prepareData+0x66>

	for(register uint8_t i = 0; i < 3; i++)
 8003baa:	2400      	movs	r4, #0
 8003bac:	e029      	b.n	8003c02 <prepareData+0x116>
		gyroSmoothend[i] = gyroSmoothend[i] * (1 - MOVING_AVERAGE_DECLINE) + data_raw_angular_rate[i] * MOVING_AVERAGE_DECLINE;
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <prepareData+0x2cc>)
 8003bb2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bbe:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8003da8 <prepareData+0x2bc>
 8003bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bce:	4622      	mov	r2, r4
 8003bd0:	4b7a      	ldr	r3, [pc, #488]	; (8003dbc <prepareData+0x2d0>)
 8003bd2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bde:	eddf 6a72 	vldr	s13, [pc, #456]	; 8003da8 <prepareData+0x2bc>
 8003be2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bea:	4622      	mov	r2, r4
 8003bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf0:	ee17 3a90 	vmov	r3, s15
 8003bf4:	b219      	sxth	r1, r3
 8003bf6:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <prepareData+0x2cc>)
 8003bf8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(register uint8_t i = 0; i < 3; i++)
 8003bfc:	4623      	mov	r3, r4
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b2dc      	uxtb	r4, r3
 8003c02:	2c02      	cmp	r4, #2
 8003c04:	d9d3      	bls.n	8003bae <prepareData+0xc2>

	delta_x = former_x - accelIntegral[0];
 8003c06:	4b6e      	ldr	r3, [pc, #440]	; (8003dc0 <prepareData+0x2d4>)
 8003c08:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c0c:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <prepareData+0x2b8>)
 8003c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fcae 	bl	8000574 <__aeabi_i2d>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc fb5a 	bl	80002d8 <__aeabi_dsub>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
	delta_y = former_y - accelIntegral[1];
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <prepareData+0x2d8>)
 8003c2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c32:	4b5c      	ldr	r3, [pc, #368]	; (8003da4 <prepareData+0x2b8>)
 8003c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fc9b 	bl	8000574 <__aeabi_i2d>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7fc fb47 	bl	80002d8 <__aeabi_dsub>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	delta_z = former_z - accelIntegral[2];
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <prepareData+0x2dc>)
 8003c54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c58:	4b52      	ldr	r3, [pc, #328]	; (8003da4 <prepareData+0x2b8>)
 8003c5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fc fc88 	bl	8000574 <__aeabi_i2d>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fb34 	bl	80002d8 <__aeabi_dsub>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	e9c7 2300 	strd	r2, r3, [r7]

	acc_vsm = norm(delta_x, delta_y, delta_z);
 8003c78:	ed97 2b00 	vldr	d2, [r7]
 8003c7c:	ed97 1b02 	vldr	d1, [r7, #8]
 8003c80:	ed97 0b04 	vldr	d0, [r7, #16]
 8003c84:	f7ff fd74 	bl	8003770 <norm>
 8003c88:	ec53 2b10 	vmov	r2, r3, d0
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f7fc ffb2 	bl	8000bf8 <__aeabi_d2f>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <prepareData+0x2e0>)
 8003c98:	6013      	str	r3, [r2, #0]

	former_x = accelIntegral[0] * MOVING_AVERAGE_DECLINE + former_x * (1 - MOVING_AVERAGE_DECLINE);
 8003c9a:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <prepareData+0x2b8>)
 8003c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003da8 <prepareData+0x2bc>
 8003cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb0:	ee17 0a90 	vmov	r0, s15
 8003cb4:	f7fc fc70 	bl	8000598 <__aeabi_f2d>
 8003cb8:	4604      	mov	r4, r0
 8003cba:	460d      	mov	r5, r1
 8003cbc:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8003da8 <prepareData+0x2bc>
 8003cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc8:	ee17 0a90 	vmov	r0, s15
 8003ccc:	f7fc fc64 	bl	8000598 <__aeabi_f2d>
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <prepareData+0x2d4>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fcb7 	bl	8000648 <__aeabi_dmul>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fafb 	bl	80002dc <__adddf3>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4935      	ldr	r1, [pc, #212]	; (8003dc0 <prepareData+0x2d4>)
 8003cec:	e9c1 2300 	strd	r2, r3, [r1]
	former_y = accelIntegral[1] * MOVING_AVERAGE_DECLINE + former_y * (1 - MOVING_AVERAGE_DECLINE);
 8003cf0:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <prepareData+0x2b8>)
 8003cf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cfe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003da8 <prepareData+0x2bc>
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d06:	ee17 0a90 	vmov	r0, s15
 8003d0a:	f7fc fc45 	bl	8000598 <__aeabi_f2d>
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460d      	mov	r5, r1
 8003d12:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003da8 <prepareData+0x2bc>
 8003d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1e:	ee17 0a90 	vmov	r0, s15
 8003d22:	f7fc fc39 	bl	8000598 <__aeabi_f2d>
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <prepareData+0x2d8>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f7fc fc8c 	bl	8000648 <__aeabi_dmul>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4620      	mov	r0, r4
 8003d36:	4629      	mov	r1, r5
 8003d38:	f7fc fad0 	bl	80002dc <__adddf3>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4920      	ldr	r1, [pc, #128]	; (8003dc4 <prepareData+0x2d8>)
 8003d42:	e9c1 2300 	strd	r2, r3, [r1]
	former_z = accelIntegral[2] * MOVING_AVERAGE_DECLINE + former_z * (1 - MOVING_AVERAGE_DECLINE);
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <prepareData+0x2b8>)
 8003d48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d54:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003da8 <prepareData+0x2bc>
 8003d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d5c:	ee17 0a90 	vmov	r0, s15
 8003d60:	f7fc fc1a 	bl	8000598 <__aeabi_f2d>
 8003d64:	4604      	mov	r4, r0
 8003d66:	460d      	mov	r5, r1
 8003d68:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003da8 <prepareData+0x2bc>
 8003d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d74:	ee17 0a90 	vmov	r0, s15
 8003d78:	f7fc fc0e 	bl	8000598 <__aeabi_f2d>
 8003d7c:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <prepareData+0x2dc>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fc61 	bl	8000648 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7fc faa5 	bl	80002dc <__adddf3>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	490c      	ldr	r1, [pc, #48]	; (8003dc8 <prepareData+0x2dc>)
 8003d98:	e9c1 2300 	strd	r2, r3, [r1]

}
 8003d9c:	bf00      	nop
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bdb0      	pop	{r4, r5, r7, pc}
 8003da4:	200004f0 	.word	0x200004f0
 8003da8:	3dcccccd 	.word	0x3dcccccd
 8003dac:	20000508 	.word	0x20000508
 8003db0:	200004f8 	.word	0x200004f8
 8003db4:	200004b4 	.word	0x200004b4
 8003db8:	20000500 	.word	0x20000500
 8003dbc:	200004bc 	.word	0x200004bc
 8003dc0:	20000530 	.word	0x20000530
 8003dc4:	20000538 	.word	0x20000538
 8003dc8:	20000540 	.word	0x20000540
 8003dcc:	2000051c 	.word	0x2000051c

08003dd0 <checkThreshold>:
	*rotatedPoint = cos(radAngle)*point[0] - sin(radAngle) * point[1];
	*(rotatedPoint+1) = sin(radAngle)*point[0] + cos(radAngle)*point[1];
	*(rotatedPoint+2) = point[2];
}

_Bool checkThreshold(float liveData, float thresholdVal){
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dda:	edc7 0a00 	vstr	s1, [r7]
	static int i = 0;
	chk[i] = (liveData > thresholdVal);
 8003dde:	ed97 7a01 	vldr	s14, [r7, #4]
 8003de2:	edd7 7a00 	vldr	s15, [r7]
 8003de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	bfcc      	ite	gt
 8003df0:	2301      	movgt	r3, #1
 8003df2:	2300      	movle	r3, #0
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <checkThreshold+0x68>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <checkThreshold+0x6c>)
 8003dfe:	54d1      	strb	r1, [r2, r3]
	if(++i >= 11)
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <checkThreshold+0x68>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <checkThreshold+0x68>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <checkThreshold+0x68>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b0a      	cmp	r3, #10
 8003e10:	dd02      	ble.n	8003e18 <checkThreshold+0x48>
		i = 0;
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <checkThreshold+0x68>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
	return chk[i];
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <checkThreshold+0x68>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <checkThreshold+0x6c>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	200007f4 	.word	0x200007f4
 8003e3c:	200007e8 	.word	0x200007e8

08003e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <Error_Handler+0x8>
	...

08003e4c <rectrix_init>:
#include "rectrix_sms.h"
#include <string.h>

static char t[256];

void rectrix_init(rectirx_sms_t* sms, const char* phone_number){
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	HAL_Delay(290); // Boot Time
 8003e56:	f44f 7091 	mov.w	r0, #290	; 0x122
 8003e5a:	f000 fdad 	bl	80049b8 <HAL_Delay>
	sprintf(t, "+++");
 8003e5e:	49ca      	ldr	r1, [pc, #808]	; (8004188 <rectrix_init+0x33c>)
 8003e60:	48ca      	ldr	r0, [pc, #808]	; (800418c <rectrix_init+0x340>)
 8003e62:	f007 faad 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8003e66:	687c      	ldr	r4, [r7, #4]
 8003e68:	48c8      	ldr	r0, [pc, #800]	; (800418c <rectrix_init+0x340>)
 8003e6a:	f7fc f9d9 	bl	8000220 <strlen>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	49c5      	ldr	r1, [pc, #788]	; (800418c <rectrix_init+0x340>)
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f005 fb0c 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8003e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	f005 fb99 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc f9bc 	bl	8000220 <strlen>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f005 faef 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ebc:	f000 fd7c 	bl	80049b8 <HAL_Delay>
	sprintf(t, "~    APe\x0D");
 8003ec0:	49b3      	ldr	r1, [pc, #716]	; (8004190 <rectrix_init+0x344>)
 8003ec2:	48b2      	ldr	r0, [pc, #712]	; (800418c <rectrix_init+0x340>)
 8003ec4:	f007 fa7c 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8003ec8:	687c      	ldr	r4, [r7, #4]
 8003eca:	48b0      	ldr	r0, [pc, #704]	; (800418c <rectrix_init+0x340>)
 8003ecc:	f7fc f9a8 	bl	8000220 <strlen>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed8:	49ac      	ldr	r1, [pc, #688]	; (800418c <rectrix_init+0x340>)
 8003eda:	4620      	mov	r0, r4
 8003edc:	f005 fadb 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8003ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	f005 fb68 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc f98b 	bl	8000220 <strlen>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	4629      	mov	r1, r5
 8003f14:	4620      	mov	r0, r4
 8003f16:	f005 fabe 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f1e:	f000 fd4b 	bl	80049b8 <HAL_Delay>
	sprintf(t, "+++");
 8003f22:	4999      	ldr	r1, [pc, #612]	; (8004188 <rectrix_init+0x33c>)
 8003f24:	4899      	ldr	r0, [pc, #612]	; (800418c <rectrix_init+0x340>)
 8003f26:	f007 fa4b 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8003f2a:	687c      	ldr	r4, [r7, #4]
 8003f2c:	4897      	ldr	r0, [pc, #604]	; (800418c <rectrix_init+0x340>)
 8003f2e:	f7fc f977 	bl	8000220 <strlen>
 8003f32:	4603      	mov	r3, r0
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	4994      	ldr	r1, [pc, #592]	; (800418c <rectrix_init+0x340>)
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f005 faaa 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8003f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f4e:	2240      	movs	r2, #64	; 0x40
 8003f50:	f005 fb37 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc f95a 	bl	8000220 <strlen>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295
 8003f74:	4629      	mov	r1, r5
 8003f76:	4620      	mov	r0, r4
 8003f78:	f005 fa8d 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f80:	f000 fd1a 	bl	80049b8 <HAL_Delay>
	sprintf(t, "ATP#+1%s\x0D", phone_number);
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	4983      	ldr	r1, [pc, #524]	; (8004194 <rectrix_init+0x348>)
 8003f88:	4880      	ldr	r0, [pc, #512]	; (800418c <rectrix_init+0x340>)
 8003f8a:	f007 fa19 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), 100);
 8003f8e:	687c      	ldr	r4, [r7, #4]
 8003f90:	487e      	ldr	r0, [pc, #504]	; (800418c <rectrix_init+0x340>)
 8003f92:	f7fc f945 	bl	8000220 <strlen>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	2364      	movs	r3, #100	; 0x64
 8003f9c:	497b      	ldr	r1, [pc, #492]	; (800418c <rectrix_init+0x340>)
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f005 fa79 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8003fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb0:	2240      	movs	r2, #64	; 0x40
 8003fb2:	f005 fb06 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, t, strlen(t), HAL_MAX_DELAY);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8003fbc:	4873      	ldr	r0, [pc, #460]	; (800418c <rectrix_init+0x340>)
 8003fbe:	f7fc f92f 	bl	8000220 <strlen>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	4970      	ldr	r1, [pc, #448]	; (800418c <rectrix_init+0x340>)
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f005 fa62 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8003fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fd6:	f000 fcef 	bl	80049b8 <HAL_Delay>
	sprintf(t, "+++");
 8003fda:	496b      	ldr	r1, [pc, #428]	; (8004188 <rectrix_init+0x33c>)
 8003fdc:	486b      	ldr	r0, [pc, #428]	; (800418c <rectrix_init+0x340>)
 8003fde:	f007 f9ef 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8003fe2:	687c      	ldr	r4, [r7, #4]
 8003fe4:	4869      	ldr	r0, [pc, #420]	; (800418c <rectrix_init+0x340>)
 8003fe6:	f7fc f91b 	bl	8000220 <strlen>
 8003fea:	4603      	mov	r3, r0
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	4966      	ldr	r1, [pc, #408]	; (800418c <rectrix_init+0x340>)
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f005 fa4e 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8004002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	f005 fadb 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc f8fe 	bl	8000220 <strlen>
 8004024:	4603      	mov	r3, r0
 8004026:	b29a      	uxth	r2, r3
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	4629      	mov	r1, r5
 800402e:	4620      	mov	r0, r4
 8004030:	f005 fa31 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004038:	f000 fcbe 	bl	80049b8 <HAL_Delay>
	sprintf(t, "ATWR\x0D");
 800403c:	4956      	ldr	r1, [pc, #344]	; (8004198 <rectrix_init+0x34c>)
 800403e:	4853      	ldr	r0, [pc, #332]	; (800418c <rectrix_init+0x340>)
 8004040:	f007 f9be 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), 100);
 8004044:	687c      	ldr	r4, [r7, #4]
 8004046:	4851      	ldr	r0, [pc, #324]	; (800418c <rectrix_init+0x340>)
 8004048:	f7fc f8ea 	bl	8000220 <strlen>
 800404c:	4603      	mov	r3, r0
 800404e:	b29a      	uxth	r2, r3
 8004050:	2364      	movs	r3, #100	; 0x64
 8004052:	494e      	ldr	r1, [pc, #312]	; (800418c <rectrix_init+0x340>)
 8004054:	4620      	mov	r0, r4
 8004056:	f005 fa1e 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8004062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	f005 faab 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc f8ce 	bl	8000220 <strlen>
 8004084:	4603      	mov	r3, r0
 8004086:	b29a      	uxth	r2, r3
 8004088:	f04f 33ff 	mov.w	r3, #4294967295
 800408c:	4629      	mov	r1, r5
 800408e:	4620      	mov	r0, r4
 8004090:	f005 fa01 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8004094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004098:	f000 fc8e 	bl	80049b8 <HAL_Delay>
//	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
//	sprintf(t, "ATCN\x0D");
//	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
//	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
//	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
	sprintf(t, "+++");
 800409c:	493a      	ldr	r1, [pc, #232]	; (8004188 <rectrix_init+0x33c>)
 800409e:	483b      	ldr	r0, [pc, #236]	; (800418c <rectrix_init+0x340>)
 80040a0:	f007 f98e 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 80040a4:	687c      	ldr	r4, [r7, #4]
 80040a6:	4839      	ldr	r0, [pc, #228]	; (800418c <rectrix_init+0x340>)
 80040a8:	f7fc f8ba 	bl	8000220 <strlen>
 80040ac:	4603      	mov	r3, r0
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295
 80040b4:	4935      	ldr	r1, [pc, #212]	; (800418c <rectrix_init+0x340>)
 80040b6:	4620      	mov	r0, r4
 80040b8:	f005 f9ed 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 80040c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c8:	2240      	movs	r2, #64	; 0x40
 80040ca:	f005 fa7a 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc f89d 	bl	8000220 <strlen>
 80040e6:	4603      	mov	r3, r0
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	4629      	mov	r1, r5
 80040f0:	4620      	mov	r0, r4
 80040f2:	f005 f9d0 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80040f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040fa:	f000 fc5d 	bl	80049b8 <HAL_Delay>
	sprintf(t, "~    APe\x0D");
 80040fe:	4924      	ldr	r1, [pc, #144]	; (8004190 <rectrix_init+0x344>)
 8004100:	4822      	ldr	r0, [pc, #136]	; (800418c <rectrix_init+0x340>)
 8004102:	f007 f95d 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8004106:	687c      	ldr	r4, [r7, #4]
 8004108:	4820      	ldr	r0, [pc, #128]	; (800418c <rectrix_init+0x340>)
 800410a:	f7fc f889 	bl	8000220 <strlen>
 800410e:	4603      	mov	r3, r0
 8004110:	b29a      	uxth	r2, r3
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	491d      	ldr	r1, [pc, #116]	; (800418c <rectrix_init+0x340>)
 8004118:	4620      	mov	r0, r4
 800411a:	f005 f9bc 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8004126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	f005 fa49 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc f86c 	bl	8000220 <strlen>
 8004148:	4603      	mov	r3, r0
 800414a:	b29a      	uxth	r2, r3
 800414c:	f04f 33ff 	mov.w	r3, #4294967295
 8004150:	4629      	mov	r1, r5
 8004152:	4620      	mov	r0, r4
 8004154:	f005 f99f 	bl	8009496 <HAL_UART_Transmit>
	sprintf(t, "+++");
 8004158:	490b      	ldr	r1, [pc, #44]	; (8004188 <rectrix_init+0x33c>)
 800415a:	480c      	ldr	r0, [pc, #48]	; (800418c <rectrix_init+0x340>)
 800415c:	f007 f930 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8004160:	687c      	ldr	r4, [r7, #4]
 8004162:	480a      	ldr	r0, [pc, #40]	; (800418c <rectrix_init+0x340>)
 8004164:	f7fc f85c 	bl	8000220 <strlen>
 8004168:	4603      	mov	r3, r0
 800416a:	b29a      	uxth	r2, r3
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
 8004170:	4906      	ldr	r1, [pc, #24]	; (800418c <rectrix_init+0x340>)
 8004172:	4620      	mov	r0, r4
 8004174:	f005 f98f 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 8004180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004184:	e00a      	b.n	800419c <rectrix_init+0x350>
 8004186:	bf00      	nop
 8004188:	0800ed48 	.word	0x0800ed48
 800418c:	200007f8 	.word	0x200007f8
 8004190:	0800ed4c 	.word	0x0800ed4c
 8004194:	0800ed58 	.word	0x0800ed58
 8004198:	0800ed64 	.word	0x0800ed64
 800419c:	2240      	movs	r2, #64	; 0x40
 800419e:	f005 fa10 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc f833 	bl	8000220 <strlen>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b29a      	uxth	r2, r3
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	4629      	mov	r1, r5
 80041c4:	4620      	mov	r0, r4
 80041c6:	f005 f966 	bl	8009496 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80041ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041ce:	f000 fbf3 	bl	80049b8 <HAL_Delay>
	sprintf(t, "ATCN\x0D");
 80041d2:	4918      	ldr	r1, [pc, #96]	; (8004234 <rectrix_init+0x3e8>)
 80041d4:	4818      	ldr	r0, [pc, #96]	; (8004238 <rectrix_init+0x3ec>)
 80041d6:	f007 f8f3 	bl	800b3c0 <siprintf>
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 80041da:	687c      	ldr	r4, [r7, #4]
 80041dc:	4816      	ldr	r0, [pc, #88]	; (8004238 <rectrix_init+0x3ec>)
 80041de:	f7fc f81f 	bl	8000220 <strlen>
 80041e2:	4603      	mov	r3, r0
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	4913      	ldr	r1, [pc, #76]	; (8004238 <rectrix_init+0x3ec>)
 80041ec:	4620      	mov	r0, r4
 80041ee:	f005 f952 	bl	8009496 <HAL_UART_Transmit>
	HAL_UART_Receive(&sms->sms_device, sms->my_device_message, 64, 1000);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 71b0 	add.w	r1, r3, #352	; 0x160
 80041fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041fe:	2240      	movs	r2, #64	; 0x40
 8004200:	f005 f9df 	bl	80095c2 <HAL_UART_Receive>
	HAL_UART_Transmit(&sms->my_device, sms->my_device_message, strlen(sms->my_device_message), HAL_MAX_DELAY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f503 75b0 	add.w	r5, r3, #352	; 0x160
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc f802 	bl	8000220 <strlen>
 800421c:	4603      	mov	r3, r0
 800421e:	b29a      	uxth	r2, r3
 8004220:	f04f 33ff 	mov.w	r3, #4294967295
 8004224:	4629      	mov	r1, r5
 8004226:	4620      	mov	r0, r4
 8004228:	f005 f935 	bl	8009496 <HAL_UART_Transmit>

}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bdb0      	pop	{r4, r5, r7, pc}
 8004234:	0800ed6c 	.word	0x0800ed6c
 8004238:	200007f8 	.word	0x200007f8

0800423c <rectrix_SendMessage>:

void rectrix_SendMessage(rectirx_sms_t* sms, const char* str){
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
//	sprintf(t, "Emergency!! - Gerlie -\x0D");
	strcpy(t, str);
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	480f      	ldr	r0, [pc, #60]	; (8004288 <rectrix_SendMessage+0x4c>)
 800424a:	f007 f8d9 	bl	800b400 <strcpy>
	strcat(t, "\x0D");
 800424e:	480e      	ldr	r0, [pc, #56]	; (8004288 <rectrix_SendMessage+0x4c>)
 8004250:	f7fb ffe6 	bl	8000220 <strlen>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <rectrix_SendMessage+0x4c>)
 800425a:	4413      	add	r3, r2
 800425c:	490b      	ldr	r1, [pc, #44]	; (800428c <rectrix_SendMessage+0x50>)
 800425e:	461a      	mov	r2, r3
 8004260:	460b      	mov	r3, r1
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&sms->sms_device, t, strlen(t), HAL_MAX_DELAY);
 8004266:	687c      	ldr	r4, [r7, #4]
 8004268:	4807      	ldr	r0, [pc, #28]	; (8004288 <rectrix_SendMessage+0x4c>)
 800426a:	f7fb ffd9 	bl	8000220 <strlen>
 800426e:	4603      	mov	r3, r0
 8004270:	b29a      	uxth	r2, r3
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	4904      	ldr	r1, [pc, #16]	; (8004288 <rectrix_SendMessage+0x4c>)
 8004278:	4620      	mov	r0, r4
 800427a:	f005 f90c 	bl	8009496 <HAL_UART_Transmit>
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	bd90      	pop	{r4, r7, pc}
 8004286:	bf00      	nop
 8004288:	200007f8 	.word	0x200007f8
 800428c:	0800ed74 	.word	0x0800ed74

08004290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_MspInit+0x50>)
 8004298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_MspInit+0x50>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6613      	str	r3, [r2, #96]	; 0x60
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_MspInit+0x50>)
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_MspInit+0x50>)
 80042b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b2:	4a0b      	ldr	r2, [pc, #44]	; (80042e0 <HAL_MspInit+0x50>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6593      	str	r3, [r2, #88]	; 0x58
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_MspInit+0x50>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	2005      	movs	r0, #5
 80042cc:	f001 fffd 	bl	80062ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80042d0:	2005      	movs	r0, #5
 80042d2:	f002 f814 	bl	80062fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000

080042e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b09a      	sub	sp, #104	; 0x68
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042fc:	f107 0310 	add.w	r3, r7, #16
 8004300:	2244      	movs	r2, #68	; 0x44
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f006 fbe9 	bl	800aadc <memset>
  if(hadc->Instance==ADC1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004312:	d134      	bne.n	800437e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004318:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800431a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004320:	f107 0310 	add.w	r3, r7, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f003 fe33 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004330:	f7ff fd86 	bl	8003e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004334:	4b14      	ldr	r3, [pc, #80]	; (8004388 <HAL_ADC_MspInit+0xa4>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <HAL_ADC_MspInit+0xa4>)
 800433a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800433e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_ADC_MspInit+0xa4>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_ADC_MspInit+0xa4>)
 800434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004350:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <HAL_ADC_MspInit+0xa4>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_ADC_MspInit+0xa4>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004364:	2303      	movs	r3, #3
 8004366:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004368:	2303      	movs	r3, #3
 800436a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004374:	4619      	mov	r1, r3
 8004376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800437a:	f002 f89b 	bl	80064b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800437e:	bf00      	nop
 8004380:	3768      	adds	r7, #104	; 0x68
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000

0800438c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b09c      	sub	sp, #112	; 0x70
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043a4:	f107 0318 	add.w	r3, r7, #24
 80043a8:	2244      	movs	r2, #68	; 0x44
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f006 fb95 	bl	800aadc <memset>
  if(hi2c->Instance==I2C1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_I2C_MspInit+0xe0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d153      	bne.n	8004464 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80043bc:	2340      	movs	r3, #64	; 0x40
 80043be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80043c0:	2300      	movs	r3, #0
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043c4:	f107 0318 	add.w	r3, r7, #24
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 fde1 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80043d4:	f7ff fd34 	bl	8003e40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 80043da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043dc:	4a24      	ldr	r2, [pc, #144]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 80043e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 80043f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 80043f6:	f043 0302 	orr.w	r3, r3, #2
 80043fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 80043fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800440e:	2312      	movs	r3, #18
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004412:	2300      	movs	r3, #0
 8004414:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004416:	2300      	movs	r3, #0
 8004418:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800441a:	2304      	movs	r3, #4
 800441c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004428:	f002 f844 	bl	80064b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004430:	2312      	movs	r3, #18
 8004432:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004438:	2300      	movs	r3, #0
 800443a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800443c:	2304      	movs	r3, #4
 800443e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004444:	4619      	mov	r1, r3
 8004446:	480b      	ldr	r0, [pc, #44]	; (8004474 <HAL_I2C_MspInit+0xe8>)
 8004448:	f002 f834 	bl	80064b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	4a07      	ldr	r2, [pc, #28]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 8004452:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_I2C_MspInit+0xe4>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004464:	bf00      	nop
 8004466:	3770      	adds	r7, #112	; 0x70
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40005400 	.word	0x40005400
 8004470:	40021000 	.word	0x40021000
 8004474:	48000400 	.word	0x48000400

08004478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d10b      	bne.n	80044a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_TIM_Base_MspInit+0x38>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <HAL_TIM_Base_MspInit+0x38>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <HAL_TIM_Base_MspInit+0x38>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044bc:	f107 030c 	add.w	r3, r7, #12
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d11c      	bne.n	8004510 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <HAL_TIM_MspPostInit+0x64>)
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	4a0f      	ldr	r2, [pc, #60]	; (8004518 <HAL_TIM_MspPostInit+0x64>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044e2:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <HAL_TIM_MspPostInit+0x64>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80044ee:	2320      	movs	r3, #32
 80044f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044fe:	2301      	movs	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004502:	f107 030c 	add.w	r3, r7, #12
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800450c:	f001 ffd2 	bl	80064b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b09c      	sub	sp, #112	; 0x70
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004534:	f107 0318 	add.w	r3, r7, #24
 8004538:	2244      	movs	r2, #68	; 0x44
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f006 facd 	bl	800aadc <memset>
  if(huart->Instance==USART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a42      	ldr	r2, [pc, #264]	; (8004650 <HAL_UART_MspInit+0x134>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d138      	bne.n	80045be <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800454c:	2301      	movs	r3, #1
 800454e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004554:	f107 0318 	add.w	r3, r7, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f003 fd19 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004564:	f7ff fc6c 	bl	8003e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004568:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <HAL_UART_MspInit+0x138>)
 800456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456c:	4a39      	ldr	r2, [pc, #228]	; (8004654 <HAL_UART_MspInit+0x138>)
 800456e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004572:	6613      	str	r3, [r2, #96]	; 0x60
 8004574:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_UART_MspInit+0x138>)
 8004576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <HAL_UART_MspInit+0x138>)
 8004582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004584:	4a33      	ldr	r2, [pc, #204]	; (8004654 <HAL_UART_MspInit+0x138>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_UART_MspInit+0x138>)
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004598:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800459c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459e:	2302      	movs	r3, #2
 80045a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a6:	2300      	movs	r3, #0
 80045a8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045aa:	2307      	movs	r3, #7
 80045ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045b2:	4619      	mov	r1, r3
 80045b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045b8:	f001 ff7c 	bl	80064b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80045bc:	e043      	b.n	8004646 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a25      	ldr	r2, [pc, #148]	; (8004658 <HAL_UART_MspInit+0x13c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d13e      	bne.n	8004646 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045c8:	2302      	movs	r3, #2
 80045ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80045cc:	2300      	movs	r3, #0
 80045ce:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045d0:	f107 0318 	add.w	r3, r7, #24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f003 fcdb 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80045e0:	f7ff fc2e 	bl	8003e40 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_UART_MspInit+0x138>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	4a1a      	ldr	r2, [pc, #104]	; (8004654 <HAL_UART_MspInit+0x138>)
 80045ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ee:	6593      	str	r3, [r2, #88]	; 0x58
 80045f0:	4b18      	ldr	r3, [pc, #96]	; (8004654 <HAL_UART_MspInit+0x138>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <HAL_UART_MspInit+0x138>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <HAL_UART_MspInit+0x138>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_UART_MspInit+0x138>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8004614:	230c      	movs	r3, #12
 8004616:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004618:	2302      	movs	r3, #2
 800461a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	2300      	movs	r3, #0
 800461e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004620:	2300      	movs	r3, #0
 8004622:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004624:	2307      	movs	r3, #7
 8004626:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004628:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800462c:	4619      	mov	r1, r3
 800462e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004632:	f001 ff3f 	bl	80064b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004636:	2200      	movs	r2, #0
 8004638:	2100      	movs	r1, #0
 800463a:	2026      	movs	r0, #38	; 0x26
 800463c:	f001 fe45 	bl	80062ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004640:	2026      	movs	r0, #38	; 0x26
 8004642:	f001 fe5c 	bl	80062fe <HAL_NVIC_EnableIRQ>
}
 8004646:	bf00      	nop
 8004648:	3770      	adds	r7, #112	; 0x70
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40013800 	.word	0x40013800
 8004654:	40021000 	.word	0x40021000
 8004658:	40004400 	.word	0x40004400

0800465c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004660:	e7fe      	b.n	8004660 <NMI_Handler+0x4>

08004662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004666:	e7fe      	b.n	8004666 <HardFault_Handler+0x4>

08004668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800466c:	e7fe      	b.n	800466c <MemManage_Handler+0x4>

0800466e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004672:	e7fe      	b.n	8004672 <BusFault_Handler+0x4>

08004674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004678:	e7fe      	b.n	8004678 <UsageFault_Handler+0x4>

0800467a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004696:	b480      	push	{r7}
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046a8:	f000 f968 	bl	800497c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046c4:	4802      	ldr	r0, [pc, #8]	; (80046d0 <USART2_IRQHandler+0x10>)
 80046c6:	f005 f84f 	bl	8009768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000414 	.word	0x20000414

080046d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
	return 1;
 80046d8:	2301      	movs	r3, #1
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_kill>:

int _kill(int pid, int sig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046ee:	f006 f9bd 	bl	800aa6c <__errno>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2216      	movs	r2, #22
 80046f6:	601a      	str	r2, [r3, #0]
	return -1;
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <_exit>:

void _exit (int status)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800470c:	f04f 31ff 	mov.w	r1, #4294967295
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ffe7 	bl	80046e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004716:	e7fe      	b.n	8004716 <_exit+0x12>

08004718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e00a      	b.n	8004740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800472a:	f3af 8000 	nop.w
 800472e:	4601      	mov	r1, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	60ba      	str	r2, [r7, #8]
 8004736:	b2ca      	uxtb	r2, r1
 8004738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	3301      	adds	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	dbf0      	blt.n	800472a <_read+0x12>
	}

return len;
 8004748:	687b      	ldr	r3, [r7, #4]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	e009      	b.n	8004778 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	60ba      	str	r2, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3301      	adds	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	dbf1      	blt.n	8004764 <_write+0x12>
	}
	return len;
 8004780:	687b      	ldr	r3, [r7, #4]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <_close>:

int _close(int file)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
	return -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047b2:	605a      	str	r2, [r3, #4]
	return 0;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <_isatty>:

int _isatty(int file)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
	return 1;
 80047ca:	2301      	movs	r3, #1
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
	return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <_sbrk+0x5c>)
 80047fe:	4b15      	ldr	r3, [pc, #84]	; (8004854 <_sbrk+0x60>)
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004808:	4b13      	ldr	r3, [pc, #76]	; (8004858 <_sbrk+0x64>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <_sbrk+0x64>)
 8004812:	4a12      	ldr	r2, [pc, #72]	; (800485c <_sbrk+0x68>)
 8004814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <_sbrk+0x64>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d207      	bcs.n	8004834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004824:	f006 f922 	bl	800aa6c <__errno>
 8004828:	4603      	mov	r3, r0
 800482a:	220c      	movs	r2, #12
 800482c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	e009      	b.n	8004848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <_sbrk+0x64>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <_sbrk+0x64>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	4a05      	ldr	r2, [pc, #20]	; (8004858 <_sbrk+0x64>)
 8004844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004846:	68fb      	ldr	r3, [r7, #12]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20008000 	.word	0x20008000
 8004854:	00000400 	.word	0x00000400
 8004858:	200008f8 	.word	0x200008f8
 800485c:	20000910 	.word	0x20000910

08004860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <SystemInit+0x20>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	4a05      	ldr	r2, [pc, #20]	; (8004880 <SystemInit+0x20>)
 800486c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004884:	480d      	ldr	r0, [pc, #52]	; (80048bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004886:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004888:	480d      	ldr	r0, [pc, #52]	; (80048c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800488a:	490e      	ldr	r1, [pc, #56]	; (80048c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800488c:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <LoopForever+0xe>)
  movs r3, #0
 800488e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004890:	e002      	b.n	8004898 <LoopCopyDataInit>

08004892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004896:	3304      	adds	r3, #4

08004898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800489a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800489c:	d3f9      	bcc.n	8004892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800489e:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80048a0:	4c0b      	ldr	r4, [pc, #44]	; (80048d0 <LoopForever+0x16>)
  movs r3, #0
 80048a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048a4:	e001      	b.n	80048aa <LoopFillZerobss>

080048a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048a8:	3204      	adds	r2, #4

080048aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048ac:	d3fb      	bcc.n	80048a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048ae:	f7ff ffd7 	bl	8004860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048b2:	f006 f8e1 	bl	800aa78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80048b6:	f7fe f97d 	bl	8002bb4 <main>

080048ba <LoopForever>:

LoopForever:
    b LoopForever
 80048ba:	e7fe      	b.n	80048ba <LoopForever>
  ldr   r0, =_estack
 80048bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80048c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048c4:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80048c8:	0800f218 	.word	0x0800f218
  ldr r2, =_sbss
 80048cc:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80048d0:	20000910 	.word	0x20000910

080048d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048d4:	e7fe      	b.n	80048d4 <ADC1_2_IRQHandler>

080048d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048e0:	2003      	movs	r0, #3
 80048e2:	f001 fce7 	bl	80062b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048e6:	2000      	movs	r0, #0
 80048e8:	f000 f80e 	bl	8004908 <HAL_InitTick>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	71fb      	strb	r3, [r7, #7]
 80048f6:	e001      	b.n	80048fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048f8:	f7ff fcca 	bl	8004290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048fc:	79fb      	ldrb	r3, [r7, #7]

}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004914:	4b16      	ldr	r3, [pc, #88]	; (8004970 <HAL_InitTick+0x68>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d022      	beq.n	8004962 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800491c:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_InitTick+0x6c>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b13      	ldr	r3, [pc, #76]	; (8004970 <HAL_InitTick+0x68>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004928:	fbb1 f3f3 	udiv	r3, r1, r3
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	4618      	mov	r0, r3
 8004932:	f001 fcf2 	bl	800631a <HAL_SYSTICK_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	d809      	bhi.n	8004956 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004942:	2200      	movs	r2, #0
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	f001 fcbe 	bl	80062ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_InitTick+0x70>)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e007      	b.n	8004966 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
 800495a:	e004      	b.n	8004966 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e001      	b.n	8004966 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000060 	.word	0x20000060
 8004974:	20000058 	.word	0x20000058
 8004978:	2000005c 	.word	0x2000005c

0800497c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_IncTick+0x1c>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_IncTick+0x20>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4413      	add	r3, r2
 800498a:	4a03      	ldr	r2, [pc, #12]	; (8004998 <HAL_IncTick+0x1c>)
 800498c:	6013      	str	r3, [r2, #0]
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	200008fc 	.word	0x200008fc
 800499c:	20000060 	.word	0x20000060

080049a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return uwTick;
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <HAL_GetTick+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	200008fc 	.word	0x200008fc

080049b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c0:	f7ff ffee 	bl	80049a0 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d004      	beq.n	80049dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_Delay+0x40>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049dc:	bf00      	nop
 80049de:	f7ff ffdf 	bl	80049a0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d8f7      	bhi.n	80049de <HAL_Delay+0x26>
  {
  }
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000060 	.word	0x20000060

080049fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3360      	adds	r3, #96	; 0x60
 8004a76:	461a      	mov	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <LL_ADC_SetOffset+0x44>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	03fff000 	.word	0x03fff000

08004aac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3360      	adds	r3, #96	; 0x60
 8004aba:	461a      	mov	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3360      	adds	r3, #96	; 0x60
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b087      	sub	sp, #28
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3360      	adds	r3, #96	; 0x60
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3360      	adds	r3, #96	; 0x60
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	615a      	str	r2, [r3, #20]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b087      	sub	sp, #28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3330      	adds	r3, #48	; 0x30
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	4413      	add	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	211f      	movs	r1, #31
 8004bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	f003 011f 	and.w	r1, r3, #31
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3314      	adds	r3, #20
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	0e5b      	lsrs	r3, r3, #25
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	4413      	add	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	0d1b      	lsrs	r3, r3, #20
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2107      	movs	r1, #7
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	0d1b      	lsrs	r3, r3, #20
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	431a      	orrs	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10a      	bne.n	8004c9e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004c9c:	e00a      	b.n	8004cb4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	43db      	mvns	r3, r3
 8004cac:	401a      	ands	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	407f0000 	.word	0x407f0000

08004cc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004d0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6093      	str	r3, [r2, #8]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d34:	d101      	bne.n	8004d3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d84:	d101      	bne.n	8004d8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004dd4:	f043 0202 	orr.w	r2, r3, #2
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <LL_ADC_IsEnabled+0x18>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <LL_ADC_IsEnabled+0x1a>
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d101      	bne.n	8004e26 <LL_ADC_IsDisableOngoing+0x18>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <LL_ADC_IsDisableOngoing+0x1a>
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004e48:	f043 0204 	orr.w	r2, r3, #4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d101      	bne.n	8004e74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d101      	bne.n	8004e9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b590      	push	{r4, r7, lr}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e177      	b.n	80051b2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fa07 	bl	80042e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff ff19 	bl	8004d20 <LL_ADC_IsDeepPowerDownEnabled>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff feff 	bl	8004cfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff ff34 	bl	8004d70 <LL_ADC_IsInternalRegulatorEnabled>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d115      	bne.n	8004f3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ff18 	bl	8004d48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f18:	4b9c      	ldr	r3, [pc, #624]	; (800518c <HAL_ADC_Init+0x2e4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	099b      	lsrs	r3, r3, #6
 8004f1e:	4a9c      	ldr	r2, [pc, #624]	; (8005190 <HAL_ADC_Init+0x2e8>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	3301      	adds	r3, #1
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f2c:	e002      	b.n	8004f34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f9      	bne.n	8004f2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ff16 	bl	8004d70 <LL_ADC_IsInternalRegulatorEnabled>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10d      	bne.n	8004f66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4e:	f043 0210 	orr.w	r2, r3, #16
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ff76 	bl	8004e5c <LL_ADC_REG_IsConversionOngoing>
 8004f70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8110 	bne.w	80051a0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 810c 	bne.w	80051a0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f90:	f043 0202 	orr.w	r2, r3, #2
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff23 	bl	8004de8 <LL_ADC_IsEnabled>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d111      	bne.n	8004fcc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fa8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004fac:	f7ff ff1c 	bl	8004de8 <LL_ADC_IsEnabled>
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4878      	ldr	r0, [pc, #480]	; (8005194 <HAL_ADC_Init+0x2ec>)
 8004fb4:	f7ff ff18 	bl	8004de8 <LL_ADC_IsEnabled>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4323      	orrs	r3, r4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4874      	ldr	r0, [pc, #464]	; (8005198 <HAL_ADC_Init+0x2f0>)
 8004fc8:	f7ff fd18 	bl	80049fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7f5b      	ldrb	r3, [r3, #29]
 8004fd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fd6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004fdc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004fe2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	3b01      	subs	r3, #1
 8005000:	045b      	lsls	r3, r3, #17
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4313      	orrs	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_ADC_Init+0x2f4>)
 800502c:	4013      	ands	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	69b9      	ldr	r1, [r7, #24]
 8005034:	430b      	orrs	r3, r1
 8005036:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff ff02 	bl	8004e5c <LL_ADC_REG_IsConversionOngoing>
 8005058:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff0f 	bl	8004e82 <LL_ADC_INJ_IsConversionOngoing>
 8005064:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d16d      	bne.n	8005148 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d16a      	bne.n	8005148 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005076:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800507e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508e:	f023 0302 	bic.w	r3, r3, #2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	430b      	orrs	r3, r1
 800509a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d017      	beq.n	80050d4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80050b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80050c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6911      	ldr	r1, [r2, #16]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80050d2:	e013      	b.n	80050fc <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80050f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005102:	2b01      	cmp	r3, #1
 8005104:	d118      	bne.n	8005138 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800511c:	4311      	orrs	r1, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005122:	4311      	orrs	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005128:	430a      	orrs	r2, r1
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0201 	orr.w	r2, r2, #1
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	e007      	b.n	8005148 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d10c      	bne.n	800516a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f023 010f 	bic.w	r1, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	1e5a      	subs	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
 8005168:	e007      	b.n	800517a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 020f 	bic.w	r2, r2, #15
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	f043 0201 	orr.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	65da      	str	r2, [r3, #92]	; 0x5c
 800518a:	e011      	b.n	80051b0 <HAL_ADC_Init+0x308>
 800518c:	20000058 	.word	0x20000058
 8005190:	053e2d63 	.word	0x053e2d63
 8005194:	50000100 	.word	0x50000100
 8005198:	50000300 	.word	0x50000300
 800519c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	f043 0210 	orr.w	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80051b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	; 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd90      	pop	{r4, r7, pc}
 80051ba:	bf00      	nop

080051bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051c4:	4859      	ldr	r0, [pc, #356]	; (800532c <HAL_ADC_Start+0x170>)
 80051c6:	f7ff fd7d 	bl	8004cc4 <LL_ADC_GetMultimode>
 80051ca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fe43 	bl	8004e5c <LL_ADC_REG_IsConversionOngoing>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 809f 	bne.w	800531c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_ADC_Start+0x30>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e09a      	b.n	8005322 <HAL_ADC_Start+0x166>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fd73 	bl	8005ce0 <ADC_Enable>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 8086 	bne.w	8005312 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a44      	ldr	r2, [pc, #272]	; (8005330 <HAL_ADC_Start+0x174>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d002      	beq.n	800522a <HAL_ADC_Start+0x6e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	e001      	b.n	800522e <HAL_ADC_Start+0x72>
 800522a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	4293      	cmp	r3, r2
 8005234:	d002      	beq.n	800523c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005240:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005254:	d106      	bne.n	8005264 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525a:	f023 0206 	bic.w	r2, r3, #6
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	661a      	str	r2, [r3, #96]	; 0x60
 8005262:	e002      	b.n	800526a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	221c      	movs	r2, #28
 8005270:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2c      	ldr	r2, [pc, #176]	; (8005330 <HAL_ADC_Start+0x174>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d002      	beq.n	800528a <HAL_ADC_Start+0xce>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	e001      	b.n	800528e <HAL_ADC_Start+0xd2>
 800528a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	4293      	cmp	r3, r2
 8005294:	d008      	beq.n	80052a8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b05      	cmp	r3, #5
 80052a0:	d002      	beq.n	80052a8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	d114      	bne.n	80052d2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fdb2 	bl	8004e34 <LL_ADC_REG_StartConversion>
 80052d0:	e026      	b.n	8005320 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_ADC_Start+0x174>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d002      	beq.n	80052ee <HAL_ADC_Start+0x132>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	e001      	b.n	80052f2 <HAL_ADC_Start+0x136>
 80052ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00f      	beq.n	8005320 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005308:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005310:	e006      	b.n	8005320 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800531a:	e001      	b.n	8005320 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800531c:	2302      	movs	r3, #2
 800531e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	50000300 	.word	0x50000300
 8005330:	50000100 	.word	0x50000100

08005334 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800533e:	4867      	ldr	r0, [pc, #412]	; (80054dc <HAL_ADC_PollForConversion+0x1a8>)
 8005340:	f7ff fcc0 	bl	8004cc4 <LL_ADC_GetMultimode>
 8005344:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b08      	cmp	r3, #8
 800534c:	d102      	bne.n	8005354 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800534e:	2308      	movs	r3, #8
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	e02a      	b.n	80053aa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b05      	cmp	r3, #5
 800535e:	d002      	beq.n	8005366 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b09      	cmp	r3, #9
 8005364:	d111      	bne.n	800538a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0a6      	b.n	80054d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005384:	2304      	movs	r3, #4
 8005386:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005388:	e00f      	b.n	80053aa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800538a:	4854      	ldr	r0, [pc, #336]	; (80054dc <HAL_ADC_PollForConversion+0x1a8>)
 800538c:	f7ff fca8 	bl	8004ce0 <LL_ADC_GetMultiDMATransfer>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e095      	b.n	80054d2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80053a6:	2304      	movs	r3, #4
 80053a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80053aa:	f7ff faf9 	bl	80049a0 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80053b0:	e021      	b.n	80053f6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d01d      	beq.n	80053f6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80053ba:	f7ff faf1 	bl	80049a0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <HAL_ADC_PollForConversion+0x9c>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d112      	bne.n	80053f6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10b      	bne.n	80053f6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e06d      	b.n	80054d2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0d6      	beq.n	80053b2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fbc3 	bl	8004ba0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01c      	beq.n	800545a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7f5b      	ldrb	r3, [r3, #29]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d118      	bne.n	800545a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b08      	cmp	r3, #8
 8005434:	d111      	bne.n	800545a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005452:	f043 0201 	orr.w	r2, r3, #1
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <HAL_ADC_PollForConversion+0x1ac>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d002      	beq.n	800546a <HAL_ADC_PollForConversion+0x136>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	e001      	b.n	800546e <HAL_ADC_PollForConversion+0x13a>
 800546a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	4293      	cmp	r3, r2
 8005474:	d008      	beq.n	8005488 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2b05      	cmp	r3, #5
 8005480:	d002      	beq.n	8005488 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b09      	cmp	r3, #9
 8005486:	d104      	bne.n	8005492 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e00d      	b.n	80054ae <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a12      	ldr	r2, [pc, #72]	; (80054e0 <HAL_ADC_PollForConversion+0x1ac>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d002      	beq.n	80054a2 <HAL_ADC_PollForConversion+0x16e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	e001      	b.n	80054a6 <HAL_ADC_PollForConversion+0x172>
 80054a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80054a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d104      	bne.n	80054be <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2208      	movs	r2, #8
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	e008      	b.n	80054d0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	220c      	movs	r2, #12
 80054ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	50000300 	.word	0x50000300
 80054e0:	50000100 	.word	0x50000100

080054e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b0b6      	sub	sp, #216	; 0xd8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x22>
 800551e:	2302      	movs	r3, #2
 8005520:	e3c8      	b.n	8005cb4 <HAL_ADC_ConfigChannel+0x7b4>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fc94 	bl	8004e5c <LL_ADC_REG_IsConversionOngoing>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	f040 83ad 	bne.w	8005c96 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	f7ff fb3c 	bl	8004bc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fc82 	bl	8004e5c <LL_ADC_REG_IsConversionOngoing>
 8005558:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fc8e 	bl	8004e82 <LL_ADC_INJ_IsConversionOngoing>
 8005566:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800556a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 81d9 	bne.w	8005926 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005578:	2b00      	cmp	r3, #0
 800557a:	f040 81d4 	bne.w	8005926 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005586:	d10f      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2200      	movs	r2, #0
 8005592:	4619      	mov	r1, r3
 8005594:	f7ff fb43 	bl	8004c1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff faea 	bl	8004b7a <LL_ADC_SetSamplingTimeCommonConfig>
 80055a6:	e00e      	b.n	80055c6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f7ff fb32 	bl	8004c1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fada 	bl	8004b7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	08db      	lsrs	r3, r3, #3
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d022      	beq.n	800562e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6919      	ldr	r1, [r3, #16]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055f8:	f7ff fa34 	bl	8004a64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6919      	ldr	r1, [r3, #16]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	461a      	mov	r2, r3
 800560a:	f7ff fa80 	bl	8004b0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6919      	ldr	r1, [r3, #16]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	7f1b      	ldrb	r3, [r3, #28]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x124>
 800561e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005622:	e000      	b.n	8005626 <HAL_ADC_ConfigChannel+0x126>
 8005624:	2300      	movs	r3, #0
 8005626:	461a      	mov	r2, r3
 8005628:	f7ff fa8c 	bl	8004b44 <LL_ADC_SetOffsetSaturation>
 800562c:	e17b      	b.n	8005926 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fa39 	bl	8004aac <LL_ADC_GetOffsetChannel>
 800563a:	4603      	mov	r3, r0
 800563c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <HAL_ADC_ConfigChannel+0x15a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fa2e 	bl	8004aac <LL_ADC_GetOffsetChannel>
 8005650:	4603      	mov	r3, r0
 8005652:	0e9b      	lsrs	r3, r3, #26
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	e01e      	b.n	8005698 <HAL_ADC_ConfigChannel+0x198>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff fa23 	bl	8004aac <LL_ADC_GetOffsetChannel>
 8005666:	4603      	mov	r3, r0
 8005668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005670:	fa93 f3a3 	rbit	r3, r3
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005678:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800567c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8005688:	2320      	movs	r3, #32
 800568a:	e004      	b.n	8005696 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800568c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005690:	fab3 f383 	clz	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <HAL_ADC_ConfigChannel+0x1b0>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0e9b      	lsrs	r3, r3, #26
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	e018      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x1e2>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056bc:	fa93 f3a3 	rbit	r3, r3
 80056c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80056c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80056cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80056d4:	2320      	movs	r3, #32
 80056d6:	e004      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80056d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056dc:	fab3 f383 	clz	r3, r3
 80056e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d106      	bne.n	80056f4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff f9f2 	bl	8004ad8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff f9d6 	bl	8004aac <LL_ADC_GetOffsetChannel>
 8005700:	4603      	mov	r3, r0
 8005702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x220>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2101      	movs	r1, #1
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff f9cb 	bl	8004aac <LL_ADC_GetOffsetChannel>
 8005716:	4603      	mov	r3, r0
 8005718:	0e9b      	lsrs	r3, r3, #26
 800571a:	f003 021f 	and.w	r2, r3, #31
 800571e:	e01e      	b.n	800575e <HAL_ADC_ConfigChannel+0x25e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2101      	movs	r1, #1
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff f9c0 	bl	8004aac <LL_ADC_GetOffsetChannel>
 800572c:	4603      	mov	r3, r0
 800572e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005732:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005736:	fa93 f3a3 	rbit	r3, r3
 800573a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800573e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005746:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800574e:	2320      	movs	r3, #32
 8005750:	e004      	b.n	800575c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8005752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005756:	fab3 f383 	clz	r3, r3
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005766:	2b00      	cmp	r3, #0
 8005768:	d105      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x276>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	0e9b      	lsrs	r3, r3, #26
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	e018      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x2a8>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005782:	fa93 f3a3 	rbit	r3, r3
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800578a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800578e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800579a:	2320      	movs	r3, #32
 800579c:	e004      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800579e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d106      	bne.n	80057ba <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2200      	movs	r2, #0
 80057b2:	2101      	movs	r1, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff f98f 	bl	8004ad8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2102      	movs	r1, #2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff f973 	bl	8004aac <LL_ADC_GetOffsetChannel>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x2e6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2102      	movs	r1, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f968 	bl	8004aac <LL_ADC_GetOffsetChannel>
 80057dc:	4603      	mov	r3, r0
 80057de:	0e9b      	lsrs	r3, r3, #26
 80057e0:	f003 021f 	and.w	r2, r3, #31
 80057e4:	e01e      	b.n	8005824 <HAL_ADC_ConfigChannel+0x324>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff f95d 	bl	8004aac <LL_ADC_GetOffsetChannel>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800580c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8005814:	2320      	movs	r3, #32
 8005816:	e004      	b.n	8005822 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8005818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800581c:	fab3 f383 	clz	r3, r3
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <HAL_ADC_ConfigChannel+0x33c>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	0e9b      	lsrs	r3, r3, #26
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	e016      	b.n	800586a <HAL_ADC_ConfigChannel+0x36a>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800584e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800585c:	2320      	movs	r3, #32
 800585e:	e004      	b.n	800586a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8005860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005864:	fab3 f383 	clz	r3, r3
 8005868:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800586a:	429a      	cmp	r2, r3
 800586c:	d106      	bne.n	800587c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	2102      	movs	r1, #2
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff f92e 	bl	8004ad8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2103      	movs	r1, #3
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff f912 	bl	8004aac <LL_ADC_GetOffsetChannel>
 8005888:	4603      	mov	r3, r0
 800588a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10a      	bne.n	80058a8 <HAL_ADC_ConfigChannel+0x3a8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2103      	movs	r1, #3
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f907 	bl	8004aac <LL_ADC_GetOffsetChannel>
 800589e:	4603      	mov	r3, r0
 80058a0:	0e9b      	lsrs	r3, r3, #26
 80058a2:	f003 021f 	and.w	r2, r3, #31
 80058a6:	e017      	b.n	80058d8 <HAL_ADC_ConfigChannel+0x3d8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2103      	movs	r1, #3
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f8fc 	bl	8004aac <LL_ADC_GetOffsetChannel>
 80058b4:	4603      	mov	r3, r0
 80058b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80058c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80058ca:	2320      	movs	r3, #32
 80058cc:	e003      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80058ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058d0:	fab3 f383 	clz	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x3f0>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	0e9b      	lsrs	r3, r3, #26
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	e011      	b.n	8005914 <HAL_ADC_ConfigChannel+0x414>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f8:	fa93 f3a3 	rbit	r3, r3
 80058fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80058fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005900:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8005908:	2320      	movs	r3, #32
 800590a:	e003      	b.n	8005914 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800590c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005914:	429a      	cmp	r2, r3
 8005916:	d106      	bne.n	8005926 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2200      	movs	r2, #0
 800591e:	2103      	movs	r1, #3
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f8d9 	bl	8004ad8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fa5c 	bl	8004de8 <LL_ADC_IsEnabled>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 8140 	bne.w	8005bb8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	461a      	mov	r2, r3
 8005946:	f7ff f995 	bl	8004c74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	4a8f      	ldr	r2, [pc, #572]	; (8005b8c <HAL_ADC_ConfigChannel+0x68c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	f040 8131 	bne.w	8005bb8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <HAL_ADC_ConfigChannel+0x47e>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	0e9b      	lsrs	r3, r3, #26
 800596c:	3301      	adds	r3, #1
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2b09      	cmp	r3, #9
 8005974:	bf94      	ite	ls
 8005976:	2301      	movls	r3, #1
 8005978:	2300      	movhi	r3, #0
 800597a:	b2db      	uxtb	r3, r3
 800597c:	e019      	b.n	80059b2 <HAL_ADC_ConfigChannel+0x4b2>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005986:	fa93 f3a3 	rbit	r3, r3
 800598a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800598c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800598e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8005996:	2320      	movs	r3, #32
 8005998:	e003      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800599a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800599c:	fab3 f383 	clz	r3, r3
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	3301      	adds	r3, #1
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	bf94      	ite	ls
 80059ac:	2301      	movls	r3, #1
 80059ae:	2300      	movhi	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d079      	beq.n	8005aaa <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <HAL_ADC_ConfigChannel+0x4d2>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	0e9b      	lsrs	r3, r3, #26
 80059c8:	3301      	adds	r3, #1
 80059ca:	069b      	lsls	r3, r3, #26
 80059cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059d0:	e015      	b.n	80059fe <HAL_ADC_ConfigChannel+0x4fe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80059e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80059ea:	2320      	movs	r3, #32
 80059ec:	e003      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80059ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f0:	fab3 f383 	clz	r3, r3
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	069b      	lsls	r3, r3, #26
 80059fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <HAL_ADC_ConfigChannel+0x51e>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	0e9b      	lsrs	r3, r3, #26
 8005a10:	3301      	adds	r3, #1
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	2101      	movs	r1, #1
 8005a18:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1c:	e017      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x54e>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8005a36:	2320      	movs	r3, #32
 8005a38:	e003      	b.n	8005a42 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8005a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3c:	fab3 f383 	clz	r3, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	3301      	adds	r3, #1
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	ea42 0103 	orr.w	r1, r2, r3
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x574>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	0e9b      	lsrs	r3, r3, #26
 8005a64:	3301      	adds	r3, #1
 8005a66:	f003 021f 	and.w	r2, r3, #31
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	051b      	lsls	r3, r3, #20
 8005a72:	e018      	b.n	8005aa6 <HAL_ADC_ConfigChannel+0x5a6>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	e003      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a92:	fab3 f383 	clz	r3, r3
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	3301      	adds	r3, #1
 8005a9a:	f003 021f 	and.w	r2, r3, #31
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	e081      	b.n	8005bae <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d107      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x5c6>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	0e9b      	lsrs	r3, r3, #26
 8005abc:	3301      	adds	r3, #1
 8005abe:	069b      	lsls	r3, r3, #26
 8005ac0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ac4:	e015      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x5f2>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	fa93 f3a3 	rbit	r3, r3
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8005ade:	2320      	movs	r3, #32
 8005ae0:	e003      	b.n	8005aea <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	069b      	lsls	r3, r3, #26
 8005aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d109      	bne.n	8005b12 <HAL_ADC_ConfigChannel+0x612>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	0e9b      	lsrs	r3, r3, #26
 8005b04:	3301      	adds	r3, #1
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	e017      	b.n	8005b42 <HAL_ADC_ConfigChannel+0x642>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	fa93 f3a3 	rbit	r3, r3
 8005b1e:	61fb      	str	r3, [r7, #28]
  return result;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8005b2a:	2320      	movs	r3, #32
 8005b2c:	e003      	b.n	8005b36 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	fab3 f383 	clz	r3, r3
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	ea42 0103 	orr.w	r1, r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x66e>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	0e9b      	lsrs	r3, r3, #26
 8005b58:	3301      	adds	r3, #1
 8005b5a:	f003 021f 	and.w	r2, r3, #31
 8005b5e:	4613      	mov	r3, r2
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	3b1e      	subs	r3, #30
 8005b66:	051b      	lsls	r3, r3, #20
 8005b68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b6c:	e01e      	b.n	8005bac <HAL_ADC_ConfigChannel+0x6ac>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	613b      	str	r3, [r7, #16]
  return result;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005b86:	2320      	movs	r3, #32
 8005b88:	e006      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x698>
 8005b8a:	bf00      	nop
 8005b8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f003 021f 	and.w	r2, r3, #31
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3b1e      	subs	r3, #30
 8005ba6:	051b      	lsls	r3, r3, #20
 8005ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bac:	430b      	orrs	r3, r1
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	6892      	ldr	r2, [r2, #8]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f7ff f833 	bl	8004c1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b3f      	ldr	r3, [pc, #252]	; (8005cbc <HAL_ADC_ConfigChannel+0x7bc>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d071      	beq.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bc4:	483e      	ldr	r0, [pc, #248]	; (8005cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005bc6:	f7fe ff3f 	bl	8004a48 <LL_ADC_GetCommonPathInternalCh>
 8005bca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a3c      	ldr	r2, [pc, #240]	; (8005cc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_ADC_ConfigChannel+0x6e2>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a3a      	ldr	r2, [pc, #232]	; (8005cc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d127      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d121      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bf6:	d157      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c00:	4619      	mov	r1, r3
 8005c02:	482f      	ldr	r0, [pc, #188]	; (8005cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c04:	f7fe ff0d 	bl	8004a22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c08:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <HAL_ADC_ConfigChannel+0x7cc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	099b      	lsrs	r3, r3, #6
 8005c0e:	4a30      	ldr	r2, [pc, #192]	; (8005cd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	099b      	lsrs	r3, r3, #6
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c22:	e002      	b.n	8005c2a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f9      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c30:	e03a      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <HAL_ADC_ConfigChannel+0x7d4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d113      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x764>
 8005c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d02a      	beq.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4818      	ldr	r0, [pc, #96]	; (8005cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c5e:	f7fe fee0 	bl	8004a22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005c62:	e021      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <HAL_ADC_ConfigChannel+0x7dc>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d11c      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d116      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d011      	beq.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	480c      	ldr	r0, [pc, #48]	; (8005cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005c90:	f7fe fec7 	bl	8004a22 <LL_ADC_SetCommonPathInternalCh>
 8005c94:	e008      	b.n	8005ca8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005cb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	37d8      	adds	r7, #216	; 0xd8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	80080000 	.word	0x80080000
 8005cc0:	50000300 	.word	0x50000300
 8005cc4:	c3210000 	.word	0xc3210000
 8005cc8:	90c00010 	.word	0x90c00010
 8005ccc:	20000058 	.word	0x20000058
 8005cd0:	053e2d63 	.word	0x053e2d63
 8005cd4:	c7520000 	.word	0xc7520000
 8005cd8:	50000100 	.word	0x50000100
 8005cdc:	cb840000 	.word	0xcb840000

08005ce0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff f87b 	bl	8004de8 <LL_ADC_IsEnabled>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d14d      	bne.n	8005d94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	4b28      	ldr	r3, [pc, #160]	; (8005da0 <ADC_Enable+0xc0>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	f043 0210 	orr.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e039      	b.n	8005d96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff f836 	bl	8004d98 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d2c:	f7fe fe38 	bl	80049a0 <HAL_GetTick>
 8005d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d32:	e028      	b.n	8005d86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff f855 	bl	8004de8 <LL_ADC_IsEnabled>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff f825 	bl	8004d98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d4e:	f7fe fe27 	bl	80049a0 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d914      	bls.n	8005d86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d00d      	beq.n	8005d86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6e:	f043 0210 	orr.w	r2, r3, #16
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7a:	f043 0201 	orr.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e007      	b.n	8005d96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d1cf      	bne.n	8005d34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	8000003f 	.word	0x8000003f

08005da4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff f82c 	bl	8004e0e <LL_ADC_IsDisableOngoing>
 8005db6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff f813 	bl	8004de8 <LL_ADC_IsEnabled>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d047      	beq.n	8005e58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d144      	bne.n	8005e58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 030d 	and.w	r3, r3, #13
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d10c      	bne.n	8005df6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe ffed 	bl	8004dc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2203      	movs	r2, #3
 8005dec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005dee:	f7fe fdd7 	bl	80049a0 <HAL_GetTick>
 8005df2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005df4:	e029      	b.n	8005e4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfa:	f043 0210 	orr.w	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e06:	f043 0201 	orr.w	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e023      	b.n	8005e5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e12:	f7fe fdc5 	bl	80049a0 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d914      	bls.n	8005e4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e32:	f043 0210 	orr.w	r2, r3, #16
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	f043 0201 	orr.w	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e007      	b.n	8005e5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1dc      	bne.n	8005e12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <LL_ADC_IsEnabled>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <LL_ADC_IsEnabled+0x18>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <LL_ADC_IsEnabled+0x1a>
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_ADC_StartCalibration>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	609a      	str	r2, [r3, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <LL_ADC_IsCalibrationOnGoing>:
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ece:	d101      	bne.n	8005ed4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d101      	bne.n	8005efa <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_ADCEx_Calibration_Start+0x1c>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e04d      	b.n	8005fc0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff39 	bl	8005da4 <ADC_Disable>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d136      	bne.n	8005faa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f44:	f023 0302 	bic.w	r3, r3, #2
 8005f48:	f043 0202 	orr.w	r2, r3, #2
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff ff96 	bl	8005e88 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f5c:	e014      	b.n	8005f88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d90d      	bls.n	8005f88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	f023 0312 	bic.w	r3, r3, #18
 8005f74:	f043 0210 	orr.w	r2, r3, #16
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e01b      	b.n	8005fc0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff ff94 	bl	8005eba <LL_ADC_IsCalibrationOnGoing>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e2      	bne.n	8005f5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9c:	f023 0303 	bic.w	r3, r3, #3
 8005fa0:	f043 0201 	orr.w	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fa8:	e005      	b.n	8005fb6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	f043 0210 	orr.w	r2, r3, #16
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	0004de01 	.word	0x0004de01

08005fcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005fcc:	b590      	push	{r4, r7, lr}
 8005fce:	b0a1      	sub	sp, #132	; 0x84
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e08b      	b.n	8006102 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006002:	d102      	bne.n	800600a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006004:	4b41      	ldr	r3, [pc, #260]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	e001      	b.n	800600e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e06a      	b.n	8006102 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff ff57 	bl	8005ee2 <LL_ADC_REG_IsConversionOngoing>
 8006034:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff ff51 	bl	8005ee2 <LL_ADC_REG_IsConversionOngoing>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d14c      	bne.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006048:	2b00      	cmp	r3, #0
 800604a:	d149      	bne.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800604e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d028      	beq.n	80060aa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	6859      	ldr	r1, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800606a:	035b      	lsls	r3, r3, #13
 800606c:	430b      	orrs	r3, r1
 800606e:	431a      	orrs	r2, r3
 8006070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006072:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006074:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006078:	f7ff fef3 	bl	8005e62 <LL_ADC_IsEnabled>
 800607c:	4604      	mov	r4, r0
 800607e:	4823      	ldr	r0, [pc, #140]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006080:	f7ff feef 	bl	8005e62 <LL_ADC_IsEnabled>
 8006084:	4603      	mov	r3, r0
 8006086:	4323      	orrs	r3, r4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d133      	bne.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800608c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006094:	f023 030f 	bic.w	r3, r3, #15
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	6811      	ldr	r1, [r2, #0]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	6892      	ldr	r2, [r2, #8]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	431a      	orrs	r2, r3
 80060a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060a8:	e024      	b.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80060b6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80060ba:	f7ff fed2 	bl	8005e62 <LL_ADC_IsEnabled>
 80060be:	4604      	mov	r4, r0
 80060c0:	4812      	ldr	r0, [pc, #72]	; (800610c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80060c2:	f7ff fece 	bl	8005e62 <LL_ADC_IsEnabled>
 80060c6:	4603      	mov	r3, r0
 80060c8:	4323      	orrs	r3, r4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d112      	bne.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80060d6:	f023 030f 	bic.w	r3, r3, #15
 80060da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80060dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060de:	e009      	b.n	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80060f2:	e000      	b.n	80060f6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80060fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006102:	4618      	mov	r0, r3
 8006104:	3784      	adds	r7, #132	; 0x84
 8006106:	46bd      	mov	sp, r7
 8006108:	bd90      	pop	{r4, r7, pc}
 800610a:	bf00      	nop
 800610c:	50000100 	.word	0x50000100
 8006110:	50000300 	.word	0x50000300

08006114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <__NVIC_SetPriorityGrouping+0x44>)
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006130:	4013      	ands	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800613c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006146:	4a04      	ldr	r2, [pc, #16]	; (8006158 <__NVIC_SetPriorityGrouping+0x44>)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	60d3      	str	r3, [r2, #12]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	e000ed00 	.word	0xe000ed00

0800615c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <__NVIC_GetPriorityGrouping+0x18>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	f003 0307 	and.w	r3, r3, #7
}
 800616a:	4618      	mov	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	e000ed00 	.word	0xe000ed00

08006178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006186:	2b00      	cmp	r3, #0
 8006188:	db0b      	blt.n	80061a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	f003 021f 	and.w	r2, r3, #31
 8006190:	4907      	ldr	r1, [pc, #28]	; (80061b0 <__NVIC_EnableIRQ+0x38>)
 8006192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2001      	movs	r0, #1
 800619a:	fa00 f202 	lsl.w	r2, r0, r2
 800619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e100 	.word	0xe000e100

080061b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	6039      	str	r1, [r7, #0]
 80061be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	db0a      	blt.n	80061de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	b2da      	uxtb	r2, r3
 80061cc:	490c      	ldr	r1, [pc, #48]	; (8006200 <__NVIC_SetPriority+0x4c>)
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	440b      	add	r3, r1
 80061d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061dc:	e00a      	b.n	80061f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	4908      	ldr	r1, [pc, #32]	; (8006204 <__NVIC_SetPriority+0x50>)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	3b04      	subs	r3, #4
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	440b      	add	r3, r1
 80061f2:	761a      	strb	r2, [r3, #24]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	e000e100 	.word	0xe000e100
 8006204:	e000ed00 	.word	0xe000ed00

08006208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006208:	b480      	push	{r7}
 800620a:	b089      	sub	sp, #36	; 0x24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f1c3 0307 	rsb	r3, r3, #7
 8006222:	2b04      	cmp	r3, #4
 8006224:	bf28      	it	cs
 8006226:	2304      	movcs	r3, #4
 8006228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	3304      	adds	r3, #4
 800622e:	2b06      	cmp	r3, #6
 8006230:	d902      	bls.n	8006238 <NVIC_EncodePriority+0x30>
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3b03      	subs	r3, #3
 8006236:	e000      	b.n	800623a <NVIC_EncodePriority+0x32>
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800623c:	f04f 32ff 	mov.w	r2, #4294967295
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	fa02 f303 	lsl.w	r3, r2, r3
 8006246:	43da      	mvns	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	401a      	ands	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006250:	f04f 31ff 	mov.w	r1, #4294967295
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	fa01 f303 	lsl.w	r3, r1, r3
 800625a:	43d9      	mvns	r1, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006260:	4313      	orrs	r3, r2
         );
}
 8006262:	4618      	mov	r0, r3
 8006264:	3724      	adds	r7, #36	; 0x24
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3b01      	subs	r3, #1
 800627c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006280:	d301      	bcc.n	8006286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006282:	2301      	movs	r3, #1
 8006284:	e00f      	b.n	80062a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006286:	4a0a      	ldr	r2, [pc, #40]	; (80062b0 <SysTick_Config+0x40>)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3b01      	subs	r3, #1
 800628c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800628e:	210f      	movs	r1, #15
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	f7ff ff8e 	bl	80061b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006298:	4b05      	ldr	r3, [pc, #20]	; (80062b0 <SysTick_Config+0x40>)
 800629a:	2200      	movs	r2, #0
 800629c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <SysTick_Config+0x40>)
 80062a0:	2207      	movs	r2, #7
 80062a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	e000e010 	.word	0xe000e010

080062b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff29 	bl	8006114 <__NVIC_SetPriorityGrouping>
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	4603      	mov	r3, r0
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80062d8:	f7ff ff40 	bl	800615c <__NVIC_GetPriorityGrouping>
 80062dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f7ff ff90 	bl	8006208 <NVIC_EncodePriority>
 80062e8:	4602      	mov	r2, r0
 80062ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ff5f 	bl	80061b4 <__NVIC_SetPriority>
}
 80062f6:	bf00      	nop
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	4603      	mov	r3, r0
 8006306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff33 	bl	8006178 <__NVIC_EnableIRQ>
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ffa4 	bl	8006270 <SysTick_Config>
 8006328:	4603      	mov	r3, r0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d005      	beq.n	8006356 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2204      	movs	r2, #4
 800634e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e037      	b.n	80063c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 020e 	bic.w	r2, r2, #14
 8006364:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006374:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0201 	bic.w	r2, r2, #1
 8006384:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	f003 021f 	and.w	r2, r3, #31
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2101      	movs	r1, #1
 8006394:	fa01 f202 	lsl.w	r2, r1, r2
 8006398:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00c      	beq.n	80063c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d00d      	beq.n	8006418 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	e047      	b.n	80064a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 020e 	bic.w	r2, r2, #14
 8006426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f202 	lsl.w	r2, r1, r2
 800645a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006464:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800647c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006486:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	4798      	blx	r3
    }
  }
  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064c2:	e15a      	b.n	800677a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2101      	movs	r1, #1
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	4013      	ands	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 814c 	beq.w	8006774 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d005      	beq.n	80064f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d130      	bne.n	8006556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	2203      	movs	r2, #3
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43db      	mvns	r3, r3
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4013      	ands	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800652a:	2201      	movs	r2, #1
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	fa02 f303 	lsl.w	r3, r2, r3
 8006532:	43db      	mvns	r3, r3
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4013      	ands	r3, r2
 8006538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	f003 0201 	and.w	r2, r3, #1
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b03      	cmp	r3, #3
 8006560:	d017      	beq.n	8006592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	2203      	movs	r2, #3
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4013      	ands	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d123      	bne.n	80065e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	08da      	lsrs	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3208      	adds	r2, #8
 80065a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	220f      	movs	r2, #15
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	43db      	mvns	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	691a      	ldr	r2, [r3, #16]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	08da      	lsrs	r2, r3, #3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3208      	adds	r2, #8
 80065e0:	6939      	ldr	r1, [r7, #16]
 80065e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	2203      	movs	r2, #3
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4013      	ands	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f003 0203 	and.w	r2, r3, #3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80a6 	beq.w	8006774 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006628:	4b5b      	ldr	r3, [pc, #364]	; (8006798 <HAL_GPIO_Init+0x2e4>)
 800662a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662c:	4a5a      	ldr	r2, [pc, #360]	; (8006798 <HAL_GPIO_Init+0x2e4>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6613      	str	r3, [r2, #96]	; 0x60
 8006634:	4b58      	ldr	r3, [pc, #352]	; (8006798 <HAL_GPIO_Init+0x2e4>)
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006640:	4a56      	ldr	r2, [pc, #344]	; (800679c <HAL_GPIO_Init+0x2e8>)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	089b      	lsrs	r3, r3, #2
 8006646:	3302      	adds	r3, #2
 8006648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	220f      	movs	r2, #15
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4013      	ands	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800666a:	d01f      	beq.n	80066ac <HAL_GPIO_Init+0x1f8>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a4c      	ldr	r2, [pc, #304]	; (80067a0 <HAL_GPIO_Init+0x2ec>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d019      	beq.n	80066a8 <HAL_GPIO_Init+0x1f4>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a4b      	ldr	r2, [pc, #300]	; (80067a4 <HAL_GPIO_Init+0x2f0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <HAL_GPIO_Init+0x1f0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_GPIO_Init+0x2f4>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00d      	beq.n	80066a0 <HAL_GPIO_Init+0x1ec>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a49      	ldr	r2, [pc, #292]	; (80067ac <HAL_GPIO_Init+0x2f8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d007      	beq.n	800669c <HAL_GPIO_Init+0x1e8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a48      	ldr	r2, [pc, #288]	; (80067b0 <HAL_GPIO_Init+0x2fc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <HAL_GPIO_Init+0x1e4>
 8006694:	2305      	movs	r3, #5
 8006696:	e00a      	b.n	80066ae <HAL_GPIO_Init+0x1fa>
 8006698:	2306      	movs	r3, #6
 800669a:	e008      	b.n	80066ae <HAL_GPIO_Init+0x1fa>
 800669c:	2304      	movs	r3, #4
 800669e:	e006      	b.n	80066ae <HAL_GPIO_Init+0x1fa>
 80066a0:	2303      	movs	r3, #3
 80066a2:	e004      	b.n	80066ae <HAL_GPIO_Init+0x1fa>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e002      	b.n	80066ae <HAL_GPIO_Init+0x1fa>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <HAL_GPIO_Init+0x1fa>
 80066ac:	2300      	movs	r3, #0
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	f002 0203 	and.w	r2, r2, #3
 80066b4:	0092      	lsls	r2, r2, #2
 80066b6:	4093      	lsls	r3, r2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066be:	4937      	ldr	r1, [pc, #220]	; (800679c <HAL_GPIO_Init+0x2e8>)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	3302      	adds	r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066cc:	4b39      	ldr	r3, [pc, #228]	; (80067b4 <HAL_GPIO_Init+0x300>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4013      	ands	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066f0:	4a30      	ldr	r2, [pc, #192]	; (80067b4 <HAL_GPIO_Init+0x300>)
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066f6:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <HAL_GPIO_Init+0x300>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	43db      	mvns	r3, r3
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4013      	ands	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800671a:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_GPIO_Init+0x300>)
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006720:	4b24      	ldr	r3, [pc, #144]	; (80067b4 <HAL_GPIO_Init+0x300>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	43db      	mvns	r3, r3
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4013      	ands	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006744:	4a1b      	ldr	r2, [pc, #108]	; (80067b4 <HAL_GPIO_Init+0x300>)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800674a:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <HAL_GPIO_Init+0x300>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	43db      	mvns	r3, r3
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	4013      	ands	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800676e:	4a11      	ldr	r2, [pc, #68]	; (80067b4 <HAL_GPIO_Init+0x300>)
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	3301      	adds	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	fa22 f303 	lsr.w	r3, r2, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	f47f ae9d 	bne.w	80064c4 <HAL_GPIO_Init+0x10>
  }
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40021000 	.word	0x40021000
 800679c:	40010000 	.word	0x40010000
 80067a0:	48000400 	.word	0x48000400
 80067a4:	48000800 	.word	0x48000800
 80067a8:	48000c00 	.word	0x48000c00
 80067ac:	48001000 	.word	0x48001000
 80067b0:	48001400 	.word	0x48001400
 80067b4:	40010400 	.word	0x40010400

080067b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	807b      	strh	r3, [r7, #2]
 80067c4:	4613      	mov	r3, r2
 80067c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067c8:	787b      	ldrb	r3, [r7, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067ce:	887a      	ldrh	r2, [r7, #2]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067d4:	e002      	b.n	80067dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067d6:	887a      	ldrh	r2, [r7, #2]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e081      	b.n	80068fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fd fdbc 	bl	800438c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2224      	movs	r2, #36	; 0x24
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006838:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006848:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d107      	bne.n	8006862 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	e006      	b.n	8006870 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800686e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d104      	bne.n	8006882 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69d9      	ldr	r1, [r3, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	4608      	mov	r0, r1
 8006912:	4611      	mov	r1, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4603      	mov	r3, r0
 8006918:	817b      	strh	r3, [r7, #10]
 800691a:	460b      	mov	r3, r1
 800691c:	813b      	strh	r3, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b20      	cmp	r3, #32
 800692c:	f040 80f9 	bne.w	8006b22 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_I2C_Mem_Write+0x34>
 8006936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006942:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0ed      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_I2C_Mem_Write+0x4e>
 8006952:	2302      	movs	r3, #2
 8006954:	e0e6      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800695e:	f7fe f81f 	bl	80049a0 <HAL_GetTick>
 8006962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	2319      	movs	r3, #25
 800696a:	2201      	movs	r2, #1
 800696c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 fac3 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0d1      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2221      	movs	r2, #33	; 0x21
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2240      	movs	r2, #64	; 0x40
 800698c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069a8:	88f8      	ldrh	r0, [r7, #6]
 80069aa:	893a      	ldrh	r2, [r7, #8]
 80069ac:	8979      	ldrh	r1, [r7, #10]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	4603      	mov	r3, r0
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f9d3 	bl	8006d64 <I2C_RequestMemoryWrite>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e0a9      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2bff      	cmp	r3, #255	; 0xff
 80069d8:	d90e      	bls.n	80069f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	8979      	ldrh	r1, [r7, #10]
 80069e8:	2300      	movs	r3, #0
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fc2b 	bl	800724c <I2C_TransferConfig>
 80069f6:	e00f      	b.n	8006a18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	8979      	ldrh	r1, [r7, #10]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fc1a 	bl	800724c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 faad 	bl	8006f7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e07b      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d034      	beq.n	8006ad0 <HAL_I2C_Mem_Write+0x1c8>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d130      	bne.n	8006ad0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	2200      	movs	r2, #0
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fa3f 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e04d      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2bff      	cmp	r3, #255	; 0xff
 8006a90:	d90e      	bls.n	8006ab0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	8979      	ldrh	r1, [r7, #10]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fbcf 	bl	800724c <I2C_TransferConfig>
 8006aae:	e00f      	b.n	8006ad0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	8979      	ldrh	r1, [r7, #10]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fbbe 	bl	800724c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d19e      	bne.n	8006a18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fa8c 	bl	8006ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e01a      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2220      	movs	r2, #32
 8006af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6859      	ldr	r1, [r3, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <HAL_I2C_Mem_Write+0x224>)
 8006b02:	400b      	ands	r3, r1
 8006b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e000      	b.n	8006b24 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b22:	2302      	movs	r3, #2
  }
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	fe00e800 	.word	0xfe00e800

08006b30 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	4608      	mov	r0, r1
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4603      	mov	r3, r0
 8006b40:	817b      	strh	r3, [r7, #10]
 8006b42:	460b      	mov	r3, r1
 8006b44:	813b      	strh	r3, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	f040 80fd 	bne.w	8006d52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <HAL_I2C_Mem_Read+0x34>
 8006b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0f1      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_I2C_Mem_Read+0x4e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e0ea      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b86:	f7fd ff0b 	bl	80049a0 <HAL_GetTick>
 8006b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2319      	movs	r3, #25
 8006b92:	2201      	movs	r2, #1
 8006b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f9af 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0d5      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2222      	movs	r2, #34	; 0x22
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2240      	movs	r2, #64	; 0x40
 8006bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a3a      	ldr	r2, [r7, #32]
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bd0:	88f8      	ldrh	r0, [r7, #6]
 8006bd2:	893a      	ldrh	r2, [r7, #8]
 8006bd4:	8979      	ldrh	r1, [r7, #10]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	4603      	mov	r3, r0
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f913 	bl	8006e0c <I2C_RequestMemoryRead>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0ad      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2bff      	cmp	r3, #255	; 0xff
 8006c00:	d90e      	bls.n	8006c20 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	22ff      	movs	r2, #255	; 0xff
 8006c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	8979      	ldrh	r1, [r7, #10]
 8006c10:	4b52      	ldr	r3, [pc, #328]	; (8006d5c <HAL_I2C_Mem_Read+0x22c>)
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fb17 	bl	800724c <I2C_TransferConfig>
 8006c1e:	e00f      	b.n	8006c40 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	8979      	ldrh	r1, [r7, #10]
 8006c32:	4b4a      	ldr	r3, [pc, #296]	; (8006d5c <HAL_I2C_Mem_Read+0x22c>)
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fb06 	bl	800724c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	2200      	movs	r2, #0
 8006c48:	2104      	movs	r1, #4
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 f956 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e07c      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d034      	beq.n	8006d00 <HAL_I2C_Mem_Read+0x1d0>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d130      	bne.n	8006d00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f927 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e04d      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2bff      	cmp	r3, #255	; 0xff
 8006cc0:	d90e      	bls.n	8006ce0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	8979      	ldrh	r1, [r7, #10]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fab7 	bl	800724c <I2C_TransferConfig>
 8006cde:	e00f      	b.n	8006d00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	8979      	ldrh	r1, [r7, #10]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 faa6 	bl	800724c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d19a      	bne.n	8006c40 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f974 	bl	8006ffc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e01a      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2220      	movs	r2, #32
 8006d24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6859      	ldr	r1, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <HAL_I2C_Mem_Read+0x230>)
 8006d32:	400b      	ands	r3, r1
 8006d34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e000      	b.n	8006d54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d52:	2302      	movs	r3, #2
  }
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	80002400 	.word	0x80002400
 8006d60:	fe00e800 	.word	0xfe00e800

08006d64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4603      	mov	r3, r0
 8006d74:	817b      	strh	r3, [r7, #10]
 8006d76:	460b      	mov	r3, r1
 8006d78:	813b      	strh	r3, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	8979      	ldrh	r1, [r7, #10]
 8006d84:	4b20      	ldr	r3, [pc, #128]	; (8006e08 <I2C_RequestMemoryWrite+0xa4>)
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fa5d 	bl	800724c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	69b9      	ldr	r1, [r7, #24]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f8f0 	bl	8006f7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e02c      	b.n	8006e00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d105      	bne.n	8006db8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dac:	893b      	ldrh	r3, [r7, #8]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	629a      	str	r2, [r3, #40]	; 0x28
 8006db6:	e015      	b.n	8006de4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006db8:	893b      	ldrh	r3, [r7, #8]
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	69b9      	ldr	r1, [r7, #24]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f8d6 	bl	8006f7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e012      	b.n	8006e00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dda:	893b      	ldrh	r3, [r7, #8]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2200      	movs	r2, #0
 8006dec:	2180      	movs	r1, #128	; 0x80
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f884 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	80002000 	.word	0x80002000

08006e0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	817b      	strh	r3, [r7, #10]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	813b      	strh	r3, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	8979      	ldrh	r1, [r7, #10]
 8006e2c:	4b20      	ldr	r3, [pc, #128]	; (8006eb0 <I2C_RequestMemoryRead+0xa4>)
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2300      	movs	r3, #0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fa0a 	bl	800724c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	69b9      	ldr	r1, [r7, #24]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f89d 	bl	8006f7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e02c      	b.n	8006ea6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d105      	bne.n	8006e5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e52:	893b      	ldrh	r3, [r7, #8]
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e5c:	e015      	b.n	8006e8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e5e:	893b      	ldrh	r3, [r7, #8]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	69b9      	ldr	r1, [r7, #24]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f883 	bl	8006f7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e012      	b.n	8006ea6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2140      	movs	r1, #64	; 0x40
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f831 	bl	8006efc <I2C_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	80002000 	.word	0x80002000

08006eb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d103      	bne.n	8006ed2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d007      	beq.n	8006ef0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	619a      	str	r2, [r3, #24]
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f0c:	e022      	b.n	8006f54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d01e      	beq.n	8006f54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fd fd43 	bl	80049a0 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d113      	bne.n	8006f54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f30:	f043 0220 	orr.w	r2, r3, #32
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e00f      	b.n	8006f74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	bf0c      	ite	eq
 8006f64:	2301      	moveq	r3, #1
 8006f66:	2300      	movne	r3, #0
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d0cd      	beq.n	8006f0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f88:	e02c      	b.n	8006fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f870 	bl	8007074 <I2C_IsErrorOccurred>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e02a      	b.n	8006ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d01e      	beq.n	8006fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa6:	f7fd fcfb 	bl	80049a0 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d113      	bne.n	8006fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e007      	b.n	8006ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d1cb      	bne.n	8006f8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007008:	e028      	b.n	800705c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f830 	bl	8007074 <I2C_IsErrorOccurred>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e026      	b.n	800706c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fd fcbf 	bl	80049a0 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d113      	bne.n	800705c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	f043 0220 	orr.w	r2, r3, #32
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e007      	b.n	800706c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	d1cf      	bne.n	800700a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	; 0x28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800708e:	2300      	movs	r3, #0
 8007090:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f003 0310 	and.w	r3, r3, #16
 800709c:	2b00      	cmp	r3, #0
 800709e:	d075      	beq.n	800718c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2210      	movs	r2, #16
 80070a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070a8:	e056      	b.n	8007158 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d052      	beq.n	8007158 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070b2:	f7fd fc75 	bl	80049a0 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <I2C_IsErrorOccurred+0x54>
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d147      	bne.n	8007158 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ea:	d12e      	bne.n	800714a <I2C_IsErrorOccurred+0xd6>
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070f2:	d02a      	beq.n	800714a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80070f4:	7cfb      	ldrb	r3, [r7, #19]
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d027      	beq.n	800714a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007108:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800710a:	f7fd fc49 	bl	80049a0 <HAL_GetTick>
 800710e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007110:	e01b      	b.n	800714a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007112:	f7fd fc45 	bl	80049a0 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	2b19      	cmp	r3, #25
 800711e:	d914      	bls.n	800714a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007124:	f043 0220 	orr.w	r2, r3, #32
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b20      	cmp	r3, #32
 8007156:	d1dc      	bne.n	8007112 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b20      	cmp	r3, #32
 8007164:	d003      	beq.n	800716e <I2C_IsErrorOccurred+0xfa>
 8007166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716a:	2b00      	cmp	r3, #0
 800716c:	d09d      	beq.n	80070aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800716e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2220      	movs	r2, #32
 800717c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	f043 0304 	orr.w	r3, r3, #4
 8007184:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	f043 0308 	orr.w	r3, r3, #8
 80071c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f043 0302 	orr.w	r3, r3, #2
 80071e8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80071fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d01c      	beq.n	800723c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fe56 	bl	8006eb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6859      	ldr	r1, [r3, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <I2C_IsErrorOccurred+0x1d4>)
 8007214:	400b      	ands	r3, r1
 8007216:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	431a      	orrs	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007240:	4618      	mov	r0, r3
 8007242:	3728      	adds	r7, #40	; 0x28
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	fe00e800 	.word	0xfe00e800

0800724c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	817b      	strh	r3, [r7, #10]
 800725a:	4613      	mov	r3, r2
 800725c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800725e:	897b      	ldrh	r3, [r7, #10]
 8007260:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007264:	7a7b      	ldrb	r3, [r7, #9]
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800726c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	4313      	orrs	r3, r2
 8007276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800727a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	0d5b      	lsrs	r3, r3, #21
 8007286:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <I2C_TransferConfig+0x60>)
 800728c:	430b      	orrs	r3, r1
 800728e:	43db      	mvns	r3, r3
 8007290:	ea02 0103 	and.w	r1, r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	03ff63ff 	.word	0x03ff63ff

080072b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d138      	bne.n	8007338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e032      	b.n	800733a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2224      	movs	r2, #36	; 0x24
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007346:	b480      	push	{r7}
 8007348:	b085      	sub	sp, #20
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b20      	cmp	r3, #32
 800735a:	d139      	bne.n	80073d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007366:	2302      	movs	r3, #2
 8007368:	e033      	b.n	80073d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2224      	movs	r2, #36	; 0x24
 8007376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007398:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e000      	b.n	80073d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073d0:	2302      	movs	r3, #2
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d141      	bne.n	8007472 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073ee:	4b4b      	ldr	r3, [pc, #300]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fa:	d131      	bne.n	8007460 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073fc:	4b47      	ldr	r3, [pc, #284]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007402:	4a46      	ldr	r2, [pc, #280]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800740c:	4b43      	ldr	r3, [pc, #268]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007414:	4a41      	ldr	r2, [pc, #260]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800741a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800741c:	4b40      	ldr	r3, [pc, #256]	; (8007520 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2232      	movs	r2, #50	; 0x32
 8007422:	fb02 f303 	mul.w	r3, r2, r3
 8007426:	4a3f      	ldr	r2, [pc, #252]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	0c9b      	lsrs	r3, r3, #18
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007432:	e002      	b.n	800743a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b01      	subs	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800743a:	4b38      	ldr	r3, [pc, #224]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007446:	d102      	bne.n	800744e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f2      	bne.n	8007434 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800744e:	4b33      	ldr	r3, [pc, #204]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745a:	d158      	bne.n	800750e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e057      	b.n	8007510 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007460:	4b2e      	ldr	r3, [pc, #184]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007466:	4a2d      	ldr	r2, [pc, #180]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007470:	e04d      	b.n	800750e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007478:	d141      	bne.n	80074fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800747a:	4b28      	ldr	r3, [pc, #160]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007486:	d131      	bne.n	80074ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007488:	4b24      	ldr	r3, [pc, #144]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800748a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800748e:	4a23      	ldr	r2, [pc, #140]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80074a0:	4a1e      	ldr	r2, [pc, #120]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80074a8:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2232      	movs	r2, #50	; 0x32
 80074ae:	fb02 f303 	mul.w	r3, r2, r3
 80074b2:	4a1c      	ldr	r2, [pc, #112]	; (8007524 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80074b4:	fba2 2303 	umull	r2, r3, r2, r3
 80074b8:	0c9b      	lsrs	r3, r3, #18
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074be:	e002      	b.n	80074c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d2:	d102      	bne.n	80074da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f2      	bne.n	80074c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074e6:	d112      	bne.n	800750e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e011      	b.n	8007510 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	4a0a      	ldr	r2, [pc, #40]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80074f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80074fc:	e007      	b.n	800750e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007506:	4a05      	ldr	r2, [pc, #20]	; (800751c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007508:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800750c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	40007000 	.word	0x40007000
 8007520:	20000058 	.word	0x20000058
 8007524:	431bde83 	.word	0x431bde83

08007528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e306      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d075      	beq.n	8007632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007546:	4b97      	ldr	r3, [pc, #604]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 030c 	and.w	r3, r3, #12
 800754e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007550:	4b94      	ldr	r3, [pc, #592]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b0c      	cmp	r3, #12
 800755e:	d102      	bne.n	8007566 <HAL_RCC_OscConfig+0x3e>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2b03      	cmp	r3, #3
 8007564:	d002      	beq.n	800756c <HAL_RCC_OscConfig+0x44>
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d10b      	bne.n	8007584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800756c:	4b8d      	ldr	r3, [pc, #564]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d05b      	beq.n	8007630 <HAL_RCC_OscConfig+0x108>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d157      	bne.n	8007630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e2e1      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800758c:	d106      	bne.n	800759c <HAL_RCC_OscConfig+0x74>
 800758e:	4b85      	ldr	r3, [pc, #532]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a84      	ldr	r2, [pc, #528]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e01d      	b.n	80075d8 <HAL_RCC_OscConfig+0xb0>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075a4:	d10c      	bne.n	80075c0 <HAL_RCC_OscConfig+0x98>
 80075a6:	4b7f      	ldr	r3, [pc, #508]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a7e      	ldr	r2, [pc, #504]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	4b7c      	ldr	r3, [pc, #496]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a7b      	ldr	r2, [pc, #492]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e00b      	b.n	80075d8 <HAL_RCC_OscConfig+0xb0>
 80075c0:	4b78      	ldr	r3, [pc, #480]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a77      	ldr	r2, [pc, #476]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	4b75      	ldr	r3, [pc, #468]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a74      	ldr	r2, [pc, #464]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d013      	beq.n	8007608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e0:	f7fd f9de 	bl	80049a0 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075e8:	f7fd f9da 	bl	80049a0 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b64      	cmp	r3, #100	; 0x64
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e2a6      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075fa:	4b6a      	ldr	r3, [pc, #424]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0f0      	beq.n	80075e8 <HAL_RCC_OscConfig+0xc0>
 8007606:	e014      	b.n	8007632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fd f9ca 	bl	80049a0 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007610:	f7fd f9c6 	bl	80049a0 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b64      	cmp	r3, #100	; 0x64
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e292      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007622:	4b60      	ldr	r3, [pc, #384]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <HAL_RCC_OscConfig+0xe8>
 800762e:	e000      	b.n	8007632 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d075      	beq.n	800772a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800763e:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
 8007646:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007648:	4b56      	ldr	r3, [pc, #344]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0303 	and.w	r3, r3, #3
 8007650:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b0c      	cmp	r3, #12
 8007656:	d102      	bne.n	800765e <HAL_RCC_OscConfig+0x136>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d002      	beq.n	8007664 <HAL_RCC_OscConfig+0x13c>
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d11f      	bne.n	80076a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007664:	4b4f      	ldr	r3, [pc, #316]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <HAL_RCC_OscConfig+0x154>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e265      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800767c:	4b49      	ldr	r3, [pc, #292]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	061b      	lsls	r3, r3, #24
 800768a:	4946      	ldr	r1, [pc, #280]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800768c:	4313      	orrs	r3, r2
 800768e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007690:	4b45      	ldr	r3, [pc, #276]	; (80077a8 <HAL_RCC_OscConfig+0x280>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd f937 	bl	8004908 <HAL_InitTick>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d043      	beq.n	8007728 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e251      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d023      	beq.n	80076f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076ac:	4b3d      	ldr	r3, [pc, #244]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a3c      	ldr	r2, [pc, #240]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fd f972 	bl	80049a0 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076c0:	f7fd f96e 	bl	80049a0 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e23a      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076d2:	4b34      	ldr	r3, [pc, #208]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076de:	4b31      	ldr	r3, [pc, #196]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	061b      	lsls	r3, r3, #24
 80076ec:	492d      	ldr	r1, [pc, #180]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	604b      	str	r3, [r1, #4]
 80076f2:	e01a      	b.n	800772a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076f4:	4b2b      	ldr	r3, [pc, #172]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a2a      	ldr	r2, [pc, #168]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 80076fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fd f94e 	bl	80049a0 <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007708:	f7fd f94a 	bl	80049a0 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e216      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800771a:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f0      	bne.n	8007708 <HAL_RCC_OscConfig+0x1e0>
 8007726:	e000      	b.n	800772a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d041      	beq.n	80077ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01c      	beq.n	8007778 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800773e:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007744:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774e:	f7fd f927 	bl	80049a0 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007756:	f7fd f923 	bl	80049a0 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e1ef      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007768:	4b0e      	ldr	r3, [pc, #56]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800776a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0ef      	beq.n	8007756 <HAL_RCC_OscConfig+0x22e>
 8007776:	e020      	b.n	80077ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007778:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 800777a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800777e:	4a09      	ldr	r2, [pc, #36]	; (80077a4 <HAL_RCC_OscConfig+0x27c>)
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007788:	f7fd f90a 	bl	80049a0 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800778e:	e00d      	b.n	80077ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007790:	f7fd f906 	bl	80049a0 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d906      	bls.n	80077ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e1d2      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
 80077a2:	bf00      	nop
 80077a4:	40021000 	.word	0x40021000
 80077a8:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077ac:	4b8c      	ldr	r3, [pc, #560]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80077ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1ea      	bne.n	8007790 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80a6 	beq.w	8007914 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077c8:	2300      	movs	r3, #0
 80077ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077cc:	4b84      	ldr	r3, [pc, #528]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80077ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_RCC_OscConfig+0x2b4>
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <HAL_RCC_OscConfig+0x2b6>
 80077dc:	2300      	movs	r3, #0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00d      	beq.n	80077fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e2:	4b7f      	ldr	r3, [pc, #508]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80077e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e6:	4a7e      	ldr	r2, [pc, #504]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80077e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ec:	6593      	str	r3, [r2, #88]	; 0x58
 80077ee:	4b7c      	ldr	r3, [pc, #496]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80077fa:	2301      	movs	r3, #1
 80077fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077fe:	4b79      	ldr	r3, [pc, #484]	; (80079e4 <HAL_RCC_OscConfig+0x4bc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007806:	2b00      	cmp	r3, #0
 8007808:	d118      	bne.n	800783c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800780a:	4b76      	ldr	r3, [pc, #472]	; (80079e4 <HAL_RCC_OscConfig+0x4bc>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a75      	ldr	r2, [pc, #468]	; (80079e4 <HAL_RCC_OscConfig+0x4bc>)
 8007810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007816:	f7fd f8c3 	bl	80049a0 <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800781c:	e008      	b.n	8007830 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800781e:	f7fd f8bf 	bl	80049a0 <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e18b      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007830:	4b6c      	ldr	r3, [pc, #432]	; (80079e4 <HAL_RCC_OscConfig+0x4bc>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0f0      	beq.n	800781e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d108      	bne.n	8007856 <HAL_RCC_OscConfig+0x32e>
 8007844:	4b66      	ldr	r3, [pc, #408]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784a:	4a65      	ldr	r2, [pc, #404]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007854:	e024      	b.n	80078a0 <HAL_RCC_OscConfig+0x378>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b05      	cmp	r3, #5
 800785c:	d110      	bne.n	8007880 <HAL_RCC_OscConfig+0x358>
 800785e:	4b60      	ldr	r3, [pc, #384]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007864:	4a5e      	ldr	r2, [pc, #376]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007866:	f043 0304 	orr.w	r3, r3, #4
 800786a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800786e:	4b5c      	ldr	r3, [pc, #368]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	4a5a      	ldr	r2, [pc, #360]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800787e:	e00f      	b.n	80078a0 <HAL_RCC_OscConfig+0x378>
 8007880:	4b57      	ldr	r3, [pc, #348]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007886:	4a56      	ldr	r2, [pc, #344]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007890:	4b53      	ldr	r3, [pc, #332]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007896:	4a52      	ldr	r2, [pc, #328]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d016      	beq.n	80078d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a8:	f7fd f87a 	bl	80049a0 <HAL_GetTick>
 80078ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078ae:	e00a      	b.n	80078c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b0:	f7fd f876 	bl	80049a0 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80078be:	4293      	cmp	r3, r2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e140      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078c6:	4b46      	ldr	r3, [pc, #280]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80078c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0ed      	beq.n	80078b0 <HAL_RCC_OscConfig+0x388>
 80078d4:	e015      	b.n	8007902 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d6:	f7fd f863 	bl	80049a0 <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078de:	f7fd f85f 	bl	80049a0 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e129      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078f4:	4b3a      	ldr	r3, [pc, #232]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1ed      	bne.n	80078de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007902:	7ffb      	ldrb	r3, [r7, #31]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d105      	bne.n	8007914 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007908:	4b35      	ldr	r3, [pc, #212]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 800790a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790c:	4a34      	ldr	r2, [pc, #208]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 800790e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d03c      	beq.n	800799a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01c      	beq.n	8007962 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007928:	4b2d      	ldr	r3, [pc, #180]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 800792a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800792e:	4a2c      	ldr	r2, [pc, #176]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007930:	f043 0301 	orr.w	r3, r3, #1
 8007934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007938:	f7fd f832 	bl	80049a0 <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007940:	f7fd f82e 	bl	80049a0 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e0fa      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007952:	4b23      	ldr	r3, [pc, #140]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0ef      	beq.n	8007940 <HAL_RCC_OscConfig+0x418>
 8007960:	e01b      	b.n	800799a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007962:	4b1f      	ldr	r3, [pc, #124]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 8007964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007968:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 800796a:	f023 0301 	bic.w	r3, r3, #1
 800796e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007972:	f7fd f815 	bl	80049a0 <HAL_GetTick>
 8007976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007978:	e008      	b.n	800798c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800797a:	f7fd f811 	bl	80049a0 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	2b02      	cmp	r3, #2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e0dd      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800798c:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 800798e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1ef      	bne.n	800797a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80d1 	beq.w	8007b46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 030c 	and.w	r3, r3, #12
 80079ac:	2b0c      	cmp	r3, #12
 80079ae:	f000 808b 	beq.w	8007ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d15e      	bne.n	8007a78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <HAL_RCC_OscConfig+0x4b8>)
 80079c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c6:	f7fc ffeb 	bl	80049a0 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079cc:	e00c      	b.n	80079e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ce:	f7fc ffe7 	bl	80049a0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d905      	bls.n	80079e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0b3      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
 80079e0:	40021000 	.word	0x40021000
 80079e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e8:	4b59      	ldr	r3, [pc, #356]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ec      	bne.n	80079ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079f4:	4b56      	ldr	r3, [pc, #344]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	4b56      	ldr	r3, [pc, #344]	; (8007b54 <HAL_RCC_OscConfig+0x62c>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6a11      	ldr	r1, [r2, #32]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a04:	3a01      	subs	r2, #1
 8007a06:	0112      	lsls	r2, r2, #4
 8007a08:	4311      	orrs	r1, r2
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007a0e:	0212      	lsls	r2, r2, #8
 8007a10:	4311      	orrs	r1, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007a16:	0852      	lsrs	r2, r2, #1
 8007a18:	3a01      	subs	r2, #1
 8007a1a:	0552      	lsls	r2, r2, #21
 8007a1c:	4311      	orrs	r1, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a22:	0852      	lsrs	r2, r2, #1
 8007a24:	3a01      	subs	r2, #1
 8007a26:	0652      	lsls	r2, r2, #25
 8007a28:	4311      	orrs	r1, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a2e:	06d2      	lsls	r2, r2, #27
 8007a30:	430a      	orrs	r2, r1
 8007a32:	4947      	ldr	r1, [pc, #284]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a38:	4b45      	ldr	r3, [pc, #276]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a44      	ldr	r2, [pc, #272]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a44:	4b42      	ldr	r3, [pc, #264]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	4a41      	ldr	r2, [pc, #260]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a50:	f7fc ffa6 	bl	80049a0 <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a58:	f7fc ffa2 	bl	80049a0 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e06e      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a6a:	4b39      	ldr	r3, [pc, #228]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0x530>
 8007a76:	e066      	b.n	8007b46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a78:	4b35      	ldr	r3, [pc, #212]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a34      	ldr	r2, [pc, #208]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007a84:	4b32      	ldr	r3, [pc, #200]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a31      	ldr	r2, [pc, #196]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a8a:	f023 0303 	bic.w	r3, r3, #3
 8007a8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007a90:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	4a2e      	ldr	r2, [pc, #184]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007a96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fc ff7e 	bl	80049a0 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa8:	f7fc ff7a 	bl	80049a0 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e046      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aba:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f0      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x580>
 8007ac6:	e03e      	b.n	8007b46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e039      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ad4:	4b1e      	ldr	r3, [pc, #120]	; (8007b50 <HAL_RCC_OscConfig+0x628>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f003 0203 	and.w	r2, r3, #3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d12c      	bne.n	8007b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	3b01      	subs	r3, #1
 8007af4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d123      	bne.n	8007b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d11b      	bne.n	8007b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d113      	bne.n	8007b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	3b01      	subs	r3, #1
 8007b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d109      	bne.n	8007b42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d001      	beq.n	8007b46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	40021000 	.word	0x40021000
 8007b54:	019f800c 	.word	0x019f800c

08007b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e11e      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b70:	4b91      	ldr	r3, [pc, #580]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d910      	bls.n	8007ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b7e:	4b8e      	ldr	r3, [pc, #568]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f023 020f 	bic.w	r2, r3, #15
 8007b86:	498c      	ldr	r1, [pc, #560]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b8e:	4b8a      	ldr	r3, [pc, #552]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d001      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e106      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d073      	beq.n	8007c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d129      	bne.n	8007c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bb4:	4b81      	ldr	r3, [pc, #516]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0f4      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007bc4:	f000 f99e 	bl	8007f04 <RCC_GetSysClockFreqFromPLLSource>
 8007bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	4a7c      	ldr	r2, [pc, #496]	; (8007dc0 <HAL_RCC_ClockConfig+0x268>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d93f      	bls.n	8007c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007bd2:	4b7a      	ldr	r3, [pc, #488]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d033      	beq.n	8007c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d12f      	bne.n	8007c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007bf2:	4b72      	ldr	r3, [pc, #456]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bfa:	4a70      	ldr	r2, [pc, #448]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007c02:	2380      	movs	r3, #128	; 0x80
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	e024      	b.n	8007c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d107      	bne.n	8007c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c10:	4b6a      	ldr	r3, [pc, #424]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d109      	bne.n	8007c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e0c6      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c20:	4b66      	ldr	r3, [pc, #408]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0be      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007c30:	f000 f8ce 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 8007c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4a61      	ldr	r2, [pc, #388]	; (8007dc0 <HAL_RCC_ClockConfig+0x268>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d909      	bls.n	8007c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007c3e:	4b5f      	ldr	r3, [pc, #380]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c46:	4a5d      	ldr	r2, [pc, #372]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007c4e:	2380      	movs	r3, #128	; 0x80
 8007c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c52:	4b5a      	ldr	r3, [pc, #360]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f023 0203 	bic.w	r2, r3, #3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4957      	ldr	r1, [pc, #348]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c64:	f7fc fe9c 	bl	80049a0 <HAL_GetTick>
 8007c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6a:	e00a      	b.n	8007c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c6c:	f7fc fe98 	bl	80049a0 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e095      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c82:	4b4e      	ldr	r3, [pc, #312]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 020c 	and.w	r2, r3, #12
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d1eb      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d023      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cac:	4b43      	ldr	r3, [pc, #268]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	4a42      	ldr	r2, [pc, #264]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0308 	and.w	r3, r3, #8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007cc4:	4b3d      	ldr	r3, [pc, #244]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ccc:	4a3b      	ldr	r2, [pc, #236]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cd4:	4b39      	ldr	r3, [pc, #228]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4936      	ldr	r1, [pc, #216]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	608b      	str	r3, [r1, #8]
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b80      	cmp	r3, #128	; 0x80
 8007cec:	d105      	bne.n	8007cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007cee:	4b33      	ldr	r3, [pc, #204]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4a32      	ldr	r2, [pc, #200]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d21d      	bcs.n	8007d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f023 020f 	bic.w	r2, r3, #15
 8007d10:	4929      	ldr	r1, [pc, #164]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d18:	f7fc fe42 	bl	80049a0 <HAL_GetTick>
 8007d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1e:	e00a      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d20:	f7fc fe3e 	bl	80049a0 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d901      	bls.n	8007d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e03b      	b.n	8007dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d36:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <HAL_RCC_ClockConfig+0x260>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d1ed      	bne.n	8007d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	4917      	ldr	r1, [pc, #92]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	490f      	ldr	r1, [pc, #60]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d82:	f000 f825 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 8007d86:	4602      	mov	r2, r0
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <HAL_RCC_ClockConfig+0x264>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	091b      	lsrs	r3, r3, #4
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	490c      	ldr	r1, [pc, #48]	; (8007dc4 <HAL_RCC_ClockConfig+0x26c>)
 8007d94:	5ccb      	ldrb	r3, [r1, r3]
 8007d96:	f003 031f 	and.w	r3, r3, #31
 8007d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9e:	4a0a      	ldr	r2, [pc, #40]	; (8007dc8 <HAL_RCC_ClockConfig+0x270>)
 8007da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007da2:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <HAL_RCC_ClockConfig+0x274>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fc fdae 	bl	8004908 <HAL_InitTick>
 8007dac:	4603      	mov	r3, r0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	40022000 	.word	0x40022000
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	04c4b400 	.word	0x04c4b400
 8007dc4:	0800ed84 	.word	0x0800ed84
 8007dc8:	20000058 	.word	0x20000058
 8007dcc:	2000005c 	.word	0x2000005c

08007dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007dd6:	4b2c      	ldr	r3, [pc, #176]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d102      	bne.n	8007de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007de2:	4b2a      	ldr	r3, [pc, #168]	; (8007e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	e047      	b.n	8007e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007de8:	4b27      	ldr	r3, [pc, #156]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 030c 	and.w	r3, r3, #12
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d102      	bne.n	8007dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007df4:	4b26      	ldr	r3, [pc, #152]	; (8007e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	e03e      	b.n	8007e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007dfa:	4b23      	ldr	r3, [pc, #140]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 030c 	and.w	r3, r3, #12
 8007e02:	2b0c      	cmp	r3, #12
 8007e04:	d136      	bne.n	8007e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007e06:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007e10:	4b1d      	ldr	r3, [pc, #116]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	091b      	lsrs	r3, r3, #4
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d10c      	bne.n	8007e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e24:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2c:	4a16      	ldr	r2, [pc, #88]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e2e:	68d2      	ldr	r2, [r2, #12]
 8007e30:	0a12      	lsrs	r2, r2, #8
 8007e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
 8007e3a:	617b      	str	r3, [r7, #20]
      break;
 8007e3c:	e00c      	b.n	8007e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007e3e:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e46:	4a10      	ldr	r2, [pc, #64]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e48:	68d2      	ldr	r2, [r2, #12]
 8007e4a:	0a12      	lsrs	r2, r2, #8
 8007e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e50:	fb02 f303 	mul.w	r3, r2, r3
 8007e54:	617b      	str	r3, [r7, #20]
      break;
 8007e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	0e5b      	lsrs	r3, r3, #25
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	3301      	adds	r3, #1
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	e001      	b.n	8007e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e78:	693b      	ldr	r3, [r7, #16]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	00f42400 	.word	0x00f42400
 8007e90:	007a1200 	.word	0x007a1200

08007e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000058 	.word	0x20000058

08007eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007eb0:	f7ff fff0 	bl	8007e94 <HAL_RCC_GetHCLKFreq>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	4904      	ldr	r1, [pc, #16]	; (8007ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ec2:	5ccb      	ldrb	r3, [r1, r3]
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	0800ed94 	.word	0x0800ed94

08007ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007edc:	f7ff ffda 	bl	8007e94 <HAL_RCC_GetHCLKFreq>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	0adb      	lsrs	r3, r3, #11
 8007ee8:	f003 0307 	and.w	r3, r3, #7
 8007eec:	4904      	ldr	r1, [pc, #16]	; (8007f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eee:	5ccb      	ldrb	r3, [r1, r3]
 8007ef0:	f003 031f 	and.w	r3, r3, #31
 8007ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40021000 	.word	0x40021000
 8007f00:	0800ed94 	.word	0x0800ed94

08007f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f0a:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f14:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d10c      	bne.n	8007f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f28:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f30:	4a14      	ldr	r2, [pc, #80]	; (8007f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f32:	68d2      	ldr	r2, [r2, #12]
 8007f34:	0a12      	lsrs	r2, r2, #8
 8007f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	617b      	str	r3, [r7, #20]
    break;
 8007f40:	e00c      	b.n	8007f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f42:	4a12      	ldr	r2, [pc, #72]	; (8007f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4a:	4a0e      	ldr	r2, [pc, #56]	; (8007f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f4c:	68d2      	ldr	r2, [r2, #12]
 8007f4e:	0a12      	lsrs	r2, r2, #8
 8007f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f54:	fb02 f303 	mul.w	r3, r2, r3
 8007f58:	617b      	str	r3, [r7, #20]
    break;
 8007f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	0e5b      	lsrs	r3, r3, #25
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	3301      	adds	r3, #1
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f76:	687b      	ldr	r3, [r7, #4]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	40021000 	.word	0x40021000
 8007f88:	007a1200 	.word	0x007a1200
 8007f8c:	00f42400 	.word	0x00f42400

08007f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f98:	2300      	movs	r3, #0
 8007f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8098 	beq.w	80080de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fb2:	4b43      	ldr	r3, [pc, #268]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10d      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fbe:	4b40      	ldr	r3, [pc, #256]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	4a3f      	ldr	r2, [pc, #252]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007fca:	4b3d      	ldr	r3, [pc, #244]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	60bb      	str	r3, [r7, #8]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fda:	4b3a      	ldr	r3, [pc, #232]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a39      	ldr	r2, [pc, #228]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fe6:	f7fc fcdb 	bl	80049a0 <HAL_GetTick>
 8007fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fec:	e009      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fee:	f7fc fcd7 	bl	80049a0 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d902      	bls.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8008000:	e005      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008002:	4b30      	ldr	r3, [pc, #192]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ef      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800800e:	7cfb      	ldrb	r3, [r7, #19]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d159      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008014:	4b2a      	ldr	r3, [pc, #168]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800801a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01e      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	429a      	cmp	r2, r3
 800802e:	d019      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008030:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800803a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800803c:	4b20      	ldr	r3, [pc, #128]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008042:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800804c:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800804e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008052:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800805c:	4a18      	ldr	r2, [pc, #96]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d016      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fc fc97 	bl	80049a0 <HAL_GetTick>
 8008072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008074:	e00b      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008076:	f7fc fc93 	bl	80049a0 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	f241 3288 	movw	r2, #5000	; 0x1388
 8008084:	4293      	cmp	r3, r2
 8008086:	d902      	bls.n	800808e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	74fb      	strb	r3, [r7, #19]
            break;
 800808c:	e006      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0ec      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800809c:	7cfb      	ldrb	r3, [r7, #19]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	4903      	ldr	r1, [pc, #12]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80080b8:	e008      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ba:	7cfb      	ldrb	r3, [r7, #19]
 80080bc:	74bb      	strb	r3, [r7, #18]
 80080be:	e005      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80080c0:	40021000 	.word	0x40021000
 80080c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c8:	7cfb      	ldrb	r3, [r7, #19]
 80080ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080cc:	7c7b      	ldrb	r3, [r7, #17]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d105      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080d2:	4ba6      	ldr	r3, [pc, #664]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d6:	4aa5      	ldr	r2, [pc, #660]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ea:	4ba0      	ldr	r3, [pc, #640]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f0:	f023 0203 	bic.w	r2, r3, #3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	499c      	ldr	r1, [pc, #624]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800810c:	4b97      	ldr	r3, [pc, #604]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800810e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008112:	f023 020c 	bic.w	r2, r3, #12
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	4994      	ldr	r1, [pc, #592]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800812e:	4b8f      	ldr	r3, [pc, #572]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	498b      	ldr	r1, [pc, #556]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008150:	4b86      	ldr	r3, [pc, #536]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	4983      	ldr	r1, [pc, #524]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008160:	4313      	orrs	r3, r2
 8008162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008172:	4b7e      	ldr	r3, [pc, #504]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008178:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	497a      	ldr	r1, [pc, #488]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008194:	4b75      	ldr	r3, [pc, #468]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	4972      	ldr	r1, [pc, #456]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081b6:	4b6d      	ldr	r3, [pc, #436]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	4969      	ldr	r1, [pc, #420]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081d8:	4b64      	ldr	r3, [pc, #400]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	4961      	ldr	r1, [pc, #388]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081fa:	4b5c      	ldr	r3, [pc, #368]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80081fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	4958      	ldr	r1, [pc, #352]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800820a:	4313      	orrs	r3, r2
 800820c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008218:	2b00      	cmp	r3, #0
 800821a:	d015      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800821c:	4b53      	ldr	r3, [pc, #332]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	4950      	ldr	r1, [pc, #320]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800822c:	4313      	orrs	r3, r2
 800822e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800823a:	d105      	bne.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800823c:	4b4b      	ldr	r3, [pc, #300]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	4a4a      	ldr	r2, [pc, #296]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008250:	2b00      	cmp	r3, #0
 8008252:	d015      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008254:	4b45      	ldr	r3, [pc, #276]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4942      	ldr	r1, [pc, #264]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008264:	4313      	orrs	r3, r2
 8008266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008272:	d105      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008274:	4b3d      	ldr	r3, [pc, #244]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	4a3c      	ldr	r2, [pc, #240]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800827a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800827e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d015      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800828c:	4b37      	ldr	r3, [pc, #220]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800828e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	4934      	ldr	r1, [pc, #208]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800829c:	4313      	orrs	r3, r2
 800829e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082aa:	d105      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082ac:	4b2f      	ldr	r3, [pc, #188]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	4a2e      	ldr	r2, [pc, #184]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d015      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082c4:	4b29      	ldr	r3, [pc, #164]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d2:	4926      	ldr	r1, [pc, #152]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082e2:	d105      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082e4:	4b21      	ldr	r3, [pc, #132]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4a20      	ldr	r2, [pc, #128]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d015      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082fc:	4b1b      	ldr	r3, [pc, #108]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	4918      	ldr	r1, [pc, #96]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800831a:	d105      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800831c:	4b13      	ldr	r3, [pc, #76]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	4a12      	ldr	r2, [pc, #72]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d015      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800833a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	490a      	ldr	r1, [pc, #40]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008344:	4313      	orrs	r3, r2
 8008346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008352:	d105      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4a04      	ldr	r2, [pc, #16]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800835a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800835e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008360:	7cbb      	ldrb	r3, [r7, #18]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40021000 	.word	0x40021000

08008370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e049      	b.n	8008416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fc f86e 	bl	8004478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f000 faa4 	bl	80088fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e049      	b.n	80084c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f841 	bl	80084cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3304      	adds	r3, #4
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f000 fa4d 	bl	80088fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e0ff      	b.n	80086fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b14      	cmp	r3, #20
 800850a:	f200 80f0 	bhi.w	80086ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008569 	.word	0x08008569
 8008518:	080086ef 	.word	0x080086ef
 800851c:	080086ef 	.word	0x080086ef
 8008520:	080086ef 	.word	0x080086ef
 8008524:	080085a9 	.word	0x080085a9
 8008528:	080086ef 	.word	0x080086ef
 800852c:	080086ef 	.word	0x080086ef
 8008530:	080086ef 	.word	0x080086ef
 8008534:	080085eb 	.word	0x080085eb
 8008538:	080086ef 	.word	0x080086ef
 800853c:	080086ef 	.word	0x080086ef
 8008540:	080086ef 	.word	0x080086ef
 8008544:	0800862b 	.word	0x0800862b
 8008548:	080086ef 	.word	0x080086ef
 800854c:	080086ef 	.word	0x080086ef
 8008550:	080086ef 	.word	0x080086ef
 8008554:	0800866d 	.word	0x0800866d
 8008558:	080086ef 	.word	0x080086ef
 800855c:	080086ef 	.word	0x080086ef
 8008560:	080086ef 	.word	0x080086ef
 8008564:	080086ad 	.word	0x080086ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fa54 	bl	8008a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0208 	orr.w	r2, r2, #8
 8008582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0204 	bic.w	r2, r2, #4
 8008592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6999      	ldr	r1, [r3, #24]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	619a      	str	r2, [r3, #24]
      break;
 80085a6:	e0a5      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fac4 	bl	8008b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6999      	ldr	r1, [r3, #24]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	021a      	lsls	r2, r3, #8
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	619a      	str	r2, [r3, #24]
      break;
 80085e8:	e084      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fb2d 	bl	8008c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69da      	ldr	r2, [r3, #28]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 0208 	orr.w	r2, r2, #8
 8008604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0204 	bic.w	r2, r2, #4
 8008614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69d9      	ldr	r1, [r3, #28]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	61da      	str	r2, [r3, #28]
      break;
 8008628:	e064      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fb95 	bl	8008d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69da      	ldr	r2, [r3, #28]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69d9      	ldr	r1, [r3, #28]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	021a      	lsls	r2, r3, #8
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	61da      	str	r2, [r3, #28]
      break;
 800866a:	e043      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fbfe 	bl	8008e74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0208 	orr.w	r2, r2, #8
 8008686:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0204 	bic.w	r2, r2, #4
 8008696:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086aa:	e023      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fc42 	bl	8008f3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086d6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	021a      	lsls	r2, r3, #8
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086ec:	e002      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
      break;
 80086f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop

08008708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_TIM_ConfigClockSource+0x1c>
 8008720:	2302      	movs	r3, #2
 8008722:	e0de      	b.n	80088e2 <HAL_TIM_ConfigClockSource+0x1da>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800874e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a63      	ldr	r2, [pc, #396]	; (80088ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	f000 80a9 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008764:	4a61      	ldr	r2, [pc, #388]	; (80088ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	f200 80ae 	bhi.w	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800876c:	4a60      	ldr	r2, [pc, #384]	; (80088f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	f000 80a1 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008774:	4a5e      	ldr	r2, [pc, #376]	; (80088f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f200 80a6 	bhi.w	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800877c:	4a5d      	ldr	r2, [pc, #372]	; (80088f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f000 8099 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008784:	4a5b      	ldr	r2, [pc, #364]	; (80088f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008786:	4293      	cmp	r3, r2
 8008788:	f200 809e 	bhi.w	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800878c:	4a5a      	ldr	r2, [pc, #360]	; (80088f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	f000 8091 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008794:	4a58      	ldr	r2, [pc, #352]	; (80088f8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f200 8096 	bhi.w	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800879c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087a0:	f000 8089 	beq.w	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087a8:	f200 808e 	bhi.w	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b0:	d03e      	beq.n	8008830 <HAL_TIM_ConfigClockSource+0x128>
 80087b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b6:	f200 8087 	bhi.w	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087be:	f000 8086 	beq.w	80088ce <HAL_TIM_ConfigClockSource+0x1c6>
 80087c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c6:	d87f      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087c8:	2b70      	cmp	r3, #112	; 0x70
 80087ca:	d01a      	beq.n	8008802 <HAL_TIM_ConfigClockSource+0xfa>
 80087cc:	2b70      	cmp	r3, #112	; 0x70
 80087ce:	d87b      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087d0:	2b60      	cmp	r3, #96	; 0x60
 80087d2:	d050      	beq.n	8008876 <HAL_TIM_ConfigClockSource+0x16e>
 80087d4:	2b60      	cmp	r3, #96	; 0x60
 80087d6:	d877      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087d8:	2b50      	cmp	r3, #80	; 0x50
 80087da:	d03c      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x14e>
 80087dc:	2b50      	cmp	r3, #80	; 0x50
 80087de:	d873      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e0:	2b40      	cmp	r3, #64	; 0x40
 80087e2:	d058      	beq.n	8008896 <HAL_TIM_ConfigClockSource+0x18e>
 80087e4:	2b40      	cmp	r3, #64	; 0x40
 80087e6:	d86f      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e8:	2b30      	cmp	r3, #48	; 0x30
 80087ea:	d064      	beq.n	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087ec:	2b30      	cmp	r3, #48	; 0x30
 80087ee:	d86b      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	d060      	beq.n	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d867      	bhi.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d05c      	beq.n	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 80087fc:	2b10      	cmp	r3, #16
 80087fe:	d05a      	beq.n	80088b6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008800:	e062      	b.n	80088c8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6899      	ldr	r1, [r3, #8]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f000 fc75 	bl	8009100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	609a      	str	r2, [r3, #8]
      break;
 800882e:	e04f      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	6899      	ldr	r1, [r3, #8]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f000 fc5e 	bl	8009100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689a      	ldr	r2, [r3, #8]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008852:	609a      	str	r2, [r3, #8]
      break;
 8008854:	e03c      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	6859      	ldr	r1, [r3, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	461a      	mov	r2, r3
 8008864:	f000 fbd0 	bl	8009008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2150      	movs	r1, #80	; 0x50
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fc29 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 8008874:	e02c      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	6859      	ldr	r1, [r3, #4]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	461a      	mov	r2, r3
 8008884:	f000 fbef 	bl	8009066 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2160      	movs	r1, #96	; 0x60
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fc19 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 8008894:	e01c      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	6859      	ldr	r1, [r3, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f000 fbb0 	bl	8009008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2140      	movs	r1, #64	; 0x40
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fc09 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 80088b4:	e00c      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f000 fc00 	bl	80090c6 <TIM_ITRx_SetConfig>
      break;
 80088c6:	e003      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
      break;
 80088cc:	e000      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80088ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	00100070 	.word	0x00100070
 80088f0:	00100040 	.word	0x00100040
 80088f4:	00100030 	.word	0x00100030
 80088f8:	00100020 	.word	0x00100020

080088fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a3c      	ldr	r2, [pc, #240]	; (8008a00 <TIM_Base_SetConfig+0x104>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00f      	beq.n	8008934 <TIM_Base_SetConfig+0x38>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891a:	d00b      	beq.n	8008934 <TIM_Base_SetConfig+0x38>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a39      	ldr	r2, [pc, #228]	; (8008a04 <TIM_Base_SetConfig+0x108>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d007      	beq.n	8008934 <TIM_Base_SetConfig+0x38>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a38      	ldr	r2, [pc, #224]	; (8008a08 <TIM_Base_SetConfig+0x10c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_Base_SetConfig+0x38>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a37      	ldr	r2, [pc, #220]	; (8008a0c <TIM_Base_SetConfig+0x110>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d108      	bne.n	8008946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2d      	ldr	r2, [pc, #180]	; (8008a00 <TIM_Base_SetConfig+0x104>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d01b      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d017      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2a      	ldr	r2, [pc, #168]	; (8008a04 <TIM_Base_SetConfig+0x108>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d013      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a29      	ldr	r2, [pc, #164]	; (8008a08 <TIM_Base_SetConfig+0x10c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00f      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a28      	ldr	r2, [pc, #160]	; (8008a0c <TIM_Base_SetConfig+0x110>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00b      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <TIM_Base_SetConfig+0x114>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d007      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <TIM_Base_SetConfig+0x118>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d003      	beq.n	8008986 <TIM_Base_SetConfig+0x8a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <TIM_Base_SetConfig+0x11c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d108      	bne.n	8008998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800898c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a10      	ldr	r2, [pc, #64]	; (8008a00 <TIM_Base_SetConfig+0x104>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d00f      	beq.n	80089e4 <TIM_Base_SetConfig+0xe8>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <TIM_Base_SetConfig+0x110>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d00b      	beq.n	80089e4 <TIM_Base_SetConfig+0xe8>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a10      	ldr	r2, [pc, #64]	; (8008a10 <TIM_Base_SetConfig+0x114>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d007      	beq.n	80089e4 <TIM_Base_SetConfig+0xe8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a0f      	ldr	r2, [pc, #60]	; (8008a14 <TIM_Base_SetConfig+0x118>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d003      	beq.n	80089e4 <TIM_Base_SetConfig+0xe8>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a0e      	ldr	r2, [pc, #56]	; (8008a18 <TIM_Base_SetConfig+0x11c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d103      	bne.n	80089ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	615a      	str	r2, [r3, #20]
}
 80089f2:	bf00      	nop
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40012c00 	.word	0x40012c00
 8008a04:	40000400 	.word	0x40000400
 8008a08:	40000800 	.word	0x40000800
 8008a0c:	40013400 	.word	0x40013400
 8008a10:	40014000 	.word	0x40014000
 8008a14:	40014400 	.word	0x40014400
 8008a18:	40014800 	.word	0x40014800

08008a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f023 0201 	bic.w	r2, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f023 0302 	bic.w	r3, r3, #2
 8008a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a2c      	ldr	r2, [pc, #176]	; (8008b28 <TIM_OC1_SetConfig+0x10c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00f      	beq.n	8008a9c <TIM_OC1_SetConfig+0x80>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a2b      	ldr	r2, [pc, #172]	; (8008b2c <TIM_OC1_SetConfig+0x110>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00b      	beq.n	8008a9c <TIM_OC1_SetConfig+0x80>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a2a      	ldr	r2, [pc, #168]	; (8008b30 <TIM_OC1_SetConfig+0x114>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d007      	beq.n	8008a9c <TIM_OC1_SetConfig+0x80>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a29      	ldr	r2, [pc, #164]	; (8008b34 <TIM_OC1_SetConfig+0x118>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_OC1_SetConfig+0x80>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a28      	ldr	r2, [pc, #160]	; (8008b38 <TIM_OC1_SetConfig+0x11c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10c      	bne.n	8008ab6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f023 0308 	bic.w	r3, r3, #8
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f023 0304 	bic.w	r3, r3, #4
 8008ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1b      	ldr	r2, [pc, #108]	; (8008b28 <TIM_OC1_SetConfig+0x10c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00f      	beq.n	8008ade <TIM_OC1_SetConfig+0xc2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <TIM_OC1_SetConfig+0x110>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00b      	beq.n	8008ade <TIM_OC1_SetConfig+0xc2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a19      	ldr	r2, [pc, #100]	; (8008b30 <TIM_OC1_SetConfig+0x114>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d007      	beq.n	8008ade <TIM_OC1_SetConfig+0xc2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a18      	ldr	r2, [pc, #96]	; (8008b34 <TIM_OC1_SetConfig+0x118>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d003      	beq.n	8008ade <TIM_OC1_SetConfig+0xc2>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a17      	ldr	r2, [pc, #92]	; (8008b38 <TIM_OC1_SetConfig+0x11c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d111      	bne.n	8008b02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	621a      	str	r2, [r3, #32]
}
 8008b1c:	bf00      	nop
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	40012c00 	.word	0x40012c00
 8008b2c:	40013400 	.word	0x40013400
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	40014800 	.word	0x40014800

08008b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	f023 0210 	bic.w	r2, r3, #16
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	021b      	lsls	r3, r3, #8
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f023 0320 	bic.w	r3, r3, #32
 8008b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a28      	ldr	r2, [pc, #160]	; (8008c3c <TIM_OC2_SetConfig+0x100>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_OC2_SetConfig+0x6c>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a27      	ldr	r2, [pc, #156]	; (8008c40 <TIM_OC2_SetConfig+0x104>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d10d      	bne.n	8008bc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a1d      	ldr	r2, [pc, #116]	; (8008c3c <TIM_OC2_SetConfig+0x100>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00f      	beq.n	8008bec <TIM_OC2_SetConfig+0xb0>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <TIM_OC2_SetConfig+0x104>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00b      	beq.n	8008bec <TIM_OC2_SetConfig+0xb0>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <TIM_OC2_SetConfig+0x108>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d007      	beq.n	8008bec <TIM_OC2_SetConfig+0xb0>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a1a      	ldr	r2, [pc, #104]	; (8008c48 <TIM_OC2_SetConfig+0x10c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <TIM_OC2_SetConfig+0xb0>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <TIM_OC2_SetConfig+0x110>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d113      	bne.n	8008c14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	621a      	str	r2, [r3, #32]
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800

08008c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a27      	ldr	r2, [pc, #156]	; (8008d4c <TIM_OC3_SetConfig+0xfc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d003      	beq.n	8008cba <TIM_OC3_SetConfig+0x6a>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <TIM_OC3_SetConfig+0x100>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d10d      	bne.n	8008cd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	021b      	lsls	r3, r3, #8
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <TIM_OC3_SetConfig+0xfc>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00f      	beq.n	8008cfe <TIM_OC3_SetConfig+0xae>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <TIM_OC3_SetConfig+0x100>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00b      	beq.n	8008cfe <TIM_OC3_SetConfig+0xae>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <TIM_OC3_SetConfig+0x104>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d007      	beq.n	8008cfe <TIM_OC3_SetConfig+0xae>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a19      	ldr	r2, [pc, #100]	; (8008d58 <TIM_OC3_SetConfig+0x108>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d003      	beq.n	8008cfe <TIM_OC3_SetConfig+0xae>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a18      	ldr	r2, [pc, #96]	; (8008d5c <TIM_OC3_SetConfig+0x10c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d113      	bne.n	8008d26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	621a      	str	r2, [r3, #32]
}
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40012c00 	.word	0x40012c00
 8008d50:	40013400 	.word	0x40013400
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40014400 	.word	0x40014400
 8008d5c:	40014800 	.word	0x40014800

08008d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	031b      	lsls	r3, r3, #12
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a28      	ldr	r2, [pc, #160]	; (8008e60 <TIM_OC4_SetConfig+0x100>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d003      	beq.n	8008dcc <TIM_OC4_SetConfig+0x6c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a27      	ldr	r2, [pc, #156]	; (8008e64 <TIM_OC4_SetConfig+0x104>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d10d      	bne.n	8008de8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	031b      	lsls	r3, r3, #12
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008de6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a1d      	ldr	r2, [pc, #116]	; (8008e60 <TIM_OC4_SetConfig+0x100>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00f      	beq.n	8008e10 <TIM_OC4_SetConfig+0xb0>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a1c      	ldr	r2, [pc, #112]	; (8008e64 <TIM_OC4_SetConfig+0x104>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <TIM_OC4_SetConfig+0xb0>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <TIM_OC4_SetConfig+0x108>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <TIM_OC4_SetConfig+0xb0>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a1a      	ldr	r2, [pc, #104]	; (8008e6c <TIM_OC4_SetConfig+0x10c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <TIM_OC4_SetConfig+0xb0>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <TIM_OC4_SetConfig+0x110>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d113      	bne.n	8008e38 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	019b      	lsls	r3, r3, #6
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	019b      	lsls	r3, r3, #6
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40012c00 	.word	0x40012c00
 8008e64:	40013400 	.word	0x40013400
 8008e68:	40014000 	.word	0x40014000
 8008e6c:	40014400 	.word	0x40014400
 8008e70:	40014800 	.word	0x40014800

08008e74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008eb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	041b      	lsls	r3, r3, #16
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <TIM_OC5_SetConfig+0xb4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00f      	beq.n	8008eee <TIM_OC5_SetConfig+0x7a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a16      	ldr	r2, [pc, #88]	; (8008f2c <TIM_OC5_SetConfig+0xb8>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00b      	beq.n	8008eee <TIM_OC5_SetConfig+0x7a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <TIM_OC5_SetConfig+0xbc>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d007      	beq.n	8008eee <TIM_OC5_SetConfig+0x7a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a14      	ldr	r2, [pc, #80]	; (8008f34 <TIM_OC5_SetConfig+0xc0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d003      	beq.n	8008eee <TIM_OC5_SetConfig+0x7a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a13      	ldr	r2, [pc, #76]	; (8008f38 <TIM_OC5_SetConfig+0xc4>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d109      	bne.n	8008f02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	021b      	lsls	r3, r3, #8
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	621a      	str	r2, [r3, #32]
}
 8008f1c:	bf00      	nop
 8008f1e:	371c      	adds	r7, #28
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	40012c00 	.word	0x40012c00
 8008f2c:	40013400 	.word	0x40013400
 8008f30:	40014000 	.word	0x40014000
 8008f34:	40014400 	.word	0x40014400
 8008f38:	40014800 	.word	0x40014800

08008f3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	051b      	lsls	r3, r3, #20
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a18      	ldr	r2, [pc, #96]	; (8008ff4 <TIM_OC6_SetConfig+0xb8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00f      	beq.n	8008fb8 <TIM_OC6_SetConfig+0x7c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <TIM_OC6_SetConfig+0xbc>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00b      	beq.n	8008fb8 <TIM_OC6_SetConfig+0x7c>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a16      	ldr	r2, [pc, #88]	; (8008ffc <TIM_OC6_SetConfig+0xc0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <TIM_OC6_SetConfig+0x7c>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a15      	ldr	r2, [pc, #84]	; (8009000 <TIM_OC6_SetConfig+0xc4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_OC6_SetConfig+0x7c>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a14      	ldr	r2, [pc, #80]	; (8009004 <TIM_OC6_SetConfig+0xc8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d109      	bne.n	8008fcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	029b      	lsls	r3, r3, #10
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	621a      	str	r2, [r3, #32]
}
 8008fe6:	bf00      	nop
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40012c00 	.word	0x40012c00
 8008ff8:	40013400 	.word	0x40013400
 8008ffc:	40014000 	.word	0x40014000
 8009000:	40014400 	.word	0x40014400
 8009004:	40014800 	.word	0x40014800

08009008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f023 0201 	bic.w	r2, r3, #1
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	011b      	lsls	r3, r3, #4
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	4313      	orrs	r3, r2
 800903c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f023 030a 	bic.w	r3, r3, #10
 8009044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	4313      	orrs	r3, r2
 800904c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	621a      	str	r2, [r3, #32]
}
 800905a:	bf00      	nop
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009066:	b480      	push	{r7}
 8009068:	b087      	sub	sp, #28
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	f023 0210 	bic.w	r2, r3, #16
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	031b      	lsls	r3, r3, #12
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80090dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	f043 0307 	orr.w	r3, r3, #7
 80090ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	609a      	str	r2, [r3, #8]
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800911a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	021a      	lsls	r2, r3, #8
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	431a      	orrs	r2, r3
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	4313      	orrs	r3, r2
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	609a      	str	r2, [r3, #8]
}
 8009134:	bf00      	nop
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <HAL_TIMEx_PWMN_Start+0x24>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b01      	cmp	r3, #1
 800915a:	bf14      	ite	ne
 800915c:	2301      	movne	r3, #1
 800915e:	2300      	moveq	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	e022      	b.n	80091aa <HAL_TIMEx_PWMN_Start+0x6a>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b04      	cmp	r3, #4
 8009168:	d109      	bne.n	800917e <HAL_TIMEx_PWMN_Start+0x3e>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b01      	cmp	r3, #1
 8009174:	bf14      	ite	ne
 8009176:	2301      	movne	r3, #1
 8009178:	2300      	moveq	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	e015      	b.n	80091aa <HAL_TIMEx_PWMN_Start+0x6a>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b08      	cmp	r3, #8
 8009182:	d109      	bne.n	8009198 <HAL_TIMEx_PWMN_Start+0x58>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b01      	cmp	r3, #1
 800918e:	bf14      	ite	ne
 8009190:	2301      	movne	r3, #1
 8009192:	2300      	moveq	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	e008      	b.n	80091aa <HAL_TIMEx_PWMN_Start+0x6a>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	bf14      	ite	ne
 80091a4:	2301      	movne	r3, #1
 80091a6:	2300      	moveq	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e069      	b.n	8009286 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <HAL_TIMEx_PWMN_Start+0x82>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091c0:	e013      	b.n	80091ea <HAL_TIMEx_PWMN_Start+0xaa>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d104      	bne.n	80091d2 <HAL_TIMEx_PWMN_Start+0x92>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d0:	e00b      	b.n	80091ea <HAL_TIMEx_PWMN_Start+0xaa>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d104      	bne.n	80091e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091e0:	e003      	b.n	80091ea <HAL_TIMEx_PWMN_Start+0xaa>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2202      	movs	r2, #2
 80091e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2204      	movs	r2, #4
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f8da 	bl	80093ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009206:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a20      	ldr	r2, [pc, #128]	; (8009290 <HAL_TIMEx_PWMN_Start+0x150>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d018      	beq.n	8009244 <HAL_TIMEx_PWMN_Start+0x104>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921a:	d013      	beq.n	8009244 <HAL_TIMEx_PWMN_Start+0x104>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a1c      	ldr	r2, [pc, #112]	; (8009294 <HAL_TIMEx_PWMN_Start+0x154>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00e      	beq.n	8009244 <HAL_TIMEx_PWMN_Start+0x104>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1b      	ldr	r2, [pc, #108]	; (8009298 <HAL_TIMEx_PWMN_Start+0x158>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d009      	beq.n	8009244 <HAL_TIMEx_PWMN_Start+0x104>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a19      	ldr	r2, [pc, #100]	; (800929c <HAL_TIMEx_PWMN_Start+0x15c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <HAL_TIMEx_PWMN_Start+0x104>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a18      	ldr	r2, [pc, #96]	; (80092a0 <HAL_TIMEx_PWMN_Start+0x160>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d115      	bne.n	8009270 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <HAL_TIMEx_PWMN_Start+0x164>)
 800924c:	4013      	ands	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b06      	cmp	r3, #6
 8009254:	d015      	beq.n	8009282 <HAL_TIMEx_PWMN_Start+0x142>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800925c:	d011      	beq.n	8009282 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0201 	orr.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926e:	e008      	b.n	8009282 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e000      	b.n	8009284 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40012c00 	.word	0x40012c00
 8009294:	40000400 	.word	0x40000400
 8009298:	40000800 	.word	0x40000800
 800929c:	40013400 	.word	0x40013400
 80092a0:	40014000 	.word	0x40014000
 80092a4:	00010007 	.word	0x00010007

080092a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092bc:	2302      	movs	r3, #2
 80092be:	e065      	b.n	800938c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a2c      	ldr	r2, [pc, #176]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d004      	beq.n	80092f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a2b      	ldr	r2, [pc, #172]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d108      	bne.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800930c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1b      	ldr	r2, [pc, #108]	; (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d018      	beq.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009336:	d013      	beq.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a18      	ldr	r2, [pc, #96]	; (80093a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d00e      	beq.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a17      	ldr	r2, [pc, #92]	; (80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d009      	beq.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a12      	ldr	r2, [pc, #72]	; (800939c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d004      	beq.n	8009360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a13      	ldr	r2, [pc, #76]	; (80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d10c      	bne.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	4313      	orrs	r3, r2
 8009370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr
 8009398:	40012c00 	.word	0x40012c00
 800939c:	40013400 	.word	0x40013400
 80093a0:	40000400 	.word	0x40000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	40014000 	.word	0x40014000

080093ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	2204      	movs	r2, #4
 80093c0:	fa02 f303 	lsl.w	r3, r2, r3
 80093c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a1a      	ldr	r2, [r3, #32]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	43db      	mvns	r3, r3
 80093ce:	401a      	ands	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a1a      	ldr	r2, [r3, #32]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 031f 	and.w	r3, r3, #31
 80093de:	6879      	ldr	r1, [r7, #4]
 80093e0:	fa01 f303 	lsl.w	r3, r1, r3
 80093e4:	431a      	orrs	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	621a      	str	r2, [r3, #32]
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e042      	b.n	800948e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800940e:	2b00      	cmp	r3, #0
 8009410:	d106      	bne.n	8009420 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7fb f87e 	bl	800451c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2224      	movs	r2, #36	; 0x24
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0201 	bic.w	r2, r2, #1
 8009436:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fccd 	bl	8009dd8 <UART_SetConfig>
 800943e:	4603      	mov	r3, r0
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e022      	b.n	800948e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 ff8d 	bl	800a370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009464:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009474:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0201 	orr.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f814 	bl	800a4b4 <UART_CheckIdleState>
 800948c:	4603      	mov	r3, r0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b08a      	sub	sp, #40	; 0x28
 800949a:	af02      	add	r7, sp, #8
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	603b      	str	r3, [r7, #0]
 80094a2:	4613      	mov	r3, r2
 80094a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	f040 8083 	bne.w	80095b8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <HAL_UART_Transmit+0x28>
 80094b8:	88fb      	ldrh	r3, [r7, #6]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e07b      	b.n	80095ba <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_UART_Transmit+0x3a>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e074      	b.n	80095ba <HAL_UART_Transmit+0x124>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2221      	movs	r2, #33	; 0x21
 80094e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094e8:	f7fb fa5a 	bl	80049a0 <HAL_GetTick>
 80094ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	88fa      	ldrh	r2, [r7, #6]
 80094f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009506:	d108      	bne.n	800951a <HAL_UART_Transmit+0x84>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	e003      	b.n	8009522 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800951e:	2300      	movs	r3, #0
 8009520:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800952a:	e02c      	b.n	8009586 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2200      	movs	r2, #0
 8009534:	2180      	movs	r1, #128	; 0x80
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f001 f807 	bl	800a54a <UART_WaitOnFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e039      	b.n	80095ba <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	461a      	mov	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800955a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	3302      	adds	r3, #2
 8009560:	61bb      	str	r3, [r7, #24]
 8009562:	e007      	b.n	8009574 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	781a      	ldrb	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	3301      	adds	r3, #1
 8009572:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800957a:	b29b      	uxth	r3, r3
 800957c:	3b01      	subs	r3, #1
 800957e:	b29a      	uxth	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1cc      	bne.n	800952c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2200      	movs	r2, #0
 800959a:	2140      	movs	r1, #64	; 0x40
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 ffd4 	bl	800a54a <UART_WaitOnFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e006      	b.n	80095ba <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	e000      	b.n	80095ba <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80095b8:	2302      	movs	r3, #2
  }
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3720      	adds	r7, #32
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b08a      	sub	sp, #40	; 0x28
 80095c6:	af02      	add	r7, sp, #8
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	603b      	str	r3, [r7, #0]
 80095ce:	4613      	mov	r3, r2
 80095d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095d8:	2b20      	cmp	r3, #32
 80095da:	f040 80c0 	bne.w	800975e <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <HAL_UART_Receive+0x28>
 80095e4:	88fb      	ldrh	r3, [r7, #6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e0b8      	b.n	8009760 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_UART_Receive+0x3a>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e0b1      	b.n	8009760 <HAL_UART_Receive+0x19e>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2222      	movs	r2, #34	; 0x22
 8009610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800961a:	f7fb f9c1 	bl	80049a0 <HAL_GetTick>
 800961e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	88fa      	ldrh	r2, [r7, #6]
 8009624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	88fa      	ldrh	r2, [r7, #6]
 800962c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009638:	d10e      	bne.n	8009658 <HAL_UART_Receive+0x96>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d105      	bne.n	800964e <HAL_UART_Receive+0x8c>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800964c:	e02d      	b.n	80096aa <HAL_UART_Receive+0xe8>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	22ff      	movs	r2, #255	; 0xff
 8009652:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009656:	e028      	b.n	80096aa <HAL_UART_Receive+0xe8>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10d      	bne.n	800967c <HAL_UART_Receive+0xba>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <HAL_UART_Receive+0xb0>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	22ff      	movs	r2, #255	; 0xff
 800966c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009670:	e01b      	b.n	80096aa <HAL_UART_Receive+0xe8>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	227f      	movs	r2, #127	; 0x7f
 8009676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800967a:	e016      	b.n	80096aa <HAL_UART_Receive+0xe8>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009684:	d10d      	bne.n	80096a2 <HAL_UART_Receive+0xe0>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d104      	bne.n	8009698 <HAL_UART_Receive+0xd6>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	227f      	movs	r2, #127	; 0x7f
 8009692:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009696:	e008      	b.n	80096aa <HAL_UART_Receive+0xe8>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	223f      	movs	r2, #63	; 0x3f
 800969c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096a0:	e003      	b.n	80096aa <HAL_UART_Receive+0xe8>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ba:	d108      	bne.n	80096ce <HAL_UART_Receive+0x10c>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	61bb      	str	r3, [r7, #24]
 80096cc:	e003      	b.n	80096d6 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80096de:	e032      	b.n	8009746 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2200      	movs	r2, #0
 80096e8:	2120      	movs	r1, #32
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 ff2d 	bl	800a54a <UART_WaitOnFlagUntilTimeout>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e032      	b.n	8009760 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10c      	bne.n	800971a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	b29a      	uxth	r2, r3
 8009708:	8a7b      	ldrh	r3, [r7, #18]
 800970a:	4013      	ands	r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	3302      	adds	r3, #2
 8009716:	61bb      	str	r3, [r7, #24]
 8009718:	e00c      	b.n	8009734 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	b2da      	uxtb	r2, r3
 8009722:	8a7b      	ldrh	r3, [r7, #18]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	4013      	ands	r3, r2
 8009728:	b2da      	uxtb	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	3301      	adds	r3, #1
 8009732:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1c6      	bne.n	80096e0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2220      	movs	r2, #32
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	e000      	b.n	8009760 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800975e:	2302      	movs	r3, #2
  }
}
 8009760:	4618      	mov	r0, r3
 8009762:	3720      	adds	r7, #32
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b0ba      	sub	sp, #232	; 0xe8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800978e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009792:	f640 030f 	movw	r3, #2063	; 0x80f
 8009796:	4013      	ands	r3, r2
 8009798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800979c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11b      	bne.n	80097dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a8:	f003 0320 	and.w	r3, r3, #32
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d015      	beq.n	80097dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d009      	beq.n	80097dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 82d6 	beq.w	8009d7e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
      }
      return;
 80097da:	e2d0      	b.n	8009d7e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 811f 	beq.w	8009a24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097ea:	4b8b      	ldr	r3, [pc, #556]	; (8009a18 <HAL_UART_IRQHandler+0x2b0>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80097f6:	4b89      	ldr	r3, [pc, #548]	; (8009a1c <HAL_UART_IRQHandler+0x2b4>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8112 	beq.w	8009a24 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d011      	beq.n	8009830 <HAL_UART_IRQHandler+0xc8>
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2201      	movs	r2, #1
 800981e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009826:	f043 0201 	orr.w	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d011      	beq.n	8009860 <HAL_UART_IRQHandler+0xf8>
 800983c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2202      	movs	r2, #2
 800984e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009856:	f043 0204 	orr.w	r2, r3, #4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	d011      	beq.n	8009890 <HAL_UART_IRQHandler+0x128>
 800986c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2204      	movs	r2, #4
 800987e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009886:	f043 0202 	orr.w	r2, r3, #2
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d017      	beq.n	80098cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800989c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098ac:	4b5a      	ldr	r3, [pc, #360]	; (8009a18 <HAL_UART_IRQHandler+0x2b0>)
 80098ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2208      	movs	r2, #8
 80098ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098c2:	f043 0208 	orr.w	r2, r3, #8
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d012      	beq.n	80098fe <HAL_UART_IRQHandler+0x196>
 80098d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00c      	beq.n	80098fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f4:	f043 0220 	orr.w	r2, r3, #32
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 823c 	beq.w	8009d82 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d013      	beq.n	800993e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d005      	beq.n	8009962 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800995a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800995e:	2b00      	cmp	r3, #0
 8009960:	d04f      	beq.n	8009a02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 feb9 	bl	800a6da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009972:	2b40      	cmp	r3, #64	; 0x40
 8009974:	d141      	bne.n	80099fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800998c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1d9      	bne.n	8009976 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d013      	beq.n	80099f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ce:	4a14      	ldr	r2, [pc, #80]	; (8009a20 <HAL_UART_IRQHandler+0x2b8>)
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fc fd04 	bl	80063e4 <HAL_DMA_Abort_IT>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d017      	beq.n	8009a12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f0:	e00f      	b.n	8009a12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f9da 	bl	8009dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f8:	e00b      	b.n	8009a12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f9d6 	bl	8009dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a00:	e007      	b.n	8009a12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f9d2 	bl	8009dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009a10:	e1b7      	b.n	8009d82 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a12:	bf00      	nop
    return;
 8009a14:	e1b5      	b.n	8009d82 <HAL_UART_IRQHandler+0x61a>
 8009a16:	bf00      	nop
 8009a18:	10000001 	.word	0x10000001
 8009a1c:	04000120 	.word	0x04000120
 8009a20:	0800a7a7 	.word	0x0800a7a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	f040 814a 	bne.w	8009cc2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 8143 	beq.w	8009cc2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 813c 	beq.w	8009cc2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2210      	movs	r2, #16
 8009a50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5c:	2b40      	cmp	r3, #64	; 0x40
 8009a5e:	f040 80b5 	bne.w	8009bcc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8187 	beq.w	8009d86 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a82:	429a      	cmp	r2, r3
 8009a84:	f080 817f 	bcs.w	8009d86 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0320 	and.w	r3, r3, #32
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f040 8086 	bne.w	8009bb0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ad2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1da      	bne.n	8009aa4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3308      	adds	r3, #8
 8009af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b00:	f023 0301 	bic.w	r3, r3, #1
 8009b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e1      	bne.n	8009aee <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3308      	adds	r3, #8
 8009b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b56:	e841 2300 	strex	r3, r2, [r1]
 8009b5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1e3      	bne.n	8009b2a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b78:	e853 3f00 	ldrex	r3, [r3]
 8009b7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b80:	f023 0310 	bic.w	r3, r3, #16
 8009b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b92:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b9a:	e841 2300 	strex	r3, r2, [r1]
 8009b9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e4      	bne.n	8009b70 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fc fbc1 	bl	8006332 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f8fb 	bl	8009dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bca:	e0dc      	b.n	8009d86 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 80ce 	beq.w	8009d8a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 80c9 	beq.w	8009d8a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e4      	bne.n	8009bf8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3308      	adds	r3, #8
 8009c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3308      	adds	r3, #8
 8009c52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c56:	633a      	str	r2, [r7, #48]	; 0x30
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5e:	e841 2300 	strex	r3, r2, [r1]
 8009c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e1      	bne.n	8009c2e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	e853 3f00 	ldrex	r3, [r3]
 8009c8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0310 	bic.w	r3, r3, #16
 8009c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ca0:	61fb      	str	r3, [r7, #28]
 8009ca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	69b9      	ldr	r1, [r7, #24]
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	617b      	str	r3, [r7, #20]
   return(result);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e4      	bne.n	8009c7e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f880 	bl	8009dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cc0:	e063      	b.n	8009d8a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00e      	beq.n	8009cec <HAL_UART_IRQHandler+0x584>
 8009cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ce2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fd9f 	bl	800a828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cea:	e051      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d014      	beq.n	8009d22 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d008      	beq.n	8009d22 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d03a      	beq.n	8009d8e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
    }
    return;
 8009d20:	e035      	b.n	8009d8e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <HAL_UART_IRQHandler+0x5da>
 8009d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fd49 	bl	800a7d2 <UART_EndTransmit_IT>
    return;
 8009d40:	e026      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d009      	beq.n	8009d62 <HAL_UART_IRQHandler+0x5fa>
 8009d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fd78 	bl	800a850 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d60:	e016      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d010      	beq.n	8009d90 <HAL_UART_IRQHandler+0x628>
 8009d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	da0c      	bge.n	8009d90 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fd60 	bl	800a83c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d7c:	e008      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
      return;
 8009d7e:	bf00      	nop
 8009d80:	e006      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
    return;
 8009d82:	bf00      	nop
 8009d84:	e004      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
      return;
 8009d86:	bf00      	nop
 8009d88:	e002      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
      return;
 8009d8a:	bf00      	nop
 8009d8c:	e000      	b.n	8009d90 <HAL_UART_IRQHandler+0x628>
    return;
 8009d8e:	bf00      	nop
  }
}
 8009d90:	37e8      	adds	r7, #232	; 0xe8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop

08009d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ddc:	b08c      	sub	sp, #48	; 0x30
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	689a      	ldr	r2, [r3, #8]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	431a      	orrs	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4bab      	ldr	r3, [pc, #684]	; (800a0b4 <UART_SetConfig+0x2dc>)
 8009e08:	4013      	ands	r3, r2
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e10:	430b      	orrs	r3, r1
 8009e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4aa0      	ldr	r2, [pc, #640]	; (800a0b8 <UART_SetConfig+0x2e0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d004      	beq.n	8009e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e40:	4313      	orrs	r3, r2
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009e4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	6812      	ldr	r2, [r2, #0]
 8009e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	f023 010f 	bic.w	r1, r3, #15
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a91      	ldr	r2, [pc, #580]	; (800a0bc <UART_SetConfig+0x2e4>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d125      	bne.n	8009ec8 <UART_SetConfig+0xf0>
 8009e7c:	4b90      	ldr	r3, [pc, #576]	; (800a0c0 <UART_SetConfig+0x2e8>)
 8009e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d81a      	bhi.n	8009ec0 <UART_SetConfig+0xe8>
 8009e8a:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <UART_SetConfig+0xb8>)
 8009e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009eb1 	.word	0x08009eb1
 8009e98:	08009ea9 	.word	0x08009ea9
 8009e9c:	08009eb9 	.word	0x08009eb9
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ea6:	e0d6      	b.n	800a056 <UART_SetConfig+0x27e>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eae:	e0d2      	b.n	800a056 <UART_SetConfig+0x27e>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb6:	e0ce      	b.n	800a056 <UART_SetConfig+0x27e>
 8009eb8:	2308      	movs	r3, #8
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ebe:	e0ca      	b.n	800a056 <UART_SetConfig+0x27e>
 8009ec0:	2310      	movs	r3, #16
 8009ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ec6:	e0c6      	b.n	800a056 <UART_SetConfig+0x27e>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a7d      	ldr	r2, [pc, #500]	; (800a0c4 <UART_SetConfig+0x2ec>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d138      	bne.n	8009f44 <UART_SetConfig+0x16c>
 8009ed2:	4b7b      	ldr	r3, [pc, #492]	; (800a0c0 <UART_SetConfig+0x2e8>)
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	f003 030c 	and.w	r3, r3, #12
 8009edc:	2b0c      	cmp	r3, #12
 8009ede:	d82d      	bhi.n	8009f3c <UART_SetConfig+0x164>
 8009ee0:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <UART_SetConfig+0x110>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f1d 	.word	0x08009f1d
 8009eec:	08009f3d 	.word	0x08009f3d
 8009ef0:	08009f3d 	.word	0x08009f3d
 8009ef4:	08009f3d 	.word	0x08009f3d
 8009ef8:	08009f2d 	.word	0x08009f2d
 8009efc:	08009f3d 	.word	0x08009f3d
 8009f00:	08009f3d 	.word	0x08009f3d
 8009f04:	08009f3d 	.word	0x08009f3d
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f3d 	.word	0x08009f3d
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f3d 	.word	0x08009f3d
 8009f18:	08009f35 	.word	0x08009f35
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f22:	e098      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f24:	2302      	movs	r3, #2
 8009f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f2a:	e094      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f2c:	2304      	movs	r3, #4
 8009f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f32:	e090      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f34:	2308      	movs	r3, #8
 8009f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f3a:	e08c      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f42:	e088      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a5f      	ldr	r2, [pc, #380]	; (800a0c8 <UART_SetConfig+0x2f0>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d125      	bne.n	8009f9a <UART_SetConfig+0x1c2>
 8009f4e:	4b5c      	ldr	r3, [pc, #368]	; (800a0c0 <UART_SetConfig+0x2e8>)
 8009f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f58:	2b30      	cmp	r3, #48	; 0x30
 8009f5a:	d016      	beq.n	8009f8a <UART_SetConfig+0x1b2>
 8009f5c:	2b30      	cmp	r3, #48	; 0x30
 8009f5e:	d818      	bhi.n	8009f92 <UART_SetConfig+0x1ba>
 8009f60:	2b20      	cmp	r3, #32
 8009f62:	d00a      	beq.n	8009f7a <UART_SetConfig+0x1a2>
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d814      	bhi.n	8009f92 <UART_SetConfig+0x1ba>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <UART_SetConfig+0x19a>
 8009f6c:	2b10      	cmp	r3, #16
 8009f6e:	d008      	beq.n	8009f82 <UART_SetConfig+0x1aa>
 8009f70:	e00f      	b.n	8009f92 <UART_SetConfig+0x1ba>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f78:	e06d      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f80:	e069      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f82:	2304      	movs	r3, #4
 8009f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f88:	e065      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f8a:	2308      	movs	r3, #8
 8009f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f90:	e061      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f92:	2310      	movs	r3, #16
 8009f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f98:	e05d      	b.n	800a056 <UART_SetConfig+0x27e>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a4b      	ldr	r2, [pc, #300]	; (800a0cc <UART_SetConfig+0x2f4>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d125      	bne.n	8009ff0 <UART_SetConfig+0x218>
 8009fa4:	4b46      	ldr	r3, [pc, #280]	; (800a0c0 <UART_SetConfig+0x2e8>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fae:	2bc0      	cmp	r3, #192	; 0xc0
 8009fb0:	d016      	beq.n	8009fe0 <UART_SetConfig+0x208>
 8009fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8009fb4:	d818      	bhi.n	8009fe8 <UART_SetConfig+0x210>
 8009fb6:	2b80      	cmp	r3, #128	; 0x80
 8009fb8:	d00a      	beq.n	8009fd0 <UART_SetConfig+0x1f8>
 8009fba:	2b80      	cmp	r3, #128	; 0x80
 8009fbc:	d814      	bhi.n	8009fe8 <UART_SetConfig+0x210>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <UART_SetConfig+0x1f0>
 8009fc2:	2b40      	cmp	r3, #64	; 0x40
 8009fc4:	d008      	beq.n	8009fd8 <UART_SetConfig+0x200>
 8009fc6:	e00f      	b.n	8009fe8 <UART_SetConfig+0x210>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fce:	e042      	b.n	800a056 <UART_SetConfig+0x27e>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fd6:	e03e      	b.n	800a056 <UART_SetConfig+0x27e>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fde:	e03a      	b.n	800a056 <UART_SetConfig+0x27e>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fe6:	e036      	b.n	800a056 <UART_SetConfig+0x27e>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009fee:	e032      	b.n	800a056 <UART_SetConfig+0x27e>
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a30      	ldr	r2, [pc, #192]	; (800a0b8 <UART_SetConfig+0x2e0>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d12a      	bne.n	800a050 <UART_SetConfig+0x278>
 8009ffa:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <UART_SetConfig+0x2e8>)
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a008:	d01a      	beq.n	800a040 <UART_SetConfig+0x268>
 800a00a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a00e:	d81b      	bhi.n	800a048 <UART_SetConfig+0x270>
 800a010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a014:	d00c      	beq.n	800a030 <UART_SetConfig+0x258>
 800a016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a01a:	d815      	bhi.n	800a048 <UART_SetConfig+0x270>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <UART_SetConfig+0x250>
 800a020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a024:	d008      	beq.n	800a038 <UART_SetConfig+0x260>
 800a026:	e00f      	b.n	800a048 <UART_SetConfig+0x270>
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a02e:	e012      	b.n	800a056 <UART_SetConfig+0x27e>
 800a030:	2302      	movs	r3, #2
 800a032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a036:	e00e      	b.n	800a056 <UART_SetConfig+0x27e>
 800a038:	2304      	movs	r3, #4
 800a03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a03e:	e00a      	b.n	800a056 <UART_SetConfig+0x27e>
 800a040:	2308      	movs	r3, #8
 800a042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a046:	e006      	b.n	800a056 <UART_SetConfig+0x27e>
 800a048:	2310      	movs	r3, #16
 800a04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a04e:	e002      	b.n	800a056 <UART_SetConfig+0x27e>
 800a050:	2310      	movs	r3, #16
 800a052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a17      	ldr	r2, [pc, #92]	; (800a0b8 <UART_SetConfig+0x2e0>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	f040 80a8 	bne.w	800a1b2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a066:	2b08      	cmp	r3, #8
 800a068:	d834      	bhi.n	800a0d4 <UART_SetConfig+0x2fc>
 800a06a:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <UART_SetConfig+0x298>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a0d5 	.word	0x0800a0d5
 800a078:	0800a09d 	.word	0x0800a09d
 800a07c:	0800a0d5 	.word	0x0800a0d5
 800a080:	0800a0a3 	.word	0x0800a0a3
 800a084:	0800a0d5 	.word	0x0800a0d5
 800a088:	0800a0d5 	.word	0x0800a0d5
 800a08c:	0800a0d5 	.word	0x0800a0d5
 800a090:	0800a0ab 	.word	0x0800a0ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a094:	f7fd ff0a 	bl	8007eac <HAL_RCC_GetPCLK1Freq>
 800a098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a09a:	e021      	b.n	800a0e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a09c:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <UART_SetConfig+0x2f8>)
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0a0:	e01e      	b.n	800a0e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0a2:	f7fd fe95 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 800a0a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0a8:	e01a      	b.n	800a0e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0b0:	e016      	b.n	800a0e0 <UART_SetConfig+0x308>
 800a0b2:	bf00      	nop
 800a0b4:	cfff69f3 	.word	0xcfff69f3
 800a0b8:	40008000 	.word	0x40008000
 800a0bc:	40013800 	.word	0x40013800
 800a0c0:	40021000 	.word	0x40021000
 800a0c4:	40004400 	.word	0x40004400
 800a0c8:	40004800 	.word	0x40004800
 800a0cc:	40004c00 	.word	0x40004c00
 800a0d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 812a 	beq.w	800a33c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	4a9e      	ldr	r2, [pc, #632]	; (800a368 <UART_SetConfig+0x590>)
 800a0ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0fa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	4613      	mov	r3, r2
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	4413      	add	r3, r2
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d305      	bcc.n	800a118 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a112:	69ba      	ldr	r2, [r7, #24]
 800a114:	429a      	cmp	r2, r3
 800a116:	d903      	bls.n	800a120 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a11e:	e10d      	b.n	800a33c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	2200      	movs	r2, #0
 800a124:	60bb      	str	r3, [r7, #8]
 800a126:	60fa      	str	r2, [r7, #12]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	4a8e      	ldr	r2, [pc, #568]	; (800a368 <UART_SetConfig+0x590>)
 800a12e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a132:	b29b      	uxth	r3, r3
 800a134:	2200      	movs	r2, #0
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a142:	f7f6 fda9 	bl	8000c98 <__aeabi_uldivmod>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4610      	mov	r0, r2
 800a14c:	4619      	mov	r1, r3
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	020b      	lsls	r3, r1, #8
 800a158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a15c:	0202      	lsls	r2, r0, #8
 800a15e:	6979      	ldr	r1, [r7, #20]
 800a160:	6849      	ldr	r1, [r1, #4]
 800a162:	0849      	lsrs	r1, r1, #1
 800a164:	2000      	movs	r0, #0
 800a166:	460c      	mov	r4, r1
 800a168:	4605      	mov	r5, r0
 800a16a:	eb12 0804 	adds.w	r8, r2, r4
 800a16e:	eb43 0905 	adc.w	r9, r3, r5
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	469a      	mov	sl, r3
 800a17a:	4693      	mov	fp, r2
 800a17c:	4652      	mov	r2, sl
 800a17e:	465b      	mov	r3, fp
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 fd88 	bl	8000c98 <__aeabi_uldivmod>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4613      	mov	r3, r2
 800a18e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a196:	d308      	bcc.n	800a1aa <UART_SetConfig+0x3d2>
 800a198:	6a3b      	ldr	r3, [r7, #32]
 800a19a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a19e:	d204      	bcs.n	800a1aa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6a3a      	ldr	r2, [r7, #32]
 800a1a6:	60da      	str	r2, [r3, #12]
 800a1a8:	e0c8      	b.n	800a33c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a1b0:	e0c4      	b.n	800a33c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ba:	d167      	bne.n	800a28c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a1bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d828      	bhi.n	800a216 <UART_SetConfig+0x43e>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0x3f4>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a201 	.word	0x0800a201
 800a1d8:	0800a217 	.word	0x0800a217
 800a1dc:	0800a207 	.word	0x0800a207
 800a1e0:	0800a217 	.word	0x0800a217
 800a1e4:	0800a217 	.word	0x0800a217
 800a1e8:	0800a217 	.word	0x0800a217
 800a1ec:	0800a20f 	.word	0x0800a20f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f0:	f7fd fe5c 	bl	8007eac <HAL_RCC_GetPCLK1Freq>
 800a1f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1f6:	e014      	b.n	800a222 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1f8:	f7fd fe6e 	bl	8007ed8 <HAL_RCC_GetPCLK2Freq>
 800a1fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1fe:	e010      	b.n	800a222 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a200:	4b5a      	ldr	r3, [pc, #360]	; (800a36c <UART_SetConfig+0x594>)
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a204:	e00d      	b.n	800a222 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a206:	f7fd fde3 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 800a20a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a20c:	e009      	b.n	800a222 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a214:	e005      	b.n	800a222 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	2b00      	cmp	r3, #0
 800a226:	f000 8089 	beq.w	800a33c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	4a4e      	ldr	r2, [pc, #312]	; (800a368 <UART_SetConfig+0x590>)
 800a230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a234:	461a      	mov	r2, r3
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	fbb3 f3f2 	udiv	r3, r3, r2
 800a23c:	005a      	lsls	r2, r3, #1
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	085b      	lsrs	r3, r3, #1
 800a244:	441a      	add	r2, r3
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a24e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	2b0f      	cmp	r3, #15
 800a254:	d916      	bls.n	800a284 <UART_SetConfig+0x4ac>
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a25c:	d212      	bcs.n	800a284 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	b29b      	uxth	r3, r3
 800a262:	f023 030f 	bic.w	r3, r3, #15
 800a266:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f003 0307 	and.w	r3, r3, #7
 800a272:	b29a      	uxth	r2, r3
 800a274:	8bfb      	ldrh	r3, [r7, #30]
 800a276:	4313      	orrs	r3, r2
 800a278:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	8bfa      	ldrh	r2, [r7, #30]
 800a280:	60da      	str	r2, [r3, #12]
 800a282:	e05b      	b.n	800a33c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a28a:	e057      	b.n	800a33c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a28c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a290:	2b08      	cmp	r3, #8
 800a292:	d828      	bhi.n	800a2e6 <UART_SetConfig+0x50e>
 800a294:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <UART_SetConfig+0x4c4>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2c9 	.word	0x0800a2c9
 800a2a4:	0800a2d1 	.word	0x0800a2d1
 800a2a8:	0800a2e7 	.word	0x0800a2e7
 800a2ac:	0800a2d7 	.word	0x0800a2d7
 800a2b0:	0800a2e7 	.word	0x0800a2e7
 800a2b4:	0800a2e7 	.word	0x0800a2e7
 800a2b8:	0800a2e7 	.word	0x0800a2e7
 800a2bc:	0800a2df 	.word	0x0800a2df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2c0:	f7fd fdf4 	bl	8007eac <HAL_RCC_GetPCLK1Freq>
 800a2c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2c6:	e014      	b.n	800a2f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2c8:	f7fd fe06 	bl	8007ed8 <HAL_RCC_GetPCLK2Freq>
 800a2cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2ce:	e010      	b.n	800a2f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2d0:	4b26      	ldr	r3, [pc, #152]	; (800a36c <UART_SetConfig+0x594>)
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2d4:	e00d      	b.n	800a2f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2d6:	f7fd fd7b 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 800a2da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a2dc:	e009      	b.n	800a2f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a2e4:	e005      	b.n	800a2f2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a2f0:	bf00      	nop
    }

    if (pclk != 0U)
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d021      	beq.n	800a33c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	4a1a      	ldr	r2, [pc, #104]	; (800a368 <UART_SetConfig+0x590>)
 800a2fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a302:	461a      	mov	r2, r3
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	fbb3 f2f2 	udiv	r2, r3, r2
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	085b      	lsrs	r3, r3, #1
 800a310:	441a      	add	r2, r3
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	fbb2 f3f3 	udiv	r3, r2, r3
 800a31a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	2b0f      	cmp	r3, #15
 800a320:	d909      	bls.n	800a336 <UART_SetConfig+0x55e>
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a328:	d205      	bcs.n	800a336 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	60da      	str	r2, [r3, #12]
 800a334:	e002      	b.n	800a33c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2201      	movs	r2, #1
 800a340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2201      	movs	r2, #1
 800a348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2200      	movs	r2, #0
 800a350:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2200      	movs	r2, #0
 800a356:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a358:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3730      	adds	r7, #48	; 0x30
 800a360:	46bd      	mov	sp, r7
 800a362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a366:	bf00      	nop
 800a368:	0800ed9c 	.word	0x0800ed9c
 800a36c:	00f42400 	.word	0x00f42400

0800a370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a39e:	f003 0302 	and.w	r3, r3, #2
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00a      	beq.n	800a3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e2:	f003 0308 	and.w	r3, r3, #8
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01a      	beq.n	800a486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a46e:	d10a      	bne.n	800a486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	605a      	str	r2, [r3, #4]
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4c4:	f7fa fa6c 	bl	80049a0 <HAL_GetTick>
 800a4c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d10e      	bne.n	800a4f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f82f 	bl	800a54a <UART_WaitOnFlagUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e025      	b.n	800a542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b04      	cmp	r3, #4
 800a502:	d10e      	bne.n	800a522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f819 	bl	800a54a <UART_WaitOnFlagUntilTimeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e00f      	b.n	800a542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b09c      	sub	sp, #112	; 0x70
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	60b9      	str	r1, [r7, #8]
 800a554:	603b      	str	r3, [r7, #0]
 800a556:	4613      	mov	r3, r2
 800a558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a55a:	e0a9      	b.n	800a6b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a562:	f000 80a5 	beq.w	800a6b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a566:	f7fa fa1b 	bl	80049a0 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a572:	429a      	cmp	r2, r3
 800a574:	d302      	bcc.n	800a57c <UART_WaitOnFlagUntilTimeout+0x32>
 800a576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d140      	bne.n	800a5fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a590:	667b      	str	r3, [r7, #100]	; 0x64
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a59c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5a2:	e841 2300 	strex	r3, r2, [r1]
 800a5a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e6      	bne.n	800a57c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b8:	e853 3f00 	ldrex	r3, [r3]
 800a5bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	f023 0301 	bic.w	r3, r3, #1
 800a5c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5d6:	e841 2300 	strex	r3, r2, [r1]
 800a5da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1e5      	bne.n	800a5ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e069      	b.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d051      	beq.n	800a6b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a61a:	d149      	bne.n	800a6b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a63a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	461a      	mov	r2, r3
 800a642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
 800a646:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e6      	bne.n	800a626 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3308      	adds	r3, #8
 800a65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	e853 3f00 	ldrex	r3, [r3]
 800a666:	613b      	str	r3, [r7, #16]
   return(result);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f023 0301 	bic.w	r3, r3, #1
 800a66e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3308      	adds	r3, #8
 800a676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a678:	623a      	str	r2, [r7, #32]
 800a67a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67c:	69f9      	ldr	r1, [r7, #28]
 800a67e:	6a3a      	ldr	r2, [r7, #32]
 800a680:	e841 2300 	strex	r3, r2, [r1]
 800a684:	61bb      	str	r3, [r7, #24]
   return(result);
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e5      	bne.n	800a658 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e010      	b.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69da      	ldr	r2, [r3, #28]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	bf0c      	ite	eq
 800a6c0:	2301      	moveq	r3, #1
 800a6c2:	2300      	movne	r3, #0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	f43f af46 	beq.w	800a55c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3770      	adds	r7, #112	; 0x70
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b095      	sub	sp, #84	; 0x54
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ea:	e853 3f00 	ldrex	r3, [r3]
 800a6ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a700:	643b      	str	r3, [r7, #64]	; 0x40
 800a702:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e6      	bne.n	800a6e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3308      	adds	r3, #8
 800a71a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	61fb      	str	r3, [r7, #28]
   return(result);
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a72a:	f023 0301 	bic.w	r3, r3, #1
 800a72e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3308      	adds	r3, #8
 800a736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a73a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e3      	bne.n	800a714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d118      	bne.n	800a786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e853 3f00 	ldrex	r3, [r3]
 800a760:	60bb      	str	r3, [r7, #8]
   return(result);
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f023 0310 	bic.w	r3, r3, #16
 800a768:	647b      	str	r3, [r7, #68]	; 0x44
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a772:	61bb      	str	r3, [r7, #24]
 800a774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a776:	6979      	ldr	r1, [r7, #20]
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	613b      	str	r3, [r7, #16]
   return(result);
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1e6      	bne.n	800a754 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2220      	movs	r2, #32
 800a78a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a79a:	bf00      	nop
 800a79c:	3754      	adds	r7, #84	; 0x54
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff faf1 	bl	8009dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b088      	sub	sp, #32
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ee:	61fb      	str	r3, [r7, #28]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	6979      	ldr	r1, [r7, #20]
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	613b      	str	r3, [r7, #16]
   return(result);
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e6      	bne.n	800a7da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff fabc 	bl	8009d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a820:	bf00      	nop
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_UARTEx_DisableFifoMode+0x16>
 800a876:	2302      	movs	r3, #2
 800a878:	e027      	b.n	800a8ca <HAL_UARTEx_DisableFifoMode+0x66>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2224      	movs	r2, #36	; 0x24
 800a886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0201 	bic.w	r2, r2, #1
 800a8a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2220      	movs	r2, #32
 800a8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e02d      	b.n	800a94a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2224      	movs	r2, #36	; 0x24
 800a8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f022 0201 	bic.w	r2, r2, #1
 800a914:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f850 	bl	800a9d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a966:	2302      	movs	r3, #2
 800a968:	e02d      	b.n	800a9c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2224      	movs	r2, #36	; 0x24
 800a976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0201 	bic.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f812 	bl	800a9d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d108      	bne.n	800a9f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9f0:	e031      	b.n	800aa56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9f6:	2308      	movs	r3, #8
 800a9f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	0e5b      	lsrs	r3, r3, #25
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	0f5b      	lsrs	r3, r3, #29
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	f003 0307 	and.w	r3, r3, #7
 800aa18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	7b3a      	ldrb	r2, [r7, #12]
 800aa1e:	4911      	ldr	r1, [pc, #68]	; (800aa64 <UARTEx_SetNbDataToProcess+0x94>)
 800aa20:	5c8a      	ldrb	r2, [r1, r2]
 800aa22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa26:	7b3a      	ldrb	r2, [r7, #12]
 800aa28:	490f      	ldr	r1, [pc, #60]	; (800aa68 <UARTEx_SetNbDataToProcess+0x98>)
 800aa2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	7b7a      	ldrb	r2, [r7, #13]
 800aa3c:	4909      	ldr	r1, [pc, #36]	; (800aa64 <UARTEx_SetNbDataToProcess+0x94>)
 800aa3e:	5c8a      	ldrb	r2, [r1, r2]
 800aa40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa44:	7b7a      	ldrb	r2, [r7, #13]
 800aa46:	4908      	ldr	r1, [pc, #32]	; (800aa68 <UARTEx_SetNbDataToProcess+0x98>)
 800aa48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa56:	bf00      	nop
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	0800edb4 	.word	0x0800edb4
 800aa68:	0800edbc 	.word	0x0800edbc

0800aa6c <__errno>:
 800aa6c:	4b01      	ldr	r3, [pc, #4]	; (800aa74 <__errno+0x8>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	20000064 	.word	0x20000064

0800aa78 <__libc_init_array>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4d0d      	ldr	r5, [pc, #52]	; (800aab0 <__libc_init_array+0x38>)
 800aa7c:	4c0d      	ldr	r4, [pc, #52]	; (800aab4 <__libc_init_array+0x3c>)
 800aa7e:	1b64      	subs	r4, r4, r5
 800aa80:	10a4      	asrs	r4, r4, #2
 800aa82:	2600      	movs	r6, #0
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	d109      	bne.n	800aa9c <__libc_init_array+0x24>
 800aa88:	4d0b      	ldr	r5, [pc, #44]	; (800aab8 <__libc_init_array+0x40>)
 800aa8a:	4c0c      	ldr	r4, [pc, #48]	; (800aabc <__libc_init_array+0x44>)
 800aa8c:	f004 f90c 	bl	800eca8 <_init>
 800aa90:	1b64      	subs	r4, r4, r5
 800aa92:	10a4      	asrs	r4, r4, #2
 800aa94:	2600      	movs	r6, #0
 800aa96:	42a6      	cmp	r6, r4
 800aa98:	d105      	bne.n	800aaa6 <__libc_init_array+0x2e>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa0:	4798      	blx	r3
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	e7ee      	b.n	800aa84 <__libc_init_array+0xc>
 800aaa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaaa:	4798      	blx	r3
 800aaac:	3601      	adds	r6, #1
 800aaae:	e7f2      	b.n	800aa96 <__libc_init_array+0x1e>
 800aab0:	0800f210 	.word	0x0800f210
 800aab4:	0800f210 	.word	0x0800f210
 800aab8:	0800f210 	.word	0x0800f210
 800aabc:	0800f214 	.word	0x0800f214

0800aac0 <memcpy>:
 800aac0:	440a      	add	r2, r1
 800aac2:	4291      	cmp	r1, r2
 800aac4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aac8:	d100      	bne.n	800aacc <memcpy+0xc>
 800aaca:	4770      	bx	lr
 800aacc:	b510      	push	{r4, lr}
 800aace:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aad6:	4291      	cmp	r1, r2
 800aad8:	d1f9      	bne.n	800aace <memcpy+0xe>
 800aada:	bd10      	pop	{r4, pc}

0800aadc <memset>:
 800aadc:	4402      	add	r2, r0
 800aade:	4603      	mov	r3, r0
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d100      	bne.n	800aae6 <memset+0xa>
 800aae4:	4770      	bx	lr
 800aae6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaea:	e7f9      	b.n	800aae0 <memset+0x4>

0800aaec <__cvt>:
 800aaec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf0:	ec55 4b10 	vmov	r4, r5, d0
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	460e      	mov	r6, r1
 800aaf8:	4619      	mov	r1, r3
 800aafa:	462b      	mov	r3, r5
 800aafc:	bfbb      	ittet	lt
 800aafe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab02:	461d      	movlt	r5, r3
 800ab04:	2300      	movge	r3, #0
 800ab06:	232d      	movlt	r3, #45	; 0x2d
 800ab08:	700b      	strb	r3, [r1, #0]
 800ab0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab10:	4691      	mov	r9, r2
 800ab12:	f023 0820 	bic.w	r8, r3, #32
 800ab16:	bfbc      	itt	lt
 800ab18:	4622      	movlt	r2, r4
 800ab1a:	4614      	movlt	r4, r2
 800ab1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab20:	d005      	beq.n	800ab2e <__cvt+0x42>
 800ab22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab26:	d100      	bne.n	800ab2a <__cvt+0x3e>
 800ab28:	3601      	adds	r6, #1
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	e000      	b.n	800ab30 <__cvt+0x44>
 800ab2e:	2103      	movs	r1, #3
 800ab30:	ab03      	add	r3, sp, #12
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	ab02      	add	r3, sp, #8
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	ec45 4b10 	vmov	d0, r4, r5
 800ab3c:	4653      	mov	r3, sl
 800ab3e:	4632      	mov	r2, r6
 800ab40:	f000 fcf2 	bl	800b528 <_dtoa_r>
 800ab44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab48:	4607      	mov	r7, r0
 800ab4a:	d102      	bne.n	800ab52 <__cvt+0x66>
 800ab4c:	f019 0f01 	tst.w	r9, #1
 800ab50:	d022      	beq.n	800ab98 <__cvt+0xac>
 800ab52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab56:	eb07 0906 	add.w	r9, r7, r6
 800ab5a:	d110      	bne.n	800ab7e <__cvt+0x92>
 800ab5c:	783b      	ldrb	r3, [r7, #0]
 800ab5e:	2b30      	cmp	r3, #48	; 0x30
 800ab60:	d10a      	bne.n	800ab78 <__cvt+0x8c>
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7f5 ffd5 	bl	8000b18 <__aeabi_dcmpeq>
 800ab6e:	b918      	cbnz	r0, 800ab78 <__cvt+0x8c>
 800ab70:	f1c6 0601 	rsb	r6, r6, #1
 800ab74:	f8ca 6000 	str.w	r6, [sl]
 800ab78:	f8da 3000 	ldr.w	r3, [sl]
 800ab7c:	4499      	add	r9, r3
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2300      	movs	r3, #0
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 ffc7 	bl	8000b18 <__aeabi_dcmpeq>
 800ab8a:	b108      	cbz	r0, 800ab90 <__cvt+0xa4>
 800ab8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab90:	2230      	movs	r2, #48	; 0x30
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	454b      	cmp	r3, r9
 800ab96:	d307      	bcc.n	800aba8 <__cvt+0xbc>
 800ab98:	9b03      	ldr	r3, [sp, #12]
 800ab9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab9c:	1bdb      	subs	r3, r3, r7
 800ab9e:	4638      	mov	r0, r7
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	b004      	add	sp, #16
 800aba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba8:	1c59      	adds	r1, r3, #1
 800abaa:	9103      	str	r1, [sp, #12]
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	e7f0      	b.n	800ab92 <__cvt+0xa6>

0800abb0 <__exponent>:
 800abb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abb2:	4603      	mov	r3, r0
 800abb4:	2900      	cmp	r1, #0
 800abb6:	bfb8      	it	lt
 800abb8:	4249      	neglt	r1, r1
 800abba:	f803 2b02 	strb.w	r2, [r3], #2
 800abbe:	bfb4      	ite	lt
 800abc0:	222d      	movlt	r2, #45	; 0x2d
 800abc2:	222b      	movge	r2, #43	; 0x2b
 800abc4:	2909      	cmp	r1, #9
 800abc6:	7042      	strb	r2, [r0, #1]
 800abc8:	dd2a      	ble.n	800ac20 <__exponent+0x70>
 800abca:	f10d 0407 	add.w	r4, sp, #7
 800abce:	46a4      	mov	ip, r4
 800abd0:	270a      	movs	r7, #10
 800abd2:	46a6      	mov	lr, r4
 800abd4:	460a      	mov	r2, r1
 800abd6:	fb91 f6f7 	sdiv	r6, r1, r7
 800abda:	fb07 1516 	mls	r5, r7, r6, r1
 800abde:	3530      	adds	r5, #48	; 0x30
 800abe0:	2a63      	cmp	r2, #99	; 0x63
 800abe2:	f104 34ff 	add.w	r4, r4, #4294967295
 800abe6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800abea:	4631      	mov	r1, r6
 800abec:	dcf1      	bgt.n	800abd2 <__exponent+0x22>
 800abee:	3130      	adds	r1, #48	; 0x30
 800abf0:	f1ae 0502 	sub.w	r5, lr, #2
 800abf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800abf8:	1c44      	adds	r4, r0, #1
 800abfa:	4629      	mov	r1, r5
 800abfc:	4561      	cmp	r1, ip
 800abfe:	d30a      	bcc.n	800ac16 <__exponent+0x66>
 800ac00:	f10d 0209 	add.w	r2, sp, #9
 800ac04:	eba2 020e 	sub.w	r2, r2, lr
 800ac08:	4565      	cmp	r5, ip
 800ac0a:	bf88      	it	hi
 800ac0c:	2200      	movhi	r2, #0
 800ac0e:	4413      	add	r3, r2
 800ac10:	1a18      	subs	r0, r3, r0
 800ac12:	b003      	add	sp, #12
 800ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac1e:	e7ed      	b.n	800abfc <__exponent+0x4c>
 800ac20:	2330      	movs	r3, #48	; 0x30
 800ac22:	3130      	adds	r1, #48	; 0x30
 800ac24:	7083      	strb	r3, [r0, #2]
 800ac26:	70c1      	strb	r1, [r0, #3]
 800ac28:	1d03      	adds	r3, r0, #4
 800ac2a:	e7f1      	b.n	800ac10 <__exponent+0x60>

0800ac2c <_printf_float>:
 800ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	ed2d 8b02 	vpush	{d8}
 800ac34:	b08d      	sub	sp, #52	; 0x34
 800ac36:	460c      	mov	r4, r1
 800ac38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac3c:	4616      	mov	r6, r2
 800ac3e:	461f      	mov	r7, r3
 800ac40:	4605      	mov	r5, r0
 800ac42:	f001 fa5f 	bl	800c104 <_localeconv_r>
 800ac46:	f8d0 a000 	ldr.w	sl, [r0]
 800ac4a:	4650      	mov	r0, sl
 800ac4c:	f7f5 fae8 	bl	8000220 <strlen>
 800ac50:	2300      	movs	r3, #0
 800ac52:	930a      	str	r3, [sp, #40]	; 0x28
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	9305      	str	r3, [sp, #20]
 800ac58:	f8d8 3000 	ldr.w	r3, [r8]
 800ac5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac60:	3307      	adds	r3, #7
 800ac62:	f023 0307 	bic.w	r3, r3, #7
 800ac66:	f103 0208 	add.w	r2, r3, #8
 800ac6a:	f8c8 2000 	str.w	r2, [r8]
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac7e:	9307      	str	r3, [sp, #28]
 800ac80:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac84:	ee08 0a10 	vmov	s16, r0
 800ac88:	4b9f      	ldr	r3, [pc, #636]	; (800af08 <_printf_float+0x2dc>)
 800ac8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac92:	f7f5 ff73 	bl	8000b7c <__aeabi_dcmpun>
 800ac96:	bb88      	cbnz	r0, 800acfc <_printf_float+0xd0>
 800ac98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac9c:	4b9a      	ldr	r3, [pc, #616]	; (800af08 <_printf_float+0x2dc>)
 800ac9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aca2:	f7f5 ff4d 	bl	8000b40 <__aeabi_dcmple>
 800aca6:	bb48      	cbnz	r0, 800acfc <_printf_float+0xd0>
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	4640      	mov	r0, r8
 800acae:	4649      	mov	r1, r9
 800acb0:	f7f5 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 800acb4:	b110      	cbz	r0, 800acbc <_printf_float+0x90>
 800acb6:	232d      	movs	r3, #45	; 0x2d
 800acb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acbc:	4b93      	ldr	r3, [pc, #588]	; (800af0c <_printf_float+0x2e0>)
 800acbe:	4894      	ldr	r0, [pc, #592]	; (800af10 <_printf_float+0x2e4>)
 800acc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acc4:	bf94      	ite	ls
 800acc6:	4698      	movls	r8, r3
 800acc8:	4680      	movhi	r8, r0
 800acca:	2303      	movs	r3, #3
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	9b05      	ldr	r3, [sp, #20]
 800acd0:	f023 0204 	bic.w	r2, r3, #4
 800acd4:	6022      	str	r2, [r4, #0]
 800acd6:	f04f 0900 	mov.w	r9, #0
 800acda:	9700      	str	r7, [sp, #0]
 800acdc:	4633      	mov	r3, r6
 800acde:	aa0b      	add	r2, sp, #44	; 0x2c
 800ace0:	4621      	mov	r1, r4
 800ace2:	4628      	mov	r0, r5
 800ace4:	f000 f9d8 	bl	800b098 <_printf_common>
 800ace8:	3001      	adds	r0, #1
 800acea:	f040 8090 	bne.w	800ae0e <_printf_float+0x1e2>
 800acee:	f04f 30ff 	mov.w	r0, #4294967295
 800acf2:	b00d      	add	sp, #52	; 0x34
 800acf4:	ecbd 8b02 	vpop	{d8}
 800acf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfc:	4642      	mov	r2, r8
 800acfe:	464b      	mov	r3, r9
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	f7f5 ff3a 	bl	8000b7c <__aeabi_dcmpun>
 800ad08:	b140      	cbz	r0, 800ad1c <_printf_float+0xf0>
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	bfbc      	itt	lt
 800ad10:	232d      	movlt	r3, #45	; 0x2d
 800ad12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad16:	487f      	ldr	r0, [pc, #508]	; (800af14 <_printf_float+0x2e8>)
 800ad18:	4b7f      	ldr	r3, [pc, #508]	; (800af18 <_printf_float+0x2ec>)
 800ad1a:	e7d1      	b.n	800acc0 <_printf_float+0x94>
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad22:	9206      	str	r2, [sp, #24]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	d13f      	bne.n	800ada8 <_printf_float+0x17c>
 800ad28:	2306      	movs	r3, #6
 800ad2a:	6063      	str	r3, [r4, #4]
 800ad2c:	9b05      	ldr	r3, [sp, #20]
 800ad2e:	6861      	ldr	r1, [r4, #4]
 800ad30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad34:	2300      	movs	r3, #0
 800ad36:	9303      	str	r3, [sp, #12]
 800ad38:	ab0a      	add	r3, sp, #40	; 0x28
 800ad3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad3e:	ab09      	add	r3, sp, #36	; 0x24
 800ad40:	ec49 8b10 	vmov	d0, r8, r9
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	6022      	str	r2, [r4, #0]
 800ad48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f7ff fecd 	bl	800aaec <__cvt>
 800ad52:	9b06      	ldr	r3, [sp, #24]
 800ad54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad56:	2b47      	cmp	r3, #71	; 0x47
 800ad58:	4680      	mov	r8, r0
 800ad5a:	d108      	bne.n	800ad6e <_printf_float+0x142>
 800ad5c:	1cc8      	adds	r0, r1, #3
 800ad5e:	db02      	blt.n	800ad66 <_printf_float+0x13a>
 800ad60:	6863      	ldr	r3, [r4, #4]
 800ad62:	4299      	cmp	r1, r3
 800ad64:	dd41      	ble.n	800adea <_printf_float+0x1be>
 800ad66:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad6a:	fa5f fb8b 	uxtb.w	fp, fp
 800ad6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad72:	d820      	bhi.n	800adb6 <_printf_float+0x18a>
 800ad74:	3901      	subs	r1, #1
 800ad76:	465a      	mov	r2, fp
 800ad78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad7c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad7e:	f7ff ff17 	bl	800abb0 <__exponent>
 800ad82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad84:	1813      	adds	r3, r2, r0
 800ad86:	2a01      	cmp	r2, #1
 800ad88:	4681      	mov	r9, r0
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	dc02      	bgt.n	800ad94 <_printf_float+0x168>
 800ad8e:	6822      	ldr	r2, [r4, #0]
 800ad90:	07d2      	lsls	r2, r2, #31
 800ad92:	d501      	bpl.n	800ad98 <_printf_float+0x16c>
 800ad94:	3301      	adds	r3, #1
 800ad96:	6123      	str	r3, [r4, #16]
 800ad98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d09c      	beq.n	800acda <_printf_float+0xae>
 800ada0:	232d      	movs	r3, #45	; 0x2d
 800ada2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ada6:	e798      	b.n	800acda <_printf_float+0xae>
 800ada8:	9a06      	ldr	r2, [sp, #24]
 800adaa:	2a47      	cmp	r2, #71	; 0x47
 800adac:	d1be      	bne.n	800ad2c <_printf_float+0x100>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1bc      	bne.n	800ad2c <_printf_float+0x100>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e7b9      	b.n	800ad2a <_printf_float+0xfe>
 800adb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adba:	d118      	bne.n	800adee <_printf_float+0x1c2>
 800adbc:	2900      	cmp	r1, #0
 800adbe:	6863      	ldr	r3, [r4, #4]
 800adc0:	dd0b      	ble.n	800adda <_printf_float+0x1ae>
 800adc2:	6121      	str	r1, [r4, #16]
 800adc4:	b913      	cbnz	r3, 800adcc <_printf_float+0x1a0>
 800adc6:	6822      	ldr	r2, [r4, #0]
 800adc8:	07d0      	lsls	r0, r2, #31
 800adca:	d502      	bpl.n	800add2 <_printf_float+0x1a6>
 800adcc:	3301      	adds	r3, #1
 800adce:	440b      	add	r3, r1
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	65a1      	str	r1, [r4, #88]	; 0x58
 800add4:	f04f 0900 	mov.w	r9, #0
 800add8:	e7de      	b.n	800ad98 <_printf_float+0x16c>
 800adda:	b913      	cbnz	r3, 800ade2 <_printf_float+0x1b6>
 800addc:	6822      	ldr	r2, [r4, #0]
 800adde:	07d2      	lsls	r2, r2, #31
 800ade0:	d501      	bpl.n	800ade6 <_printf_float+0x1ba>
 800ade2:	3302      	adds	r3, #2
 800ade4:	e7f4      	b.n	800add0 <_printf_float+0x1a4>
 800ade6:	2301      	movs	r3, #1
 800ade8:	e7f2      	b.n	800add0 <_printf_float+0x1a4>
 800adea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf0:	4299      	cmp	r1, r3
 800adf2:	db05      	blt.n	800ae00 <_printf_float+0x1d4>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	6121      	str	r1, [r4, #16]
 800adf8:	07d8      	lsls	r0, r3, #31
 800adfa:	d5ea      	bpl.n	800add2 <_printf_float+0x1a6>
 800adfc:	1c4b      	adds	r3, r1, #1
 800adfe:	e7e7      	b.n	800add0 <_printf_float+0x1a4>
 800ae00:	2900      	cmp	r1, #0
 800ae02:	bfd4      	ite	le
 800ae04:	f1c1 0202 	rsble	r2, r1, #2
 800ae08:	2201      	movgt	r2, #1
 800ae0a:	4413      	add	r3, r2
 800ae0c:	e7e0      	b.n	800add0 <_printf_float+0x1a4>
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	055a      	lsls	r2, r3, #21
 800ae12:	d407      	bmi.n	800ae24 <_printf_float+0x1f8>
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	4642      	mov	r2, r8
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	47b8      	blx	r7
 800ae1e:	3001      	adds	r0, #1
 800ae20:	d12c      	bne.n	800ae7c <_printf_float+0x250>
 800ae22:	e764      	b.n	800acee <_printf_float+0xc2>
 800ae24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae28:	f240 80e0 	bls.w	800afec <_printf_float+0x3c0>
 800ae2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae30:	2200      	movs	r2, #0
 800ae32:	2300      	movs	r3, #0
 800ae34:	f7f5 fe70 	bl	8000b18 <__aeabi_dcmpeq>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d034      	beq.n	800aea6 <_printf_float+0x27a>
 800ae3c:	4a37      	ldr	r2, [pc, #220]	; (800af1c <_printf_float+0x2f0>)
 800ae3e:	2301      	movs	r3, #1
 800ae40:	4631      	mov	r1, r6
 800ae42:	4628      	mov	r0, r5
 800ae44:	47b8      	blx	r7
 800ae46:	3001      	adds	r0, #1
 800ae48:	f43f af51 	beq.w	800acee <_printf_float+0xc2>
 800ae4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae50:	429a      	cmp	r2, r3
 800ae52:	db02      	blt.n	800ae5a <_printf_float+0x22e>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	07d8      	lsls	r0, r3, #31
 800ae58:	d510      	bpl.n	800ae7c <_printf_float+0x250>
 800ae5a:	ee18 3a10 	vmov	r3, s16
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4631      	mov	r1, r6
 800ae62:	4628      	mov	r0, r5
 800ae64:	47b8      	blx	r7
 800ae66:	3001      	adds	r0, #1
 800ae68:	f43f af41 	beq.w	800acee <_printf_float+0xc2>
 800ae6c:	f04f 0800 	mov.w	r8, #0
 800ae70:	f104 091a 	add.w	r9, r4, #26
 800ae74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae76:	3b01      	subs	r3, #1
 800ae78:	4543      	cmp	r3, r8
 800ae7a:	dc09      	bgt.n	800ae90 <_printf_float+0x264>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	079b      	lsls	r3, r3, #30
 800ae80:	f100 8105 	bmi.w	800b08e <_printf_float+0x462>
 800ae84:	68e0      	ldr	r0, [r4, #12]
 800ae86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae88:	4298      	cmp	r0, r3
 800ae8a:	bfb8      	it	lt
 800ae8c:	4618      	movlt	r0, r3
 800ae8e:	e730      	b.n	800acf2 <_printf_float+0xc6>
 800ae90:	2301      	movs	r3, #1
 800ae92:	464a      	mov	r2, r9
 800ae94:	4631      	mov	r1, r6
 800ae96:	4628      	mov	r0, r5
 800ae98:	47b8      	blx	r7
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f43f af27 	beq.w	800acee <_printf_float+0xc2>
 800aea0:	f108 0801 	add.w	r8, r8, #1
 800aea4:	e7e6      	b.n	800ae74 <_printf_float+0x248>
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc39      	bgt.n	800af20 <_printf_float+0x2f4>
 800aeac:	4a1b      	ldr	r2, [pc, #108]	; (800af1c <_printf_float+0x2f0>)
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f43f af19 	beq.w	800acee <_printf_float+0xc2>
 800aebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aec0:	4313      	orrs	r3, r2
 800aec2:	d102      	bne.n	800aeca <_printf_float+0x29e>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	07d9      	lsls	r1, r3, #31
 800aec8:	d5d8      	bpl.n	800ae7c <_printf_float+0x250>
 800aeca:	ee18 3a10 	vmov	r3, s16
 800aece:	4652      	mov	r2, sl
 800aed0:	4631      	mov	r1, r6
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b8      	blx	r7
 800aed6:	3001      	adds	r0, #1
 800aed8:	f43f af09 	beq.w	800acee <_printf_float+0xc2>
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	f104 0a1a 	add.w	sl, r4, #26
 800aee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee6:	425b      	negs	r3, r3
 800aee8:	454b      	cmp	r3, r9
 800aeea:	dc01      	bgt.n	800aef0 <_printf_float+0x2c4>
 800aeec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeee:	e792      	b.n	800ae16 <_printf_float+0x1ea>
 800aef0:	2301      	movs	r3, #1
 800aef2:	4652      	mov	r2, sl
 800aef4:	4631      	mov	r1, r6
 800aef6:	4628      	mov	r0, r5
 800aef8:	47b8      	blx	r7
 800aefa:	3001      	adds	r0, #1
 800aefc:	f43f aef7 	beq.w	800acee <_printf_float+0xc2>
 800af00:	f109 0901 	add.w	r9, r9, #1
 800af04:	e7ee      	b.n	800aee4 <_printf_float+0x2b8>
 800af06:	bf00      	nop
 800af08:	7fefffff 	.word	0x7fefffff
 800af0c:	0800edc8 	.word	0x0800edc8
 800af10:	0800edcc 	.word	0x0800edcc
 800af14:	0800edd4 	.word	0x0800edd4
 800af18:	0800edd0 	.word	0x0800edd0
 800af1c:	0800edd8 	.word	0x0800edd8
 800af20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af24:	429a      	cmp	r2, r3
 800af26:	bfa8      	it	ge
 800af28:	461a      	movge	r2, r3
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	4691      	mov	r9, r2
 800af2e:	dc37      	bgt.n	800afa0 <_printf_float+0x374>
 800af30:	f04f 0b00 	mov.w	fp, #0
 800af34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af38:	f104 021a 	add.w	r2, r4, #26
 800af3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	eba3 0309 	sub.w	r3, r3, r9
 800af44:	455b      	cmp	r3, fp
 800af46:	dc33      	bgt.n	800afb0 <_printf_float+0x384>
 800af48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af4c:	429a      	cmp	r2, r3
 800af4e:	db3b      	blt.n	800afc8 <_printf_float+0x39c>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	07da      	lsls	r2, r3, #31
 800af54:	d438      	bmi.n	800afc8 <_printf_float+0x39c>
 800af56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af58:	9a05      	ldr	r2, [sp, #20]
 800af5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af5c:	1a9a      	subs	r2, r3, r2
 800af5e:	eba3 0901 	sub.w	r9, r3, r1
 800af62:	4591      	cmp	r9, r2
 800af64:	bfa8      	it	ge
 800af66:	4691      	movge	r9, r2
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	dc35      	bgt.n	800afda <_printf_float+0x3ae>
 800af6e:	f04f 0800 	mov.w	r8, #0
 800af72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af76:	f104 0a1a 	add.w	sl, r4, #26
 800af7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af7e:	1a9b      	subs	r3, r3, r2
 800af80:	eba3 0309 	sub.w	r3, r3, r9
 800af84:	4543      	cmp	r3, r8
 800af86:	f77f af79 	ble.w	800ae7c <_printf_float+0x250>
 800af8a:	2301      	movs	r3, #1
 800af8c:	4652      	mov	r2, sl
 800af8e:	4631      	mov	r1, r6
 800af90:	4628      	mov	r0, r5
 800af92:	47b8      	blx	r7
 800af94:	3001      	adds	r0, #1
 800af96:	f43f aeaa 	beq.w	800acee <_printf_float+0xc2>
 800af9a:	f108 0801 	add.w	r8, r8, #1
 800af9e:	e7ec      	b.n	800af7a <_printf_float+0x34e>
 800afa0:	4613      	mov	r3, r2
 800afa2:	4631      	mov	r1, r6
 800afa4:	4642      	mov	r2, r8
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	d1c0      	bne.n	800af30 <_printf_float+0x304>
 800afae:	e69e      	b.n	800acee <_printf_float+0xc2>
 800afb0:	2301      	movs	r3, #1
 800afb2:	4631      	mov	r1, r6
 800afb4:	4628      	mov	r0, r5
 800afb6:	9205      	str	r2, [sp, #20]
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	f43f ae97 	beq.w	800acee <_printf_float+0xc2>
 800afc0:	9a05      	ldr	r2, [sp, #20]
 800afc2:	f10b 0b01 	add.w	fp, fp, #1
 800afc6:	e7b9      	b.n	800af3c <_printf_float+0x310>
 800afc8:	ee18 3a10 	vmov	r3, s16
 800afcc:	4652      	mov	r2, sl
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	d1be      	bne.n	800af56 <_printf_float+0x32a>
 800afd8:	e689      	b.n	800acee <_printf_float+0xc2>
 800afda:	9a05      	ldr	r2, [sp, #20]
 800afdc:	464b      	mov	r3, r9
 800afde:	4442      	add	r2, r8
 800afe0:	4631      	mov	r1, r6
 800afe2:	4628      	mov	r0, r5
 800afe4:	47b8      	blx	r7
 800afe6:	3001      	adds	r0, #1
 800afe8:	d1c1      	bne.n	800af6e <_printf_float+0x342>
 800afea:	e680      	b.n	800acee <_printf_float+0xc2>
 800afec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afee:	2a01      	cmp	r2, #1
 800aff0:	dc01      	bgt.n	800aff6 <_printf_float+0x3ca>
 800aff2:	07db      	lsls	r3, r3, #31
 800aff4:	d538      	bpl.n	800b068 <_printf_float+0x43c>
 800aff6:	2301      	movs	r3, #1
 800aff8:	4642      	mov	r2, r8
 800affa:	4631      	mov	r1, r6
 800affc:	4628      	mov	r0, r5
 800affe:	47b8      	blx	r7
 800b000:	3001      	adds	r0, #1
 800b002:	f43f ae74 	beq.w	800acee <_printf_float+0xc2>
 800b006:	ee18 3a10 	vmov	r3, s16
 800b00a:	4652      	mov	r2, sl
 800b00c:	4631      	mov	r1, r6
 800b00e:	4628      	mov	r0, r5
 800b010:	47b8      	blx	r7
 800b012:	3001      	adds	r0, #1
 800b014:	f43f ae6b 	beq.w	800acee <_printf_float+0xc2>
 800b018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b01c:	2200      	movs	r2, #0
 800b01e:	2300      	movs	r3, #0
 800b020:	f7f5 fd7a 	bl	8000b18 <__aeabi_dcmpeq>
 800b024:	b9d8      	cbnz	r0, 800b05e <_printf_float+0x432>
 800b026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b028:	f108 0201 	add.w	r2, r8, #1
 800b02c:	3b01      	subs	r3, #1
 800b02e:	4631      	mov	r1, r6
 800b030:	4628      	mov	r0, r5
 800b032:	47b8      	blx	r7
 800b034:	3001      	adds	r0, #1
 800b036:	d10e      	bne.n	800b056 <_printf_float+0x42a>
 800b038:	e659      	b.n	800acee <_printf_float+0xc2>
 800b03a:	2301      	movs	r3, #1
 800b03c:	4652      	mov	r2, sl
 800b03e:	4631      	mov	r1, r6
 800b040:	4628      	mov	r0, r5
 800b042:	47b8      	blx	r7
 800b044:	3001      	adds	r0, #1
 800b046:	f43f ae52 	beq.w	800acee <_printf_float+0xc2>
 800b04a:	f108 0801 	add.w	r8, r8, #1
 800b04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b050:	3b01      	subs	r3, #1
 800b052:	4543      	cmp	r3, r8
 800b054:	dcf1      	bgt.n	800b03a <_printf_float+0x40e>
 800b056:	464b      	mov	r3, r9
 800b058:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b05c:	e6dc      	b.n	800ae18 <_printf_float+0x1ec>
 800b05e:	f04f 0800 	mov.w	r8, #0
 800b062:	f104 0a1a 	add.w	sl, r4, #26
 800b066:	e7f2      	b.n	800b04e <_printf_float+0x422>
 800b068:	2301      	movs	r3, #1
 800b06a:	4642      	mov	r2, r8
 800b06c:	e7df      	b.n	800b02e <_printf_float+0x402>
 800b06e:	2301      	movs	r3, #1
 800b070:	464a      	mov	r2, r9
 800b072:	4631      	mov	r1, r6
 800b074:	4628      	mov	r0, r5
 800b076:	47b8      	blx	r7
 800b078:	3001      	adds	r0, #1
 800b07a:	f43f ae38 	beq.w	800acee <_printf_float+0xc2>
 800b07e:	f108 0801 	add.w	r8, r8, #1
 800b082:	68e3      	ldr	r3, [r4, #12]
 800b084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b086:	1a5b      	subs	r3, r3, r1
 800b088:	4543      	cmp	r3, r8
 800b08a:	dcf0      	bgt.n	800b06e <_printf_float+0x442>
 800b08c:	e6fa      	b.n	800ae84 <_printf_float+0x258>
 800b08e:	f04f 0800 	mov.w	r8, #0
 800b092:	f104 0919 	add.w	r9, r4, #25
 800b096:	e7f4      	b.n	800b082 <_printf_float+0x456>

0800b098 <_printf_common>:
 800b098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b09c:	4616      	mov	r6, r2
 800b09e:	4699      	mov	r9, r3
 800b0a0:	688a      	ldr	r2, [r1, #8]
 800b0a2:	690b      	ldr	r3, [r1, #16]
 800b0a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	bfb8      	it	lt
 800b0ac:	4613      	movlt	r3, r2
 800b0ae:	6033      	str	r3, [r6, #0]
 800b0b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	b10a      	cbz	r2, 800b0be <_printf_common+0x26>
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	6033      	str	r3, [r6, #0]
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	0699      	lsls	r1, r3, #26
 800b0c2:	bf42      	ittt	mi
 800b0c4:	6833      	ldrmi	r3, [r6, #0]
 800b0c6:	3302      	addmi	r3, #2
 800b0c8:	6033      	strmi	r3, [r6, #0]
 800b0ca:	6825      	ldr	r5, [r4, #0]
 800b0cc:	f015 0506 	ands.w	r5, r5, #6
 800b0d0:	d106      	bne.n	800b0e0 <_printf_common+0x48>
 800b0d2:	f104 0a19 	add.w	sl, r4, #25
 800b0d6:	68e3      	ldr	r3, [r4, #12]
 800b0d8:	6832      	ldr	r2, [r6, #0]
 800b0da:	1a9b      	subs	r3, r3, r2
 800b0dc:	42ab      	cmp	r3, r5
 800b0de:	dc26      	bgt.n	800b12e <_printf_common+0x96>
 800b0e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0e4:	1e13      	subs	r3, r2, #0
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	bf18      	it	ne
 800b0ea:	2301      	movne	r3, #1
 800b0ec:	0692      	lsls	r2, r2, #26
 800b0ee:	d42b      	bmi.n	800b148 <_printf_common+0xb0>
 800b0f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	47c0      	blx	r8
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	d01e      	beq.n	800b13c <_printf_common+0xa4>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	68e5      	ldr	r5, [r4, #12]
 800b102:	6832      	ldr	r2, [r6, #0]
 800b104:	f003 0306 	and.w	r3, r3, #6
 800b108:	2b04      	cmp	r3, #4
 800b10a:	bf08      	it	eq
 800b10c:	1aad      	subeq	r5, r5, r2
 800b10e:	68a3      	ldr	r3, [r4, #8]
 800b110:	6922      	ldr	r2, [r4, #16]
 800b112:	bf0c      	ite	eq
 800b114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b118:	2500      	movne	r5, #0
 800b11a:	4293      	cmp	r3, r2
 800b11c:	bfc4      	itt	gt
 800b11e:	1a9b      	subgt	r3, r3, r2
 800b120:	18ed      	addgt	r5, r5, r3
 800b122:	2600      	movs	r6, #0
 800b124:	341a      	adds	r4, #26
 800b126:	42b5      	cmp	r5, r6
 800b128:	d11a      	bne.n	800b160 <_printf_common+0xc8>
 800b12a:	2000      	movs	r0, #0
 800b12c:	e008      	b.n	800b140 <_printf_common+0xa8>
 800b12e:	2301      	movs	r3, #1
 800b130:	4652      	mov	r2, sl
 800b132:	4649      	mov	r1, r9
 800b134:	4638      	mov	r0, r7
 800b136:	47c0      	blx	r8
 800b138:	3001      	adds	r0, #1
 800b13a:	d103      	bne.n	800b144 <_printf_common+0xac>
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b144:	3501      	adds	r5, #1
 800b146:	e7c6      	b.n	800b0d6 <_printf_common+0x3e>
 800b148:	18e1      	adds	r1, r4, r3
 800b14a:	1c5a      	adds	r2, r3, #1
 800b14c:	2030      	movs	r0, #48	; 0x30
 800b14e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b152:	4422      	add	r2, r4
 800b154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b15c:	3302      	adds	r3, #2
 800b15e:	e7c7      	b.n	800b0f0 <_printf_common+0x58>
 800b160:	2301      	movs	r3, #1
 800b162:	4622      	mov	r2, r4
 800b164:	4649      	mov	r1, r9
 800b166:	4638      	mov	r0, r7
 800b168:	47c0      	blx	r8
 800b16a:	3001      	adds	r0, #1
 800b16c:	d0e6      	beq.n	800b13c <_printf_common+0xa4>
 800b16e:	3601      	adds	r6, #1
 800b170:	e7d9      	b.n	800b126 <_printf_common+0x8e>
	...

0800b174 <_printf_i>:
 800b174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b178:	7e0f      	ldrb	r7, [r1, #24]
 800b17a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b17c:	2f78      	cmp	r7, #120	; 0x78
 800b17e:	4691      	mov	r9, r2
 800b180:	4680      	mov	r8, r0
 800b182:	460c      	mov	r4, r1
 800b184:	469a      	mov	sl, r3
 800b186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b18a:	d807      	bhi.n	800b19c <_printf_i+0x28>
 800b18c:	2f62      	cmp	r7, #98	; 0x62
 800b18e:	d80a      	bhi.n	800b1a6 <_printf_i+0x32>
 800b190:	2f00      	cmp	r7, #0
 800b192:	f000 80d8 	beq.w	800b346 <_printf_i+0x1d2>
 800b196:	2f58      	cmp	r7, #88	; 0x58
 800b198:	f000 80a3 	beq.w	800b2e2 <_printf_i+0x16e>
 800b19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1a4:	e03a      	b.n	800b21c <_printf_i+0xa8>
 800b1a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1aa:	2b15      	cmp	r3, #21
 800b1ac:	d8f6      	bhi.n	800b19c <_printf_i+0x28>
 800b1ae:	a101      	add	r1, pc, #4	; (adr r1, 800b1b4 <_printf_i+0x40>)
 800b1b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1b4:	0800b20d 	.word	0x0800b20d
 800b1b8:	0800b221 	.word	0x0800b221
 800b1bc:	0800b19d 	.word	0x0800b19d
 800b1c0:	0800b19d 	.word	0x0800b19d
 800b1c4:	0800b19d 	.word	0x0800b19d
 800b1c8:	0800b19d 	.word	0x0800b19d
 800b1cc:	0800b221 	.word	0x0800b221
 800b1d0:	0800b19d 	.word	0x0800b19d
 800b1d4:	0800b19d 	.word	0x0800b19d
 800b1d8:	0800b19d 	.word	0x0800b19d
 800b1dc:	0800b19d 	.word	0x0800b19d
 800b1e0:	0800b32d 	.word	0x0800b32d
 800b1e4:	0800b251 	.word	0x0800b251
 800b1e8:	0800b30f 	.word	0x0800b30f
 800b1ec:	0800b19d 	.word	0x0800b19d
 800b1f0:	0800b19d 	.word	0x0800b19d
 800b1f4:	0800b34f 	.word	0x0800b34f
 800b1f8:	0800b19d 	.word	0x0800b19d
 800b1fc:	0800b251 	.word	0x0800b251
 800b200:	0800b19d 	.word	0x0800b19d
 800b204:	0800b19d 	.word	0x0800b19d
 800b208:	0800b317 	.word	0x0800b317
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	1d1a      	adds	r2, r3, #4
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	602a      	str	r2, [r5, #0]
 800b214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b21c:	2301      	movs	r3, #1
 800b21e:	e0a3      	b.n	800b368 <_printf_i+0x1f4>
 800b220:	6820      	ldr	r0, [r4, #0]
 800b222:	6829      	ldr	r1, [r5, #0]
 800b224:	0606      	lsls	r6, r0, #24
 800b226:	f101 0304 	add.w	r3, r1, #4
 800b22a:	d50a      	bpl.n	800b242 <_printf_i+0xce>
 800b22c:	680e      	ldr	r6, [r1, #0]
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	2e00      	cmp	r6, #0
 800b232:	da03      	bge.n	800b23c <_printf_i+0xc8>
 800b234:	232d      	movs	r3, #45	; 0x2d
 800b236:	4276      	negs	r6, r6
 800b238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23c:	485e      	ldr	r0, [pc, #376]	; (800b3b8 <_printf_i+0x244>)
 800b23e:	230a      	movs	r3, #10
 800b240:	e019      	b.n	800b276 <_printf_i+0x102>
 800b242:	680e      	ldr	r6, [r1, #0]
 800b244:	602b      	str	r3, [r5, #0]
 800b246:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b24a:	bf18      	it	ne
 800b24c:	b236      	sxthne	r6, r6
 800b24e:	e7ef      	b.n	800b230 <_printf_i+0xbc>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	6820      	ldr	r0, [r4, #0]
 800b254:	1d19      	adds	r1, r3, #4
 800b256:	6029      	str	r1, [r5, #0]
 800b258:	0601      	lsls	r1, r0, #24
 800b25a:	d501      	bpl.n	800b260 <_printf_i+0xec>
 800b25c:	681e      	ldr	r6, [r3, #0]
 800b25e:	e002      	b.n	800b266 <_printf_i+0xf2>
 800b260:	0646      	lsls	r6, r0, #25
 800b262:	d5fb      	bpl.n	800b25c <_printf_i+0xe8>
 800b264:	881e      	ldrh	r6, [r3, #0]
 800b266:	4854      	ldr	r0, [pc, #336]	; (800b3b8 <_printf_i+0x244>)
 800b268:	2f6f      	cmp	r7, #111	; 0x6f
 800b26a:	bf0c      	ite	eq
 800b26c:	2308      	moveq	r3, #8
 800b26e:	230a      	movne	r3, #10
 800b270:	2100      	movs	r1, #0
 800b272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b276:	6865      	ldr	r5, [r4, #4]
 800b278:	60a5      	str	r5, [r4, #8]
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	bfa2      	ittt	ge
 800b27e:	6821      	ldrge	r1, [r4, #0]
 800b280:	f021 0104 	bicge.w	r1, r1, #4
 800b284:	6021      	strge	r1, [r4, #0]
 800b286:	b90e      	cbnz	r6, 800b28c <_printf_i+0x118>
 800b288:	2d00      	cmp	r5, #0
 800b28a:	d04d      	beq.n	800b328 <_printf_i+0x1b4>
 800b28c:	4615      	mov	r5, r2
 800b28e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b292:	fb03 6711 	mls	r7, r3, r1, r6
 800b296:	5dc7      	ldrb	r7, [r0, r7]
 800b298:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b29c:	4637      	mov	r7, r6
 800b29e:	42bb      	cmp	r3, r7
 800b2a0:	460e      	mov	r6, r1
 800b2a2:	d9f4      	bls.n	800b28e <_printf_i+0x11a>
 800b2a4:	2b08      	cmp	r3, #8
 800b2a6:	d10b      	bne.n	800b2c0 <_printf_i+0x14c>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	07de      	lsls	r6, r3, #31
 800b2ac:	d508      	bpl.n	800b2c0 <_printf_i+0x14c>
 800b2ae:	6923      	ldr	r3, [r4, #16]
 800b2b0:	6861      	ldr	r1, [r4, #4]
 800b2b2:	4299      	cmp	r1, r3
 800b2b4:	bfde      	ittt	le
 800b2b6:	2330      	movle	r3, #48	; 0x30
 800b2b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c0:	1b52      	subs	r2, r2, r5
 800b2c2:	6122      	str	r2, [r4, #16]
 800b2c4:	f8cd a000 	str.w	sl, [sp]
 800b2c8:	464b      	mov	r3, r9
 800b2ca:	aa03      	add	r2, sp, #12
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	f7ff fee2 	bl	800b098 <_printf_common>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d14c      	bne.n	800b372 <_printf_i+0x1fe>
 800b2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2dc:	b004      	add	sp, #16
 800b2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e2:	4835      	ldr	r0, [pc, #212]	; (800b3b8 <_printf_i+0x244>)
 800b2e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2e8:	6829      	ldr	r1, [r5, #0]
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2f0:	6029      	str	r1, [r5, #0]
 800b2f2:	061d      	lsls	r5, r3, #24
 800b2f4:	d514      	bpl.n	800b320 <_printf_i+0x1ac>
 800b2f6:	07df      	lsls	r7, r3, #31
 800b2f8:	bf44      	itt	mi
 800b2fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b2fe:	6023      	strmi	r3, [r4, #0]
 800b300:	b91e      	cbnz	r6, 800b30a <_printf_i+0x196>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	f023 0320 	bic.w	r3, r3, #32
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	2310      	movs	r3, #16
 800b30c:	e7b0      	b.n	800b270 <_printf_i+0xfc>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	f043 0320 	orr.w	r3, r3, #32
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	2378      	movs	r3, #120	; 0x78
 800b318:	4828      	ldr	r0, [pc, #160]	; (800b3bc <_printf_i+0x248>)
 800b31a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b31e:	e7e3      	b.n	800b2e8 <_printf_i+0x174>
 800b320:	0659      	lsls	r1, r3, #25
 800b322:	bf48      	it	mi
 800b324:	b2b6      	uxthmi	r6, r6
 800b326:	e7e6      	b.n	800b2f6 <_printf_i+0x182>
 800b328:	4615      	mov	r5, r2
 800b32a:	e7bb      	b.n	800b2a4 <_printf_i+0x130>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	6826      	ldr	r6, [r4, #0]
 800b330:	6961      	ldr	r1, [r4, #20]
 800b332:	1d18      	adds	r0, r3, #4
 800b334:	6028      	str	r0, [r5, #0]
 800b336:	0635      	lsls	r5, r6, #24
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	d501      	bpl.n	800b340 <_printf_i+0x1cc>
 800b33c:	6019      	str	r1, [r3, #0]
 800b33e:	e002      	b.n	800b346 <_printf_i+0x1d2>
 800b340:	0670      	lsls	r0, r6, #25
 800b342:	d5fb      	bpl.n	800b33c <_printf_i+0x1c8>
 800b344:	8019      	strh	r1, [r3, #0]
 800b346:	2300      	movs	r3, #0
 800b348:	6123      	str	r3, [r4, #16]
 800b34a:	4615      	mov	r5, r2
 800b34c:	e7ba      	b.n	800b2c4 <_printf_i+0x150>
 800b34e:	682b      	ldr	r3, [r5, #0]
 800b350:	1d1a      	adds	r2, r3, #4
 800b352:	602a      	str	r2, [r5, #0]
 800b354:	681d      	ldr	r5, [r3, #0]
 800b356:	6862      	ldr	r2, [r4, #4]
 800b358:	2100      	movs	r1, #0
 800b35a:	4628      	mov	r0, r5
 800b35c:	f7f4 ff68 	bl	8000230 <memchr>
 800b360:	b108      	cbz	r0, 800b366 <_printf_i+0x1f2>
 800b362:	1b40      	subs	r0, r0, r5
 800b364:	6060      	str	r0, [r4, #4]
 800b366:	6863      	ldr	r3, [r4, #4]
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	2300      	movs	r3, #0
 800b36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b370:	e7a8      	b.n	800b2c4 <_printf_i+0x150>
 800b372:	6923      	ldr	r3, [r4, #16]
 800b374:	462a      	mov	r2, r5
 800b376:	4649      	mov	r1, r9
 800b378:	4640      	mov	r0, r8
 800b37a:	47d0      	blx	sl
 800b37c:	3001      	adds	r0, #1
 800b37e:	d0ab      	beq.n	800b2d8 <_printf_i+0x164>
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	079b      	lsls	r3, r3, #30
 800b384:	d413      	bmi.n	800b3ae <_printf_i+0x23a>
 800b386:	68e0      	ldr	r0, [r4, #12]
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	4298      	cmp	r0, r3
 800b38c:	bfb8      	it	lt
 800b38e:	4618      	movlt	r0, r3
 800b390:	e7a4      	b.n	800b2dc <_printf_i+0x168>
 800b392:	2301      	movs	r3, #1
 800b394:	4632      	mov	r2, r6
 800b396:	4649      	mov	r1, r9
 800b398:	4640      	mov	r0, r8
 800b39a:	47d0      	blx	sl
 800b39c:	3001      	adds	r0, #1
 800b39e:	d09b      	beq.n	800b2d8 <_printf_i+0x164>
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	68e3      	ldr	r3, [r4, #12]
 800b3a4:	9903      	ldr	r1, [sp, #12]
 800b3a6:	1a5b      	subs	r3, r3, r1
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	dcf2      	bgt.n	800b392 <_printf_i+0x21e>
 800b3ac:	e7eb      	b.n	800b386 <_printf_i+0x212>
 800b3ae:	2500      	movs	r5, #0
 800b3b0:	f104 0619 	add.w	r6, r4, #25
 800b3b4:	e7f5      	b.n	800b3a2 <_printf_i+0x22e>
 800b3b6:	bf00      	nop
 800b3b8:	0800edda 	.word	0x0800edda
 800b3bc:	0800edeb 	.word	0x0800edeb

0800b3c0 <siprintf>:
 800b3c0:	b40e      	push	{r1, r2, r3}
 800b3c2:	b500      	push	{lr}
 800b3c4:	b09c      	sub	sp, #112	; 0x70
 800b3c6:	ab1d      	add	r3, sp, #116	; 0x74
 800b3c8:	9002      	str	r0, [sp, #8]
 800b3ca:	9006      	str	r0, [sp, #24]
 800b3cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3d0:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <siprintf+0x38>)
 800b3d2:	9107      	str	r1, [sp, #28]
 800b3d4:	9104      	str	r1, [sp, #16]
 800b3d6:	4909      	ldr	r1, [pc, #36]	; (800b3fc <siprintf+0x3c>)
 800b3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3dc:	9105      	str	r1, [sp, #20]
 800b3de:	6800      	ldr	r0, [r0, #0]
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	a902      	add	r1, sp, #8
 800b3e4:	f001 fb70 	bl	800cac8 <_svfiprintf_r>
 800b3e8:	9b02      	ldr	r3, [sp, #8]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	b01c      	add	sp, #112	; 0x70
 800b3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3f4:	b003      	add	sp, #12
 800b3f6:	4770      	bx	lr
 800b3f8:	20000064 	.word	0x20000064
 800b3fc:	ffff0208 	.word	0xffff0208

0800b400 <strcpy>:
 800b400:	4603      	mov	r3, r0
 800b402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b406:	f803 2b01 	strb.w	r2, [r3], #1
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	d1f9      	bne.n	800b402 <strcpy+0x2>
 800b40e:	4770      	bx	lr

0800b410 <quorem>:
 800b410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	6903      	ldr	r3, [r0, #16]
 800b416:	690c      	ldr	r4, [r1, #16]
 800b418:	42a3      	cmp	r3, r4
 800b41a:	4607      	mov	r7, r0
 800b41c:	f2c0 8081 	blt.w	800b522 <quorem+0x112>
 800b420:	3c01      	subs	r4, #1
 800b422:	f101 0814 	add.w	r8, r1, #20
 800b426:	f100 0514 	add.w	r5, r0, #20
 800b42a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b434:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b438:	3301      	adds	r3, #1
 800b43a:	429a      	cmp	r2, r3
 800b43c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b440:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b444:	fbb2 f6f3 	udiv	r6, r2, r3
 800b448:	d331      	bcc.n	800b4ae <quorem+0x9e>
 800b44a:	f04f 0e00 	mov.w	lr, #0
 800b44e:	4640      	mov	r0, r8
 800b450:	46ac      	mov	ip, r5
 800b452:	46f2      	mov	sl, lr
 800b454:	f850 2b04 	ldr.w	r2, [r0], #4
 800b458:	b293      	uxth	r3, r2
 800b45a:	fb06 e303 	mla	r3, r6, r3, lr
 800b45e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b462:	b29b      	uxth	r3, r3
 800b464:	ebaa 0303 	sub.w	r3, sl, r3
 800b468:	f8dc a000 	ldr.w	sl, [ip]
 800b46c:	0c12      	lsrs	r2, r2, #16
 800b46e:	fa13 f38a 	uxtah	r3, r3, sl
 800b472:	fb06 e202 	mla	r2, r6, r2, lr
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b47e:	b292      	uxth	r2, r2
 800b480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b488:	f8bd 3000 	ldrh.w	r3, [sp]
 800b48c:	4581      	cmp	r9, r0
 800b48e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b492:	f84c 3b04 	str.w	r3, [ip], #4
 800b496:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b49a:	d2db      	bcs.n	800b454 <quorem+0x44>
 800b49c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4a0:	b92b      	cbnz	r3, 800b4ae <quorem+0x9e>
 800b4a2:	9b01      	ldr	r3, [sp, #4]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	429d      	cmp	r5, r3
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	d32e      	bcc.n	800b50a <quorem+0xfa>
 800b4ac:	613c      	str	r4, [r7, #16]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	f001 f8b6 	bl	800c620 <__mcmp>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	db24      	blt.n	800b502 <quorem+0xf2>
 800b4b8:	3601      	adds	r6, #1
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f04f 0c00 	mov.w	ip, #0
 800b4c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b4c8:	b293      	uxth	r3, r2
 800b4ca:	ebac 0303 	sub.w	r3, ip, r3
 800b4ce:	0c12      	lsrs	r2, r2, #16
 800b4d0:	fa13 f38e 	uxtah	r3, r3, lr
 800b4d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b4d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4e2:	45c1      	cmp	r9, r8
 800b4e4:	f840 3b04 	str.w	r3, [r0], #4
 800b4e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4ec:	d2e8      	bcs.n	800b4c0 <quorem+0xb0>
 800b4ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4f6:	b922      	cbnz	r2, 800b502 <quorem+0xf2>
 800b4f8:	3b04      	subs	r3, #4
 800b4fa:	429d      	cmp	r5, r3
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	d30a      	bcc.n	800b516 <quorem+0x106>
 800b500:	613c      	str	r4, [r7, #16]
 800b502:	4630      	mov	r0, r6
 800b504:	b003      	add	sp, #12
 800b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50a:	6812      	ldr	r2, [r2, #0]
 800b50c:	3b04      	subs	r3, #4
 800b50e:	2a00      	cmp	r2, #0
 800b510:	d1cc      	bne.n	800b4ac <quorem+0x9c>
 800b512:	3c01      	subs	r4, #1
 800b514:	e7c7      	b.n	800b4a6 <quorem+0x96>
 800b516:	6812      	ldr	r2, [r2, #0]
 800b518:	3b04      	subs	r3, #4
 800b51a:	2a00      	cmp	r2, #0
 800b51c:	d1f0      	bne.n	800b500 <quorem+0xf0>
 800b51e:	3c01      	subs	r4, #1
 800b520:	e7eb      	b.n	800b4fa <quorem+0xea>
 800b522:	2000      	movs	r0, #0
 800b524:	e7ee      	b.n	800b504 <quorem+0xf4>
	...

0800b528 <_dtoa_r>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	ed2d 8b04 	vpush	{d8-d9}
 800b530:	ec57 6b10 	vmov	r6, r7, d0
 800b534:	b093      	sub	sp, #76	; 0x4c
 800b536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b53c:	9106      	str	r1, [sp, #24]
 800b53e:	ee10 aa10 	vmov	sl, s0
 800b542:	4604      	mov	r4, r0
 800b544:	9209      	str	r2, [sp, #36]	; 0x24
 800b546:	930c      	str	r3, [sp, #48]	; 0x30
 800b548:	46bb      	mov	fp, r7
 800b54a:	b975      	cbnz	r5, 800b56a <_dtoa_r+0x42>
 800b54c:	2010      	movs	r0, #16
 800b54e:	f000 fddd 	bl	800c10c <malloc>
 800b552:	4602      	mov	r2, r0
 800b554:	6260      	str	r0, [r4, #36]	; 0x24
 800b556:	b920      	cbnz	r0, 800b562 <_dtoa_r+0x3a>
 800b558:	4ba7      	ldr	r3, [pc, #668]	; (800b7f8 <_dtoa_r+0x2d0>)
 800b55a:	21ea      	movs	r1, #234	; 0xea
 800b55c:	48a7      	ldr	r0, [pc, #668]	; (800b7fc <_dtoa_r+0x2d4>)
 800b55e:	f001 fbc3 	bl	800cce8 <__assert_func>
 800b562:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b566:	6005      	str	r5, [r0, #0]
 800b568:	60c5      	str	r5, [r0, #12]
 800b56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b56c:	6819      	ldr	r1, [r3, #0]
 800b56e:	b151      	cbz	r1, 800b586 <_dtoa_r+0x5e>
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	604a      	str	r2, [r1, #4]
 800b574:	2301      	movs	r3, #1
 800b576:	4093      	lsls	r3, r2
 800b578:	608b      	str	r3, [r1, #8]
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fe0e 	bl	800c19c <_Bfree>
 800b580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	1e3b      	subs	r3, r7, #0
 800b588:	bfaa      	itet	ge
 800b58a:	2300      	movge	r3, #0
 800b58c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b590:	f8c8 3000 	strge.w	r3, [r8]
 800b594:	4b9a      	ldr	r3, [pc, #616]	; (800b800 <_dtoa_r+0x2d8>)
 800b596:	bfbc      	itt	lt
 800b598:	2201      	movlt	r2, #1
 800b59a:	f8c8 2000 	strlt.w	r2, [r8]
 800b59e:	ea33 030b 	bics.w	r3, r3, fp
 800b5a2:	d11b      	bne.n	800b5dc <_dtoa_r+0xb4>
 800b5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5b0:	4333      	orrs	r3, r6
 800b5b2:	f000 8592 	beq.w	800c0da <_dtoa_r+0xbb2>
 800b5b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5b8:	b963      	cbnz	r3, 800b5d4 <_dtoa_r+0xac>
 800b5ba:	4b92      	ldr	r3, [pc, #584]	; (800b804 <_dtoa_r+0x2dc>)
 800b5bc:	e022      	b.n	800b604 <_dtoa_r+0xdc>
 800b5be:	4b92      	ldr	r3, [pc, #584]	; (800b808 <_dtoa_r+0x2e0>)
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	9801      	ldr	r0, [sp, #4]
 800b5ca:	b013      	add	sp, #76	; 0x4c
 800b5cc:	ecbd 8b04 	vpop	{d8-d9}
 800b5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d4:	4b8b      	ldr	r3, [pc, #556]	; (800b804 <_dtoa_r+0x2dc>)
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	3303      	adds	r3, #3
 800b5da:	e7f3      	b.n	800b5c4 <_dtoa_r+0x9c>
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	4659      	mov	r1, fp
 800b5e4:	f7f5 fa98 	bl	8000b18 <__aeabi_dcmpeq>
 800b5e8:	ec4b ab19 	vmov	d9, sl, fp
 800b5ec:	4680      	mov	r8, r0
 800b5ee:	b158      	cbz	r0, 800b608 <_dtoa_r+0xe0>
 800b5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	6013      	str	r3, [r2, #0]
 800b5f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 856b 	beq.w	800c0d4 <_dtoa_r+0xbac>
 800b5fe:	4883      	ldr	r0, [pc, #524]	; (800b80c <_dtoa_r+0x2e4>)
 800b600:	6018      	str	r0, [r3, #0]
 800b602:	1e43      	subs	r3, r0, #1
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	e7df      	b.n	800b5c8 <_dtoa_r+0xa0>
 800b608:	ec4b ab10 	vmov	d0, sl, fp
 800b60c:	aa10      	add	r2, sp, #64	; 0x40
 800b60e:	a911      	add	r1, sp, #68	; 0x44
 800b610:	4620      	mov	r0, r4
 800b612:	f001 f8ab 	bl	800c76c <__d2b>
 800b616:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b61a:	ee08 0a10 	vmov	s16, r0
 800b61e:	2d00      	cmp	r5, #0
 800b620:	f000 8084 	beq.w	800b72c <_dtoa_r+0x204>
 800b624:	ee19 3a90 	vmov	r3, s19
 800b628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b62c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b630:	4656      	mov	r6, sl
 800b632:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b63a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b63e:	4b74      	ldr	r3, [pc, #464]	; (800b810 <_dtoa_r+0x2e8>)
 800b640:	2200      	movs	r2, #0
 800b642:	4630      	mov	r0, r6
 800b644:	4639      	mov	r1, r7
 800b646:	f7f4 fe47 	bl	80002d8 <__aeabi_dsub>
 800b64a:	a365      	add	r3, pc, #404	; (adr r3, 800b7e0 <_dtoa_r+0x2b8>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fffa 	bl	8000648 <__aeabi_dmul>
 800b654:	a364      	add	r3, pc, #400	; (adr r3, 800b7e8 <_dtoa_r+0x2c0>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f4 fe3f 	bl	80002dc <__adddf3>
 800b65e:	4606      	mov	r6, r0
 800b660:	4628      	mov	r0, r5
 800b662:	460f      	mov	r7, r1
 800b664:	f7f4 ff86 	bl	8000574 <__aeabi_i2d>
 800b668:	a361      	add	r3, pc, #388	; (adr r3, 800b7f0 <_dtoa_r+0x2c8>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f4 ffeb 	bl	8000648 <__aeabi_dmul>
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	4630      	mov	r0, r6
 800b678:	4639      	mov	r1, r7
 800b67a:	f7f4 fe2f 	bl	80002dc <__adddf3>
 800b67e:	4606      	mov	r6, r0
 800b680:	460f      	mov	r7, r1
 800b682:	f7f5 fa91 	bl	8000ba8 <__aeabi_d2iz>
 800b686:	2200      	movs	r2, #0
 800b688:	9000      	str	r0, [sp, #0]
 800b68a:	2300      	movs	r3, #0
 800b68c:	4630      	mov	r0, r6
 800b68e:	4639      	mov	r1, r7
 800b690:	f7f5 fa4c 	bl	8000b2c <__aeabi_dcmplt>
 800b694:	b150      	cbz	r0, 800b6ac <_dtoa_r+0x184>
 800b696:	9800      	ldr	r0, [sp, #0]
 800b698:	f7f4 ff6c 	bl	8000574 <__aeabi_i2d>
 800b69c:	4632      	mov	r2, r6
 800b69e:	463b      	mov	r3, r7
 800b6a0:	f7f5 fa3a 	bl	8000b18 <__aeabi_dcmpeq>
 800b6a4:	b910      	cbnz	r0, 800b6ac <_dtoa_r+0x184>
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	9b00      	ldr	r3, [sp, #0]
 800b6ae:	2b16      	cmp	r3, #22
 800b6b0:	d85a      	bhi.n	800b768 <_dtoa_r+0x240>
 800b6b2:	9a00      	ldr	r2, [sp, #0]
 800b6b4:	4b57      	ldr	r3, [pc, #348]	; (800b814 <_dtoa_r+0x2ec>)
 800b6b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	ec51 0b19 	vmov	r0, r1, d9
 800b6c2:	f7f5 fa33 	bl	8000b2c <__aeabi_dcmplt>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d050      	beq.n	800b76c <_dtoa_r+0x244>
 800b6ca:	9b00      	ldr	r3, [sp, #0]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6d6:	1b5d      	subs	r5, r3, r5
 800b6d8:	1e6b      	subs	r3, r5, #1
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	bf45      	ittet	mi
 800b6de:	f1c5 0301 	rsbmi	r3, r5, #1
 800b6e2:	9304      	strmi	r3, [sp, #16]
 800b6e4:	2300      	movpl	r3, #0
 800b6e6:	2300      	movmi	r3, #0
 800b6e8:	bf4c      	ite	mi
 800b6ea:	9305      	strmi	r3, [sp, #20]
 800b6ec:	9304      	strpl	r3, [sp, #16]
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	db3d      	blt.n	800b770 <_dtoa_r+0x248>
 800b6f4:	9b05      	ldr	r3, [sp, #20]
 800b6f6:	9a00      	ldr	r2, [sp, #0]
 800b6f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6fa:	4413      	add	r3, r2
 800b6fc:	9305      	str	r3, [sp, #20]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9307      	str	r3, [sp, #28]
 800b702:	9b06      	ldr	r3, [sp, #24]
 800b704:	2b09      	cmp	r3, #9
 800b706:	f200 8089 	bhi.w	800b81c <_dtoa_r+0x2f4>
 800b70a:	2b05      	cmp	r3, #5
 800b70c:	bfc4      	itt	gt
 800b70e:	3b04      	subgt	r3, #4
 800b710:	9306      	strgt	r3, [sp, #24]
 800b712:	9b06      	ldr	r3, [sp, #24]
 800b714:	f1a3 0302 	sub.w	r3, r3, #2
 800b718:	bfcc      	ite	gt
 800b71a:	2500      	movgt	r5, #0
 800b71c:	2501      	movle	r5, #1
 800b71e:	2b03      	cmp	r3, #3
 800b720:	f200 8087 	bhi.w	800b832 <_dtoa_r+0x30a>
 800b724:	e8df f003 	tbb	[pc, r3]
 800b728:	59383a2d 	.word	0x59383a2d
 800b72c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b730:	441d      	add	r5, r3
 800b732:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b736:	2b20      	cmp	r3, #32
 800b738:	bfc1      	itttt	gt
 800b73a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b73e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b742:	fa0b f303 	lslgt.w	r3, fp, r3
 800b746:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b74a:	bfda      	itte	le
 800b74c:	f1c3 0320 	rsble	r3, r3, #32
 800b750:	fa06 f003 	lslle.w	r0, r6, r3
 800b754:	4318      	orrgt	r0, r3
 800b756:	f7f4 fefd 	bl	8000554 <__aeabi_ui2d>
 800b75a:	2301      	movs	r3, #1
 800b75c:	4606      	mov	r6, r0
 800b75e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b762:	3d01      	subs	r5, #1
 800b764:	930e      	str	r3, [sp, #56]	; 0x38
 800b766:	e76a      	b.n	800b63e <_dtoa_r+0x116>
 800b768:	2301      	movs	r3, #1
 800b76a:	e7b2      	b.n	800b6d2 <_dtoa_r+0x1aa>
 800b76c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b76e:	e7b1      	b.n	800b6d4 <_dtoa_r+0x1ac>
 800b770:	9b04      	ldr	r3, [sp, #16]
 800b772:	9a00      	ldr	r2, [sp, #0]
 800b774:	1a9b      	subs	r3, r3, r2
 800b776:	9304      	str	r3, [sp, #16]
 800b778:	4253      	negs	r3, r2
 800b77a:	9307      	str	r3, [sp, #28]
 800b77c:	2300      	movs	r3, #0
 800b77e:	930a      	str	r3, [sp, #40]	; 0x28
 800b780:	e7bf      	b.n	800b702 <_dtoa_r+0x1da>
 800b782:	2300      	movs	r3, #0
 800b784:	9308      	str	r3, [sp, #32]
 800b786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	dc55      	bgt.n	800b838 <_dtoa_r+0x310>
 800b78c:	2301      	movs	r3, #1
 800b78e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b792:	461a      	mov	r2, r3
 800b794:	9209      	str	r2, [sp, #36]	; 0x24
 800b796:	e00c      	b.n	800b7b2 <_dtoa_r+0x28a>
 800b798:	2301      	movs	r3, #1
 800b79a:	e7f3      	b.n	800b784 <_dtoa_r+0x25c>
 800b79c:	2300      	movs	r3, #0
 800b79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a0:	9308      	str	r3, [sp, #32]
 800b7a2:	9b00      	ldr	r3, [sp, #0]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	9302      	str	r3, [sp, #8]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	9303      	str	r3, [sp, #12]
 800b7ae:	bfb8      	it	lt
 800b7b0:	2301      	movlt	r3, #1
 800b7b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	6042      	str	r2, [r0, #4]
 800b7b8:	2204      	movs	r2, #4
 800b7ba:	f102 0614 	add.w	r6, r2, #20
 800b7be:	429e      	cmp	r6, r3
 800b7c0:	6841      	ldr	r1, [r0, #4]
 800b7c2:	d93d      	bls.n	800b840 <_dtoa_r+0x318>
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 fca9 	bl	800c11c <_Balloc>
 800b7ca:	9001      	str	r0, [sp, #4]
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d13b      	bne.n	800b848 <_dtoa_r+0x320>
 800b7d0:	4b11      	ldr	r3, [pc, #68]	; (800b818 <_dtoa_r+0x2f0>)
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b7d8:	e6c0      	b.n	800b55c <_dtoa_r+0x34>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e7df      	b.n	800b79e <_dtoa_r+0x276>
 800b7de:	bf00      	nop
 800b7e0:	636f4361 	.word	0x636f4361
 800b7e4:	3fd287a7 	.word	0x3fd287a7
 800b7e8:	8b60c8b3 	.word	0x8b60c8b3
 800b7ec:	3fc68a28 	.word	0x3fc68a28
 800b7f0:	509f79fb 	.word	0x509f79fb
 800b7f4:	3fd34413 	.word	0x3fd34413
 800b7f8:	0800ee09 	.word	0x0800ee09
 800b7fc:	0800ee20 	.word	0x0800ee20
 800b800:	7ff00000 	.word	0x7ff00000
 800b804:	0800ee05 	.word	0x0800ee05
 800b808:	0800edfc 	.word	0x0800edfc
 800b80c:	0800edd9 	.word	0x0800edd9
 800b810:	3ff80000 	.word	0x3ff80000
 800b814:	0800ef10 	.word	0x0800ef10
 800b818:	0800ee7b 	.word	0x0800ee7b
 800b81c:	2501      	movs	r5, #1
 800b81e:	2300      	movs	r3, #0
 800b820:	9306      	str	r3, [sp, #24]
 800b822:	9508      	str	r5, [sp, #32]
 800b824:	f04f 33ff 	mov.w	r3, #4294967295
 800b828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b82c:	2200      	movs	r2, #0
 800b82e:	2312      	movs	r3, #18
 800b830:	e7b0      	b.n	800b794 <_dtoa_r+0x26c>
 800b832:	2301      	movs	r3, #1
 800b834:	9308      	str	r3, [sp, #32]
 800b836:	e7f5      	b.n	800b824 <_dtoa_r+0x2fc>
 800b838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b83e:	e7b8      	b.n	800b7b2 <_dtoa_r+0x28a>
 800b840:	3101      	adds	r1, #1
 800b842:	6041      	str	r1, [r0, #4]
 800b844:	0052      	lsls	r2, r2, #1
 800b846:	e7b8      	b.n	800b7ba <_dtoa_r+0x292>
 800b848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84a:	9a01      	ldr	r2, [sp, #4]
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	2b0e      	cmp	r3, #14
 800b852:	f200 809d 	bhi.w	800b990 <_dtoa_r+0x468>
 800b856:	2d00      	cmp	r5, #0
 800b858:	f000 809a 	beq.w	800b990 <_dtoa_r+0x468>
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dd32      	ble.n	800b8c8 <_dtoa_r+0x3a0>
 800b862:	4ab7      	ldr	r2, [pc, #732]	; (800bb40 <_dtoa_r+0x618>)
 800b864:	f003 030f 	and.w	r3, r3, #15
 800b868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b86c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b870:	9b00      	ldr	r3, [sp, #0]
 800b872:	05d8      	lsls	r0, r3, #23
 800b874:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b878:	d516      	bpl.n	800b8a8 <_dtoa_r+0x380>
 800b87a:	4bb2      	ldr	r3, [pc, #712]	; (800bb44 <_dtoa_r+0x61c>)
 800b87c:	ec51 0b19 	vmov	r0, r1, d9
 800b880:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b884:	f7f5 f80a 	bl	800089c <__aeabi_ddiv>
 800b888:	f007 070f 	and.w	r7, r7, #15
 800b88c:	4682      	mov	sl, r0
 800b88e:	468b      	mov	fp, r1
 800b890:	2503      	movs	r5, #3
 800b892:	4eac      	ldr	r6, [pc, #688]	; (800bb44 <_dtoa_r+0x61c>)
 800b894:	b957      	cbnz	r7, 800b8ac <_dtoa_r+0x384>
 800b896:	4642      	mov	r2, r8
 800b898:	464b      	mov	r3, r9
 800b89a:	4650      	mov	r0, sl
 800b89c:	4659      	mov	r1, fp
 800b89e:	f7f4 fffd 	bl	800089c <__aeabi_ddiv>
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	468b      	mov	fp, r1
 800b8a6:	e028      	b.n	800b8fa <_dtoa_r+0x3d2>
 800b8a8:	2502      	movs	r5, #2
 800b8aa:	e7f2      	b.n	800b892 <_dtoa_r+0x36a>
 800b8ac:	07f9      	lsls	r1, r7, #31
 800b8ae:	d508      	bpl.n	800b8c2 <_dtoa_r+0x39a>
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b8b8:	f7f4 fec6 	bl	8000648 <__aeabi_dmul>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	4680      	mov	r8, r0
 800b8c0:	4689      	mov	r9, r1
 800b8c2:	107f      	asrs	r7, r7, #1
 800b8c4:	3608      	adds	r6, #8
 800b8c6:	e7e5      	b.n	800b894 <_dtoa_r+0x36c>
 800b8c8:	f000 809b 	beq.w	800ba02 <_dtoa_r+0x4da>
 800b8cc:	9b00      	ldr	r3, [sp, #0]
 800b8ce:	4f9d      	ldr	r7, [pc, #628]	; (800bb44 <_dtoa_r+0x61c>)
 800b8d0:	425e      	negs	r6, r3
 800b8d2:	4b9b      	ldr	r3, [pc, #620]	; (800bb40 <_dtoa_r+0x618>)
 800b8d4:	f006 020f 	and.w	r2, r6, #15
 800b8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	ec51 0b19 	vmov	r0, r1, d9
 800b8e4:	f7f4 feb0 	bl	8000648 <__aeabi_dmul>
 800b8e8:	1136      	asrs	r6, r6, #4
 800b8ea:	4682      	mov	sl, r0
 800b8ec:	468b      	mov	fp, r1
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2502      	movs	r5, #2
 800b8f2:	2e00      	cmp	r6, #0
 800b8f4:	d17a      	bne.n	800b9ec <_dtoa_r+0x4c4>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1d3      	bne.n	800b8a2 <_dtoa_r+0x37a>
 800b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8082 	beq.w	800ba06 <_dtoa_r+0x4de>
 800b902:	4b91      	ldr	r3, [pc, #580]	; (800bb48 <_dtoa_r+0x620>)
 800b904:	2200      	movs	r2, #0
 800b906:	4650      	mov	r0, sl
 800b908:	4659      	mov	r1, fp
 800b90a:	f7f5 f90f 	bl	8000b2c <__aeabi_dcmplt>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d079      	beq.n	800ba06 <_dtoa_r+0x4de>
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d076      	beq.n	800ba06 <_dtoa_r+0x4de>
 800b918:	9b02      	ldr	r3, [sp, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	dd36      	ble.n	800b98c <_dtoa_r+0x464>
 800b91e:	9b00      	ldr	r3, [sp, #0]
 800b920:	4650      	mov	r0, sl
 800b922:	4659      	mov	r1, fp
 800b924:	1e5f      	subs	r7, r3, #1
 800b926:	2200      	movs	r2, #0
 800b928:	4b88      	ldr	r3, [pc, #544]	; (800bb4c <_dtoa_r+0x624>)
 800b92a:	f7f4 fe8d 	bl	8000648 <__aeabi_dmul>
 800b92e:	9e02      	ldr	r6, [sp, #8]
 800b930:	4682      	mov	sl, r0
 800b932:	468b      	mov	fp, r1
 800b934:	3501      	adds	r5, #1
 800b936:	4628      	mov	r0, r5
 800b938:	f7f4 fe1c 	bl	8000574 <__aeabi_i2d>
 800b93c:	4652      	mov	r2, sl
 800b93e:	465b      	mov	r3, fp
 800b940:	f7f4 fe82 	bl	8000648 <__aeabi_dmul>
 800b944:	4b82      	ldr	r3, [pc, #520]	; (800bb50 <_dtoa_r+0x628>)
 800b946:	2200      	movs	r2, #0
 800b948:	f7f4 fcc8 	bl	80002dc <__adddf3>
 800b94c:	46d0      	mov	r8, sl
 800b94e:	46d9      	mov	r9, fp
 800b950:	4682      	mov	sl, r0
 800b952:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b956:	2e00      	cmp	r6, #0
 800b958:	d158      	bne.n	800ba0c <_dtoa_r+0x4e4>
 800b95a:	4b7e      	ldr	r3, [pc, #504]	; (800bb54 <_dtoa_r+0x62c>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fcb9 	bl	80002d8 <__aeabi_dsub>
 800b966:	4652      	mov	r2, sl
 800b968:	465b      	mov	r3, fp
 800b96a:	4680      	mov	r8, r0
 800b96c:	4689      	mov	r9, r1
 800b96e:	f7f5 f8fb 	bl	8000b68 <__aeabi_dcmpgt>
 800b972:	2800      	cmp	r0, #0
 800b974:	f040 8295 	bne.w	800bea2 <_dtoa_r+0x97a>
 800b978:	4652      	mov	r2, sl
 800b97a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b97e:	4640      	mov	r0, r8
 800b980:	4649      	mov	r1, r9
 800b982:	f7f5 f8d3 	bl	8000b2c <__aeabi_dcmplt>
 800b986:	2800      	cmp	r0, #0
 800b988:	f040 8289 	bne.w	800be9e <_dtoa_r+0x976>
 800b98c:	ec5b ab19 	vmov	sl, fp, d9
 800b990:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b992:	2b00      	cmp	r3, #0
 800b994:	f2c0 8148 	blt.w	800bc28 <_dtoa_r+0x700>
 800b998:	9a00      	ldr	r2, [sp, #0]
 800b99a:	2a0e      	cmp	r2, #14
 800b99c:	f300 8144 	bgt.w	800bc28 <_dtoa_r+0x700>
 800b9a0:	4b67      	ldr	r3, [pc, #412]	; (800bb40 <_dtoa_r+0x618>)
 800b9a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f280 80d5 	bge.w	800bb5c <_dtoa_r+0x634>
 800b9b2:	9b03      	ldr	r3, [sp, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f300 80d1 	bgt.w	800bb5c <_dtoa_r+0x634>
 800b9ba:	f040 826f 	bne.w	800be9c <_dtoa_r+0x974>
 800b9be:	4b65      	ldr	r3, [pc, #404]	; (800bb54 <_dtoa_r+0x62c>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f4 fe3f 	bl	8000648 <__aeabi_dmul>
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	f7f5 f8c1 	bl	8000b54 <__aeabi_dcmpge>
 800b9d2:	9e03      	ldr	r6, [sp, #12]
 800b9d4:	4637      	mov	r7, r6
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f040 8245 	bne.w	800be66 <_dtoa_r+0x93e>
 800b9dc:	9d01      	ldr	r5, [sp, #4]
 800b9de:	2331      	movs	r3, #49	; 0x31
 800b9e0:	f805 3b01 	strb.w	r3, [r5], #1
 800b9e4:	9b00      	ldr	r3, [sp, #0]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	e240      	b.n	800be6e <_dtoa_r+0x946>
 800b9ec:	07f2      	lsls	r2, r6, #31
 800b9ee:	d505      	bpl.n	800b9fc <_dtoa_r+0x4d4>
 800b9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9f4:	f7f4 fe28 	bl	8000648 <__aeabi_dmul>
 800b9f8:	3501      	adds	r5, #1
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	1076      	asrs	r6, r6, #1
 800b9fe:	3708      	adds	r7, #8
 800ba00:	e777      	b.n	800b8f2 <_dtoa_r+0x3ca>
 800ba02:	2502      	movs	r5, #2
 800ba04:	e779      	b.n	800b8fa <_dtoa_r+0x3d2>
 800ba06:	9f00      	ldr	r7, [sp, #0]
 800ba08:	9e03      	ldr	r6, [sp, #12]
 800ba0a:	e794      	b.n	800b936 <_dtoa_r+0x40e>
 800ba0c:	9901      	ldr	r1, [sp, #4]
 800ba0e:	4b4c      	ldr	r3, [pc, #304]	; (800bb40 <_dtoa_r+0x618>)
 800ba10:	4431      	add	r1, r6
 800ba12:	910d      	str	r1, [sp, #52]	; 0x34
 800ba14:	9908      	ldr	r1, [sp, #32]
 800ba16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	d043      	beq.n	800baaa <_dtoa_r+0x582>
 800ba22:	494d      	ldr	r1, [pc, #308]	; (800bb58 <_dtoa_r+0x630>)
 800ba24:	2000      	movs	r0, #0
 800ba26:	f7f4 ff39 	bl	800089c <__aeabi_ddiv>
 800ba2a:	4652      	mov	r2, sl
 800ba2c:	465b      	mov	r3, fp
 800ba2e:	f7f4 fc53 	bl	80002d8 <__aeabi_dsub>
 800ba32:	9d01      	ldr	r5, [sp, #4]
 800ba34:	4682      	mov	sl, r0
 800ba36:	468b      	mov	fp, r1
 800ba38:	4649      	mov	r1, r9
 800ba3a:	4640      	mov	r0, r8
 800ba3c:	f7f5 f8b4 	bl	8000ba8 <__aeabi_d2iz>
 800ba40:	4606      	mov	r6, r0
 800ba42:	f7f4 fd97 	bl	8000574 <__aeabi_i2d>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	f7f4 fc43 	bl	80002d8 <__aeabi_dsub>
 800ba52:	3630      	adds	r6, #48	; 0x30
 800ba54:	f805 6b01 	strb.w	r6, [r5], #1
 800ba58:	4652      	mov	r2, sl
 800ba5a:	465b      	mov	r3, fp
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	4689      	mov	r9, r1
 800ba60:	f7f5 f864 	bl	8000b2c <__aeabi_dcmplt>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d163      	bne.n	800bb30 <_dtoa_r+0x608>
 800ba68:	4642      	mov	r2, r8
 800ba6a:	464b      	mov	r3, r9
 800ba6c:	4936      	ldr	r1, [pc, #216]	; (800bb48 <_dtoa_r+0x620>)
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f7f4 fc32 	bl	80002d8 <__aeabi_dsub>
 800ba74:	4652      	mov	r2, sl
 800ba76:	465b      	mov	r3, fp
 800ba78:	f7f5 f858 	bl	8000b2c <__aeabi_dcmplt>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f040 80b5 	bne.w	800bbec <_dtoa_r+0x6c4>
 800ba82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba84:	429d      	cmp	r5, r3
 800ba86:	d081      	beq.n	800b98c <_dtoa_r+0x464>
 800ba88:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <_dtoa_r+0x624>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4650      	mov	r0, sl
 800ba8e:	4659      	mov	r1, fp
 800ba90:	f7f4 fdda 	bl	8000648 <__aeabi_dmul>
 800ba94:	4b2d      	ldr	r3, [pc, #180]	; (800bb4c <_dtoa_r+0x624>)
 800ba96:	4682      	mov	sl, r0
 800ba98:	468b      	mov	fp, r1
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f7f4 fdd2 	bl	8000648 <__aeabi_dmul>
 800baa4:	4680      	mov	r8, r0
 800baa6:	4689      	mov	r9, r1
 800baa8:	e7c6      	b.n	800ba38 <_dtoa_r+0x510>
 800baaa:	4650      	mov	r0, sl
 800baac:	4659      	mov	r1, fp
 800baae:	f7f4 fdcb 	bl	8000648 <__aeabi_dmul>
 800bab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bab4:	9d01      	ldr	r5, [sp, #4]
 800bab6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bab8:	4682      	mov	sl, r0
 800baba:	468b      	mov	fp, r1
 800babc:	4649      	mov	r1, r9
 800babe:	4640      	mov	r0, r8
 800bac0:	f7f5 f872 	bl	8000ba8 <__aeabi_d2iz>
 800bac4:	4606      	mov	r6, r0
 800bac6:	f7f4 fd55 	bl	8000574 <__aeabi_i2d>
 800baca:	3630      	adds	r6, #48	; 0x30
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4640      	mov	r0, r8
 800bad2:	4649      	mov	r1, r9
 800bad4:	f7f4 fc00 	bl	80002d8 <__aeabi_dsub>
 800bad8:	f805 6b01 	strb.w	r6, [r5], #1
 800badc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bade:	429d      	cmp	r5, r3
 800bae0:	4680      	mov	r8, r0
 800bae2:	4689      	mov	r9, r1
 800bae4:	f04f 0200 	mov.w	r2, #0
 800bae8:	d124      	bne.n	800bb34 <_dtoa_r+0x60c>
 800baea:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <_dtoa_r+0x630>)
 800baec:	4650      	mov	r0, sl
 800baee:	4659      	mov	r1, fp
 800baf0:	f7f4 fbf4 	bl	80002dc <__adddf3>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4640      	mov	r0, r8
 800bafa:	4649      	mov	r1, r9
 800bafc:	f7f5 f834 	bl	8000b68 <__aeabi_dcmpgt>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d173      	bne.n	800bbec <_dtoa_r+0x6c4>
 800bb04:	4652      	mov	r2, sl
 800bb06:	465b      	mov	r3, fp
 800bb08:	4913      	ldr	r1, [pc, #76]	; (800bb58 <_dtoa_r+0x630>)
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	f7f4 fbe4 	bl	80002d8 <__aeabi_dsub>
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4640      	mov	r0, r8
 800bb16:	4649      	mov	r1, r9
 800bb18:	f7f5 f808 	bl	8000b2c <__aeabi_dcmplt>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	f43f af35 	beq.w	800b98c <_dtoa_r+0x464>
 800bb22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb24:	1e6b      	subs	r3, r5, #1
 800bb26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb2c:	2b30      	cmp	r3, #48	; 0x30
 800bb2e:	d0f8      	beq.n	800bb22 <_dtoa_r+0x5fa>
 800bb30:	9700      	str	r7, [sp, #0]
 800bb32:	e049      	b.n	800bbc8 <_dtoa_r+0x6a0>
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <_dtoa_r+0x624>)
 800bb36:	f7f4 fd87 	bl	8000648 <__aeabi_dmul>
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	4689      	mov	r9, r1
 800bb3e:	e7bd      	b.n	800babc <_dtoa_r+0x594>
 800bb40:	0800ef10 	.word	0x0800ef10
 800bb44:	0800eee8 	.word	0x0800eee8
 800bb48:	3ff00000 	.word	0x3ff00000
 800bb4c:	40240000 	.word	0x40240000
 800bb50:	401c0000 	.word	0x401c0000
 800bb54:	40140000 	.word	0x40140000
 800bb58:	3fe00000 	.word	0x3fe00000
 800bb5c:	9d01      	ldr	r5, [sp, #4]
 800bb5e:	4656      	mov	r6, sl
 800bb60:	465f      	mov	r7, fp
 800bb62:	4642      	mov	r2, r8
 800bb64:	464b      	mov	r3, r9
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fe97 	bl	800089c <__aeabi_ddiv>
 800bb6e:	f7f5 f81b 	bl	8000ba8 <__aeabi_d2iz>
 800bb72:	4682      	mov	sl, r0
 800bb74:	f7f4 fcfe 	bl	8000574 <__aeabi_i2d>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	f7f4 fd64 	bl	8000648 <__aeabi_dmul>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4630      	mov	r0, r6
 800bb86:	4639      	mov	r1, r7
 800bb88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb8c:	f7f4 fba4 	bl	80002d8 <__aeabi_dsub>
 800bb90:	f805 6b01 	strb.w	r6, [r5], #1
 800bb94:	9e01      	ldr	r6, [sp, #4]
 800bb96:	9f03      	ldr	r7, [sp, #12]
 800bb98:	1bae      	subs	r6, r5, r6
 800bb9a:	42b7      	cmp	r7, r6
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	d135      	bne.n	800bc0e <_dtoa_r+0x6e6>
 800bba2:	f7f4 fb9b 	bl	80002dc <__adddf3>
 800bba6:	4642      	mov	r2, r8
 800bba8:	464b      	mov	r3, r9
 800bbaa:	4606      	mov	r6, r0
 800bbac:	460f      	mov	r7, r1
 800bbae:	f7f4 ffdb 	bl	8000b68 <__aeabi_dcmpgt>
 800bbb2:	b9d0      	cbnz	r0, 800bbea <_dtoa_r+0x6c2>
 800bbb4:	4642      	mov	r2, r8
 800bbb6:	464b      	mov	r3, r9
 800bbb8:	4630      	mov	r0, r6
 800bbba:	4639      	mov	r1, r7
 800bbbc:	f7f4 ffac 	bl	8000b18 <__aeabi_dcmpeq>
 800bbc0:	b110      	cbz	r0, 800bbc8 <_dtoa_r+0x6a0>
 800bbc2:	f01a 0f01 	tst.w	sl, #1
 800bbc6:	d110      	bne.n	800bbea <_dtoa_r+0x6c2>
 800bbc8:	4620      	mov	r0, r4
 800bbca:	ee18 1a10 	vmov	r1, s16
 800bbce:	f000 fae5 	bl	800c19c <_Bfree>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9800      	ldr	r0, [sp, #0]
 800bbd6:	702b      	strb	r3, [r5, #0]
 800bbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbda:	3001      	adds	r0, #1
 800bbdc:	6018      	str	r0, [r3, #0]
 800bbde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f43f acf1 	beq.w	800b5c8 <_dtoa_r+0xa0>
 800bbe6:	601d      	str	r5, [r3, #0]
 800bbe8:	e4ee      	b.n	800b5c8 <_dtoa_r+0xa0>
 800bbea:	9f00      	ldr	r7, [sp, #0]
 800bbec:	462b      	mov	r3, r5
 800bbee:	461d      	mov	r5, r3
 800bbf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbf4:	2a39      	cmp	r2, #57	; 0x39
 800bbf6:	d106      	bne.n	800bc06 <_dtoa_r+0x6de>
 800bbf8:	9a01      	ldr	r2, [sp, #4]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d1f7      	bne.n	800bbee <_dtoa_r+0x6c6>
 800bbfe:	9901      	ldr	r1, [sp, #4]
 800bc00:	2230      	movs	r2, #48	; 0x30
 800bc02:	3701      	adds	r7, #1
 800bc04:	700a      	strb	r2, [r1, #0]
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	3201      	adds	r2, #1
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e790      	b.n	800bb30 <_dtoa_r+0x608>
 800bc0e:	4ba6      	ldr	r3, [pc, #664]	; (800bea8 <_dtoa_r+0x980>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	f7f4 fd19 	bl	8000648 <__aeabi_dmul>
 800bc16:	2200      	movs	r2, #0
 800bc18:	2300      	movs	r3, #0
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	f7f4 ff7b 	bl	8000b18 <__aeabi_dcmpeq>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d09d      	beq.n	800bb62 <_dtoa_r+0x63a>
 800bc26:	e7cf      	b.n	800bbc8 <_dtoa_r+0x6a0>
 800bc28:	9a08      	ldr	r2, [sp, #32]
 800bc2a:	2a00      	cmp	r2, #0
 800bc2c:	f000 80d7 	beq.w	800bdde <_dtoa_r+0x8b6>
 800bc30:	9a06      	ldr	r2, [sp, #24]
 800bc32:	2a01      	cmp	r2, #1
 800bc34:	f300 80ba 	bgt.w	800bdac <_dtoa_r+0x884>
 800bc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc3a:	2a00      	cmp	r2, #0
 800bc3c:	f000 80b2 	beq.w	800bda4 <_dtoa_r+0x87c>
 800bc40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc44:	9e07      	ldr	r6, [sp, #28]
 800bc46:	9d04      	ldr	r5, [sp, #16]
 800bc48:	9a04      	ldr	r2, [sp, #16]
 800bc4a:	441a      	add	r2, r3
 800bc4c:	9204      	str	r2, [sp, #16]
 800bc4e:	9a05      	ldr	r2, [sp, #20]
 800bc50:	2101      	movs	r1, #1
 800bc52:	441a      	add	r2, r3
 800bc54:	4620      	mov	r0, r4
 800bc56:	9205      	str	r2, [sp, #20]
 800bc58:	f000 fb58 	bl	800c30c <__i2b>
 800bc5c:	4607      	mov	r7, r0
 800bc5e:	2d00      	cmp	r5, #0
 800bc60:	dd0c      	ble.n	800bc7c <_dtoa_r+0x754>
 800bc62:	9b05      	ldr	r3, [sp, #20]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	dd09      	ble.n	800bc7c <_dtoa_r+0x754>
 800bc68:	42ab      	cmp	r3, r5
 800bc6a:	9a04      	ldr	r2, [sp, #16]
 800bc6c:	bfa8      	it	ge
 800bc6e:	462b      	movge	r3, r5
 800bc70:	1ad2      	subs	r2, r2, r3
 800bc72:	9204      	str	r2, [sp, #16]
 800bc74:	9a05      	ldr	r2, [sp, #20]
 800bc76:	1aed      	subs	r5, r5, r3
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	9b07      	ldr	r3, [sp, #28]
 800bc7e:	b31b      	cbz	r3, 800bcc8 <_dtoa_r+0x7a0>
 800bc80:	9b08      	ldr	r3, [sp, #32]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f000 80af 	beq.w	800bde6 <_dtoa_r+0x8be>
 800bc88:	2e00      	cmp	r6, #0
 800bc8a:	dd13      	ble.n	800bcb4 <_dtoa_r+0x78c>
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	4632      	mov	r2, r6
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fbfb 	bl	800c48c <__pow5mult>
 800bc96:	ee18 2a10 	vmov	r2, s16
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	4607      	mov	r7, r0
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 fb4a 	bl	800c338 <__multiply>
 800bca4:	ee18 1a10 	vmov	r1, s16
 800bca8:	4680      	mov	r8, r0
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 fa76 	bl	800c19c <_Bfree>
 800bcb0:	ee08 8a10 	vmov	s16, r8
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	1b9a      	subs	r2, r3, r6
 800bcb8:	d006      	beq.n	800bcc8 <_dtoa_r+0x7a0>
 800bcba:	ee18 1a10 	vmov	r1, s16
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 fbe4 	bl	800c48c <__pow5mult>
 800bcc4:	ee08 0a10 	vmov	s16, r0
 800bcc8:	2101      	movs	r1, #1
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 fb1e 	bl	800c30c <__i2b>
 800bcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	f340 8088 	ble.w	800bdea <_dtoa_r+0x8c2>
 800bcda:	461a      	mov	r2, r3
 800bcdc:	4601      	mov	r1, r0
 800bcde:	4620      	mov	r0, r4
 800bce0:	f000 fbd4 	bl	800c48c <__pow5mult>
 800bce4:	9b06      	ldr	r3, [sp, #24]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	4606      	mov	r6, r0
 800bcea:	f340 8081 	ble.w	800bdf0 <_dtoa_r+0x8c8>
 800bcee:	f04f 0800 	mov.w	r8, #0
 800bcf2:	6933      	ldr	r3, [r6, #16]
 800bcf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bcf8:	6918      	ldr	r0, [r3, #16]
 800bcfa:	f000 fab7 	bl	800c26c <__hi0bits>
 800bcfe:	f1c0 0020 	rsb	r0, r0, #32
 800bd02:	9b05      	ldr	r3, [sp, #20]
 800bd04:	4418      	add	r0, r3
 800bd06:	f010 001f 	ands.w	r0, r0, #31
 800bd0a:	f000 8092 	beq.w	800be32 <_dtoa_r+0x90a>
 800bd0e:	f1c0 0320 	rsb	r3, r0, #32
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	f340 808a 	ble.w	800be2c <_dtoa_r+0x904>
 800bd18:	f1c0 001c 	rsb	r0, r0, #28
 800bd1c:	9b04      	ldr	r3, [sp, #16]
 800bd1e:	4403      	add	r3, r0
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9b05      	ldr	r3, [sp, #20]
 800bd24:	4403      	add	r3, r0
 800bd26:	4405      	add	r5, r0
 800bd28:	9305      	str	r3, [sp, #20]
 800bd2a:	9b04      	ldr	r3, [sp, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dd07      	ble.n	800bd40 <_dtoa_r+0x818>
 800bd30:	ee18 1a10 	vmov	r1, s16
 800bd34:	461a      	mov	r2, r3
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 fc02 	bl	800c540 <__lshift>
 800bd3c:	ee08 0a10 	vmov	s16, r0
 800bd40:	9b05      	ldr	r3, [sp, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	dd05      	ble.n	800bd52 <_dtoa_r+0x82a>
 800bd46:	4631      	mov	r1, r6
 800bd48:	461a      	mov	r2, r3
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fbf8 	bl	800c540 <__lshift>
 800bd50:	4606      	mov	r6, r0
 800bd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d06e      	beq.n	800be36 <_dtoa_r+0x90e>
 800bd58:	ee18 0a10 	vmov	r0, s16
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	f000 fc5f 	bl	800c620 <__mcmp>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	da67      	bge.n	800be36 <_dtoa_r+0x90e>
 800bd66:	9b00      	ldr	r3, [sp, #0]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	ee18 1a10 	vmov	r1, s16
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	220a      	movs	r2, #10
 800bd72:	2300      	movs	r3, #0
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 fa33 	bl	800c1e0 <__multadd>
 800bd7a:	9b08      	ldr	r3, [sp, #32]
 800bd7c:	ee08 0a10 	vmov	s16, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 81b1 	beq.w	800c0e8 <_dtoa_r+0xbc0>
 800bd86:	2300      	movs	r3, #0
 800bd88:	4639      	mov	r1, r7
 800bd8a:	220a      	movs	r2, #10
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f000 fa27 	bl	800c1e0 <__multadd>
 800bd92:	9b02      	ldr	r3, [sp, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	4607      	mov	r7, r0
 800bd98:	f300 808e 	bgt.w	800beb8 <_dtoa_r+0x990>
 800bd9c:	9b06      	ldr	r3, [sp, #24]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	dc51      	bgt.n	800be46 <_dtoa_r+0x91e>
 800bda2:	e089      	b.n	800beb8 <_dtoa_r+0x990>
 800bda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bda6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdaa:	e74b      	b.n	800bc44 <_dtoa_r+0x71c>
 800bdac:	9b03      	ldr	r3, [sp, #12]
 800bdae:	1e5e      	subs	r6, r3, #1
 800bdb0:	9b07      	ldr	r3, [sp, #28]
 800bdb2:	42b3      	cmp	r3, r6
 800bdb4:	bfbf      	itttt	lt
 800bdb6:	9b07      	ldrlt	r3, [sp, #28]
 800bdb8:	9607      	strlt	r6, [sp, #28]
 800bdba:	1af2      	sublt	r2, r6, r3
 800bdbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bdbe:	bfb6      	itet	lt
 800bdc0:	189b      	addlt	r3, r3, r2
 800bdc2:	1b9e      	subge	r6, r3, r6
 800bdc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	bfb8      	it	lt
 800bdca:	2600      	movlt	r6, #0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	bfb7      	itett	lt
 800bdd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bdd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bdd8:	1a9d      	sublt	r5, r3, r2
 800bdda:	2300      	movlt	r3, #0
 800bddc:	e734      	b.n	800bc48 <_dtoa_r+0x720>
 800bdde:	9e07      	ldr	r6, [sp, #28]
 800bde0:	9d04      	ldr	r5, [sp, #16]
 800bde2:	9f08      	ldr	r7, [sp, #32]
 800bde4:	e73b      	b.n	800bc5e <_dtoa_r+0x736>
 800bde6:	9a07      	ldr	r2, [sp, #28]
 800bde8:	e767      	b.n	800bcba <_dtoa_r+0x792>
 800bdea:	9b06      	ldr	r3, [sp, #24]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	dc18      	bgt.n	800be22 <_dtoa_r+0x8fa>
 800bdf0:	f1ba 0f00 	cmp.w	sl, #0
 800bdf4:	d115      	bne.n	800be22 <_dtoa_r+0x8fa>
 800bdf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdfa:	b993      	cbnz	r3, 800be22 <_dtoa_r+0x8fa>
 800bdfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be00:	0d1b      	lsrs	r3, r3, #20
 800be02:	051b      	lsls	r3, r3, #20
 800be04:	b183      	cbz	r3, 800be28 <_dtoa_r+0x900>
 800be06:	9b04      	ldr	r3, [sp, #16]
 800be08:	3301      	adds	r3, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	9b05      	ldr	r3, [sp, #20]
 800be0e:	3301      	adds	r3, #1
 800be10:	9305      	str	r3, [sp, #20]
 800be12:	f04f 0801 	mov.w	r8, #1
 800be16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f47f af6a 	bne.w	800bcf2 <_dtoa_r+0x7ca>
 800be1e:	2001      	movs	r0, #1
 800be20:	e76f      	b.n	800bd02 <_dtoa_r+0x7da>
 800be22:	f04f 0800 	mov.w	r8, #0
 800be26:	e7f6      	b.n	800be16 <_dtoa_r+0x8ee>
 800be28:	4698      	mov	r8, r3
 800be2a:	e7f4      	b.n	800be16 <_dtoa_r+0x8ee>
 800be2c:	f43f af7d 	beq.w	800bd2a <_dtoa_r+0x802>
 800be30:	4618      	mov	r0, r3
 800be32:	301c      	adds	r0, #28
 800be34:	e772      	b.n	800bd1c <_dtoa_r+0x7f4>
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	dc37      	bgt.n	800beac <_dtoa_r+0x984>
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	2b02      	cmp	r3, #2
 800be40:	dd34      	ble.n	800beac <_dtoa_r+0x984>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	9302      	str	r3, [sp, #8]
 800be46:	9b02      	ldr	r3, [sp, #8]
 800be48:	b96b      	cbnz	r3, 800be66 <_dtoa_r+0x93e>
 800be4a:	4631      	mov	r1, r6
 800be4c:	2205      	movs	r2, #5
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 f9c6 	bl	800c1e0 <__multadd>
 800be54:	4601      	mov	r1, r0
 800be56:	4606      	mov	r6, r0
 800be58:	ee18 0a10 	vmov	r0, s16
 800be5c:	f000 fbe0 	bl	800c620 <__mcmp>
 800be60:	2800      	cmp	r0, #0
 800be62:	f73f adbb 	bgt.w	800b9dc <_dtoa_r+0x4b4>
 800be66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be68:	9d01      	ldr	r5, [sp, #4]
 800be6a:	43db      	mvns	r3, r3
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	f04f 0800 	mov.w	r8, #0
 800be72:	4631      	mov	r1, r6
 800be74:	4620      	mov	r0, r4
 800be76:	f000 f991 	bl	800c19c <_Bfree>
 800be7a:	2f00      	cmp	r7, #0
 800be7c:	f43f aea4 	beq.w	800bbc8 <_dtoa_r+0x6a0>
 800be80:	f1b8 0f00 	cmp.w	r8, #0
 800be84:	d005      	beq.n	800be92 <_dtoa_r+0x96a>
 800be86:	45b8      	cmp	r8, r7
 800be88:	d003      	beq.n	800be92 <_dtoa_r+0x96a>
 800be8a:	4641      	mov	r1, r8
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 f985 	bl	800c19c <_Bfree>
 800be92:	4639      	mov	r1, r7
 800be94:	4620      	mov	r0, r4
 800be96:	f000 f981 	bl	800c19c <_Bfree>
 800be9a:	e695      	b.n	800bbc8 <_dtoa_r+0x6a0>
 800be9c:	2600      	movs	r6, #0
 800be9e:	4637      	mov	r7, r6
 800bea0:	e7e1      	b.n	800be66 <_dtoa_r+0x93e>
 800bea2:	9700      	str	r7, [sp, #0]
 800bea4:	4637      	mov	r7, r6
 800bea6:	e599      	b.n	800b9dc <_dtoa_r+0x4b4>
 800bea8:	40240000 	.word	0x40240000
 800beac:	9b08      	ldr	r3, [sp, #32]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 80ca 	beq.w	800c048 <_dtoa_r+0xb20>
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	9302      	str	r3, [sp, #8]
 800beb8:	2d00      	cmp	r5, #0
 800beba:	dd05      	ble.n	800bec8 <_dtoa_r+0x9a0>
 800bebc:	4639      	mov	r1, r7
 800bebe:	462a      	mov	r2, r5
 800bec0:	4620      	mov	r0, r4
 800bec2:	f000 fb3d 	bl	800c540 <__lshift>
 800bec6:	4607      	mov	r7, r0
 800bec8:	f1b8 0f00 	cmp.w	r8, #0
 800becc:	d05b      	beq.n	800bf86 <_dtoa_r+0xa5e>
 800bece:	6879      	ldr	r1, [r7, #4]
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 f923 	bl	800c11c <_Balloc>
 800bed6:	4605      	mov	r5, r0
 800bed8:	b928      	cbnz	r0, 800bee6 <_dtoa_r+0x9be>
 800beda:	4b87      	ldr	r3, [pc, #540]	; (800c0f8 <_dtoa_r+0xbd0>)
 800bedc:	4602      	mov	r2, r0
 800bede:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bee2:	f7ff bb3b 	b.w	800b55c <_dtoa_r+0x34>
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	3202      	adds	r2, #2
 800beea:	0092      	lsls	r2, r2, #2
 800beec:	f107 010c 	add.w	r1, r7, #12
 800bef0:	300c      	adds	r0, #12
 800bef2:	f7fe fde5 	bl	800aac0 <memcpy>
 800bef6:	2201      	movs	r2, #1
 800bef8:	4629      	mov	r1, r5
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fb20 	bl	800c540 <__lshift>
 800bf00:	9b01      	ldr	r3, [sp, #4]
 800bf02:	f103 0901 	add.w	r9, r3, #1
 800bf06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	f00a 0301 	and.w	r3, sl, #1
 800bf12:	46b8      	mov	r8, r7
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	4607      	mov	r7, r0
 800bf18:	4631      	mov	r1, r6
 800bf1a:	ee18 0a10 	vmov	r0, s16
 800bf1e:	f7ff fa77 	bl	800b410 <quorem>
 800bf22:	4641      	mov	r1, r8
 800bf24:	9002      	str	r0, [sp, #8]
 800bf26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf2a:	ee18 0a10 	vmov	r0, s16
 800bf2e:	f000 fb77 	bl	800c620 <__mcmp>
 800bf32:	463a      	mov	r2, r7
 800bf34:	9003      	str	r0, [sp, #12]
 800bf36:	4631      	mov	r1, r6
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 fb8d 	bl	800c658 <__mdiff>
 800bf3e:	68c2      	ldr	r2, [r0, #12]
 800bf40:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf44:	4605      	mov	r5, r0
 800bf46:	bb02      	cbnz	r2, 800bf8a <_dtoa_r+0xa62>
 800bf48:	4601      	mov	r1, r0
 800bf4a:	ee18 0a10 	vmov	r0, s16
 800bf4e:	f000 fb67 	bl	800c620 <__mcmp>
 800bf52:	4602      	mov	r2, r0
 800bf54:	4629      	mov	r1, r5
 800bf56:	4620      	mov	r0, r4
 800bf58:	9207      	str	r2, [sp, #28]
 800bf5a:	f000 f91f 	bl	800c19c <_Bfree>
 800bf5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf62:	ea43 0102 	orr.w	r1, r3, r2
 800bf66:	9b04      	ldr	r3, [sp, #16]
 800bf68:	430b      	orrs	r3, r1
 800bf6a:	464d      	mov	r5, r9
 800bf6c:	d10f      	bne.n	800bf8e <_dtoa_r+0xa66>
 800bf6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf72:	d02a      	beq.n	800bfca <_dtoa_r+0xaa2>
 800bf74:	9b03      	ldr	r3, [sp, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dd02      	ble.n	800bf80 <_dtoa_r+0xa58>
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bf80:	f88b a000 	strb.w	sl, [fp]
 800bf84:	e775      	b.n	800be72 <_dtoa_r+0x94a>
 800bf86:	4638      	mov	r0, r7
 800bf88:	e7ba      	b.n	800bf00 <_dtoa_r+0x9d8>
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	e7e2      	b.n	800bf54 <_dtoa_r+0xa2c>
 800bf8e:	9b03      	ldr	r3, [sp, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	db04      	blt.n	800bf9e <_dtoa_r+0xa76>
 800bf94:	9906      	ldr	r1, [sp, #24]
 800bf96:	430b      	orrs	r3, r1
 800bf98:	9904      	ldr	r1, [sp, #16]
 800bf9a:	430b      	orrs	r3, r1
 800bf9c:	d122      	bne.n	800bfe4 <_dtoa_r+0xabc>
 800bf9e:	2a00      	cmp	r2, #0
 800bfa0:	ddee      	ble.n	800bf80 <_dtoa_r+0xa58>
 800bfa2:	ee18 1a10 	vmov	r1, s16
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 fac9 	bl	800c540 <__lshift>
 800bfae:	4631      	mov	r1, r6
 800bfb0:	ee08 0a10 	vmov	s16, r0
 800bfb4:	f000 fb34 	bl	800c620 <__mcmp>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	dc03      	bgt.n	800bfc4 <_dtoa_r+0xa9c>
 800bfbc:	d1e0      	bne.n	800bf80 <_dtoa_r+0xa58>
 800bfbe:	f01a 0f01 	tst.w	sl, #1
 800bfc2:	d0dd      	beq.n	800bf80 <_dtoa_r+0xa58>
 800bfc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfc8:	d1d7      	bne.n	800bf7a <_dtoa_r+0xa52>
 800bfca:	2339      	movs	r3, #57	; 0x39
 800bfcc:	f88b 3000 	strb.w	r3, [fp]
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	461d      	mov	r5, r3
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bfda:	2a39      	cmp	r2, #57	; 0x39
 800bfdc:	d071      	beq.n	800c0c2 <_dtoa_r+0xb9a>
 800bfde:	3201      	adds	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	e746      	b.n	800be72 <_dtoa_r+0x94a>
 800bfe4:	2a00      	cmp	r2, #0
 800bfe6:	dd07      	ble.n	800bff8 <_dtoa_r+0xad0>
 800bfe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfec:	d0ed      	beq.n	800bfca <_dtoa_r+0xaa2>
 800bfee:	f10a 0301 	add.w	r3, sl, #1
 800bff2:	f88b 3000 	strb.w	r3, [fp]
 800bff6:	e73c      	b.n	800be72 <_dtoa_r+0x94a>
 800bff8:	9b05      	ldr	r3, [sp, #20]
 800bffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bffe:	4599      	cmp	r9, r3
 800c000:	d047      	beq.n	800c092 <_dtoa_r+0xb6a>
 800c002:	ee18 1a10 	vmov	r1, s16
 800c006:	2300      	movs	r3, #0
 800c008:	220a      	movs	r2, #10
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 f8e8 	bl	800c1e0 <__multadd>
 800c010:	45b8      	cmp	r8, r7
 800c012:	ee08 0a10 	vmov	s16, r0
 800c016:	f04f 0300 	mov.w	r3, #0
 800c01a:	f04f 020a 	mov.w	r2, #10
 800c01e:	4641      	mov	r1, r8
 800c020:	4620      	mov	r0, r4
 800c022:	d106      	bne.n	800c032 <_dtoa_r+0xb0a>
 800c024:	f000 f8dc 	bl	800c1e0 <__multadd>
 800c028:	4680      	mov	r8, r0
 800c02a:	4607      	mov	r7, r0
 800c02c:	f109 0901 	add.w	r9, r9, #1
 800c030:	e772      	b.n	800bf18 <_dtoa_r+0x9f0>
 800c032:	f000 f8d5 	bl	800c1e0 <__multadd>
 800c036:	4639      	mov	r1, r7
 800c038:	4680      	mov	r8, r0
 800c03a:	2300      	movs	r3, #0
 800c03c:	220a      	movs	r2, #10
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 f8ce 	bl	800c1e0 <__multadd>
 800c044:	4607      	mov	r7, r0
 800c046:	e7f1      	b.n	800c02c <_dtoa_r+0xb04>
 800c048:	9b03      	ldr	r3, [sp, #12]
 800c04a:	9302      	str	r3, [sp, #8]
 800c04c:	9d01      	ldr	r5, [sp, #4]
 800c04e:	ee18 0a10 	vmov	r0, s16
 800c052:	4631      	mov	r1, r6
 800c054:	f7ff f9dc 	bl	800b410 <quorem>
 800c058:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	f805 ab01 	strb.w	sl, [r5], #1
 800c062:	1aea      	subs	r2, r5, r3
 800c064:	9b02      	ldr	r3, [sp, #8]
 800c066:	4293      	cmp	r3, r2
 800c068:	dd09      	ble.n	800c07e <_dtoa_r+0xb56>
 800c06a:	ee18 1a10 	vmov	r1, s16
 800c06e:	2300      	movs	r3, #0
 800c070:	220a      	movs	r2, #10
 800c072:	4620      	mov	r0, r4
 800c074:	f000 f8b4 	bl	800c1e0 <__multadd>
 800c078:	ee08 0a10 	vmov	s16, r0
 800c07c:	e7e7      	b.n	800c04e <_dtoa_r+0xb26>
 800c07e:	9b02      	ldr	r3, [sp, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	bfc8      	it	gt
 800c084:	461d      	movgt	r5, r3
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	bfd8      	it	le
 800c08a:	2501      	movle	r5, #1
 800c08c:	441d      	add	r5, r3
 800c08e:	f04f 0800 	mov.w	r8, #0
 800c092:	ee18 1a10 	vmov	r1, s16
 800c096:	2201      	movs	r2, #1
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 fa51 	bl	800c540 <__lshift>
 800c09e:	4631      	mov	r1, r6
 800c0a0:	ee08 0a10 	vmov	s16, r0
 800c0a4:	f000 fabc 	bl	800c620 <__mcmp>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	dc91      	bgt.n	800bfd0 <_dtoa_r+0xaa8>
 800c0ac:	d102      	bne.n	800c0b4 <_dtoa_r+0xb8c>
 800c0ae:	f01a 0f01 	tst.w	sl, #1
 800c0b2:	d18d      	bne.n	800bfd0 <_dtoa_r+0xaa8>
 800c0b4:	462b      	mov	r3, r5
 800c0b6:	461d      	mov	r5, r3
 800c0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0bc:	2a30      	cmp	r2, #48	; 0x30
 800c0be:	d0fa      	beq.n	800c0b6 <_dtoa_r+0xb8e>
 800c0c0:	e6d7      	b.n	800be72 <_dtoa_r+0x94a>
 800c0c2:	9a01      	ldr	r2, [sp, #4]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d184      	bne.n	800bfd2 <_dtoa_r+0xaaa>
 800c0c8:	9b00      	ldr	r3, [sp, #0]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	2331      	movs	r3, #49	; 0x31
 800c0d0:	7013      	strb	r3, [r2, #0]
 800c0d2:	e6ce      	b.n	800be72 <_dtoa_r+0x94a>
 800c0d4:	4b09      	ldr	r3, [pc, #36]	; (800c0fc <_dtoa_r+0xbd4>)
 800c0d6:	f7ff ba95 	b.w	800b604 <_dtoa_r+0xdc>
 800c0da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f47f aa6e 	bne.w	800b5be <_dtoa_r+0x96>
 800c0e2:	4b07      	ldr	r3, [pc, #28]	; (800c100 <_dtoa_r+0xbd8>)
 800c0e4:	f7ff ba8e 	b.w	800b604 <_dtoa_r+0xdc>
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dcae      	bgt.n	800c04c <_dtoa_r+0xb24>
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	f73f aea8 	bgt.w	800be46 <_dtoa_r+0x91e>
 800c0f6:	e7a9      	b.n	800c04c <_dtoa_r+0xb24>
 800c0f8:	0800ee7b 	.word	0x0800ee7b
 800c0fc:	0800edd8 	.word	0x0800edd8
 800c100:	0800edfc 	.word	0x0800edfc

0800c104 <_localeconv_r>:
 800c104:	4800      	ldr	r0, [pc, #0]	; (800c108 <_localeconv_r+0x4>)
 800c106:	4770      	bx	lr
 800c108:	200001b8 	.word	0x200001b8

0800c10c <malloc>:
 800c10c:	4b02      	ldr	r3, [pc, #8]	; (800c118 <malloc+0xc>)
 800c10e:	4601      	mov	r1, r0
 800c110:	6818      	ldr	r0, [r3, #0]
 800c112:	f000 bc09 	b.w	800c928 <_malloc_r>
 800c116:	bf00      	nop
 800c118:	20000064 	.word	0x20000064

0800c11c <_Balloc>:
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c120:	4604      	mov	r4, r0
 800c122:	460d      	mov	r5, r1
 800c124:	b976      	cbnz	r6, 800c144 <_Balloc+0x28>
 800c126:	2010      	movs	r0, #16
 800c128:	f7ff fff0 	bl	800c10c <malloc>
 800c12c:	4602      	mov	r2, r0
 800c12e:	6260      	str	r0, [r4, #36]	; 0x24
 800c130:	b920      	cbnz	r0, 800c13c <_Balloc+0x20>
 800c132:	4b18      	ldr	r3, [pc, #96]	; (800c194 <_Balloc+0x78>)
 800c134:	4818      	ldr	r0, [pc, #96]	; (800c198 <_Balloc+0x7c>)
 800c136:	2166      	movs	r1, #102	; 0x66
 800c138:	f000 fdd6 	bl	800cce8 <__assert_func>
 800c13c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c140:	6006      	str	r6, [r0, #0]
 800c142:	60c6      	str	r6, [r0, #12]
 800c144:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c146:	68f3      	ldr	r3, [r6, #12]
 800c148:	b183      	cbz	r3, 800c16c <_Balloc+0x50>
 800c14a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c152:	b9b8      	cbnz	r0, 800c184 <_Balloc+0x68>
 800c154:	2101      	movs	r1, #1
 800c156:	fa01 f605 	lsl.w	r6, r1, r5
 800c15a:	1d72      	adds	r2, r6, #5
 800c15c:	0092      	lsls	r2, r2, #2
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 fb60 	bl	800c824 <_calloc_r>
 800c164:	b160      	cbz	r0, 800c180 <_Balloc+0x64>
 800c166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c16a:	e00e      	b.n	800c18a <_Balloc+0x6e>
 800c16c:	2221      	movs	r2, #33	; 0x21
 800c16e:	2104      	movs	r1, #4
 800c170:	4620      	mov	r0, r4
 800c172:	f000 fb57 	bl	800c824 <_calloc_r>
 800c176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c178:	60f0      	str	r0, [r6, #12]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e4      	bne.n	800c14a <_Balloc+0x2e>
 800c180:	2000      	movs	r0, #0
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	6802      	ldr	r2, [r0, #0]
 800c186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c18a:	2300      	movs	r3, #0
 800c18c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c190:	e7f7      	b.n	800c182 <_Balloc+0x66>
 800c192:	bf00      	nop
 800c194:	0800ee09 	.word	0x0800ee09
 800c198:	0800ee8c 	.word	0x0800ee8c

0800c19c <_Bfree>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	b976      	cbnz	r6, 800c1c4 <_Bfree+0x28>
 800c1a6:	2010      	movs	r0, #16
 800c1a8:	f7ff ffb0 	bl	800c10c <malloc>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	6268      	str	r0, [r5, #36]	; 0x24
 800c1b0:	b920      	cbnz	r0, 800c1bc <_Bfree+0x20>
 800c1b2:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <_Bfree+0x3c>)
 800c1b4:	4809      	ldr	r0, [pc, #36]	; (800c1dc <_Bfree+0x40>)
 800c1b6:	218a      	movs	r1, #138	; 0x8a
 800c1b8:	f000 fd96 	bl	800cce8 <__assert_func>
 800c1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1c0:	6006      	str	r6, [r0, #0]
 800c1c2:	60c6      	str	r6, [r0, #12]
 800c1c4:	b13c      	cbz	r4, 800c1d6 <_Bfree+0x3a>
 800c1c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1c8:	6862      	ldr	r2, [r4, #4]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1d0:	6021      	str	r1, [r4, #0]
 800c1d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	0800ee09 	.word	0x0800ee09
 800c1dc:	0800ee8c 	.word	0x0800ee8c

0800c1e0 <__multadd>:
 800c1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e4:	690d      	ldr	r5, [r1, #16]
 800c1e6:	4607      	mov	r7, r0
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	461e      	mov	r6, r3
 800c1ec:	f101 0c14 	add.w	ip, r1, #20
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f8dc 3000 	ldr.w	r3, [ip]
 800c1f6:	b299      	uxth	r1, r3
 800c1f8:	fb02 6101 	mla	r1, r2, r1, r6
 800c1fc:	0c1e      	lsrs	r6, r3, #16
 800c1fe:	0c0b      	lsrs	r3, r1, #16
 800c200:	fb02 3306 	mla	r3, r2, r6, r3
 800c204:	b289      	uxth	r1, r1
 800c206:	3001      	adds	r0, #1
 800c208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c20c:	4285      	cmp	r5, r0
 800c20e:	f84c 1b04 	str.w	r1, [ip], #4
 800c212:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c216:	dcec      	bgt.n	800c1f2 <__multadd+0x12>
 800c218:	b30e      	cbz	r6, 800c25e <__multadd+0x7e>
 800c21a:	68a3      	ldr	r3, [r4, #8]
 800c21c:	42ab      	cmp	r3, r5
 800c21e:	dc19      	bgt.n	800c254 <__multadd+0x74>
 800c220:	6861      	ldr	r1, [r4, #4]
 800c222:	4638      	mov	r0, r7
 800c224:	3101      	adds	r1, #1
 800c226:	f7ff ff79 	bl	800c11c <_Balloc>
 800c22a:	4680      	mov	r8, r0
 800c22c:	b928      	cbnz	r0, 800c23a <__multadd+0x5a>
 800c22e:	4602      	mov	r2, r0
 800c230:	4b0c      	ldr	r3, [pc, #48]	; (800c264 <__multadd+0x84>)
 800c232:	480d      	ldr	r0, [pc, #52]	; (800c268 <__multadd+0x88>)
 800c234:	21b5      	movs	r1, #181	; 0xb5
 800c236:	f000 fd57 	bl	800cce8 <__assert_func>
 800c23a:	6922      	ldr	r2, [r4, #16]
 800c23c:	3202      	adds	r2, #2
 800c23e:	f104 010c 	add.w	r1, r4, #12
 800c242:	0092      	lsls	r2, r2, #2
 800c244:	300c      	adds	r0, #12
 800c246:	f7fe fc3b 	bl	800aac0 <memcpy>
 800c24a:	4621      	mov	r1, r4
 800c24c:	4638      	mov	r0, r7
 800c24e:	f7ff ffa5 	bl	800c19c <_Bfree>
 800c252:	4644      	mov	r4, r8
 800c254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c258:	3501      	adds	r5, #1
 800c25a:	615e      	str	r6, [r3, #20]
 800c25c:	6125      	str	r5, [r4, #16]
 800c25e:	4620      	mov	r0, r4
 800c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c264:	0800ee7b 	.word	0x0800ee7b
 800c268:	0800ee8c 	.word	0x0800ee8c

0800c26c <__hi0bits>:
 800c26c:	0c03      	lsrs	r3, r0, #16
 800c26e:	041b      	lsls	r3, r3, #16
 800c270:	b9d3      	cbnz	r3, 800c2a8 <__hi0bits+0x3c>
 800c272:	0400      	lsls	r0, r0, #16
 800c274:	2310      	movs	r3, #16
 800c276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c27a:	bf04      	itt	eq
 800c27c:	0200      	lsleq	r0, r0, #8
 800c27e:	3308      	addeq	r3, #8
 800c280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c284:	bf04      	itt	eq
 800c286:	0100      	lsleq	r0, r0, #4
 800c288:	3304      	addeq	r3, #4
 800c28a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c28e:	bf04      	itt	eq
 800c290:	0080      	lsleq	r0, r0, #2
 800c292:	3302      	addeq	r3, #2
 800c294:	2800      	cmp	r0, #0
 800c296:	db05      	blt.n	800c2a4 <__hi0bits+0x38>
 800c298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c29c:	f103 0301 	add.w	r3, r3, #1
 800c2a0:	bf08      	it	eq
 800c2a2:	2320      	moveq	r3, #32
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	4770      	bx	lr
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e7e4      	b.n	800c276 <__hi0bits+0xa>

0800c2ac <__lo0bits>:
 800c2ac:	6803      	ldr	r3, [r0, #0]
 800c2ae:	f013 0207 	ands.w	r2, r3, #7
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	d00b      	beq.n	800c2ce <__lo0bits+0x22>
 800c2b6:	07da      	lsls	r2, r3, #31
 800c2b8:	d423      	bmi.n	800c302 <__lo0bits+0x56>
 800c2ba:	0798      	lsls	r0, r3, #30
 800c2bc:	bf49      	itett	mi
 800c2be:	085b      	lsrmi	r3, r3, #1
 800c2c0:	089b      	lsrpl	r3, r3, #2
 800c2c2:	2001      	movmi	r0, #1
 800c2c4:	600b      	strmi	r3, [r1, #0]
 800c2c6:	bf5c      	itt	pl
 800c2c8:	600b      	strpl	r3, [r1, #0]
 800c2ca:	2002      	movpl	r0, #2
 800c2cc:	4770      	bx	lr
 800c2ce:	b298      	uxth	r0, r3
 800c2d0:	b9a8      	cbnz	r0, 800c2fe <__lo0bits+0x52>
 800c2d2:	0c1b      	lsrs	r3, r3, #16
 800c2d4:	2010      	movs	r0, #16
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	b90a      	cbnz	r2, 800c2de <__lo0bits+0x32>
 800c2da:	3008      	adds	r0, #8
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	071a      	lsls	r2, r3, #28
 800c2e0:	bf04      	itt	eq
 800c2e2:	091b      	lsreq	r3, r3, #4
 800c2e4:	3004      	addeq	r0, #4
 800c2e6:	079a      	lsls	r2, r3, #30
 800c2e8:	bf04      	itt	eq
 800c2ea:	089b      	lsreq	r3, r3, #2
 800c2ec:	3002      	addeq	r0, #2
 800c2ee:	07da      	lsls	r2, r3, #31
 800c2f0:	d403      	bmi.n	800c2fa <__lo0bits+0x4e>
 800c2f2:	085b      	lsrs	r3, r3, #1
 800c2f4:	f100 0001 	add.w	r0, r0, #1
 800c2f8:	d005      	beq.n	800c306 <__lo0bits+0x5a>
 800c2fa:	600b      	str	r3, [r1, #0]
 800c2fc:	4770      	bx	lr
 800c2fe:	4610      	mov	r0, r2
 800c300:	e7e9      	b.n	800c2d6 <__lo0bits+0x2a>
 800c302:	2000      	movs	r0, #0
 800c304:	4770      	bx	lr
 800c306:	2020      	movs	r0, #32
 800c308:	4770      	bx	lr
	...

0800c30c <__i2b>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	460c      	mov	r4, r1
 800c310:	2101      	movs	r1, #1
 800c312:	f7ff ff03 	bl	800c11c <_Balloc>
 800c316:	4602      	mov	r2, r0
 800c318:	b928      	cbnz	r0, 800c326 <__i2b+0x1a>
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <__i2b+0x24>)
 800c31c:	4805      	ldr	r0, [pc, #20]	; (800c334 <__i2b+0x28>)
 800c31e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c322:	f000 fce1 	bl	800cce8 <__assert_func>
 800c326:	2301      	movs	r3, #1
 800c328:	6144      	str	r4, [r0, #20]
 800c32a:	6103      	str	r3, [r0, #16]
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	bf00      	nop
 800c330:	0800ee7b 	.word	0x0800ee7b
 800c334:	0800ee8c 	.word	0x0800ee8c

0800c338 <__multiply>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	4691      	mov	r9, r2
 800c33e:	690a      	ldr	r2, [r1, #16]
 800c340:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c344:	429a      	cmp	r2, r3
 800c346:	bfb8      	it	lt
 800c348:	460b      	movlt	r3, r1
 800c34a:	460c      	mov	r4, r1
 800c34c:	bfbc      	itt	lt
 800c34e:	464c      	movlt	r4, r9
 800c350:	4699      	movlt	r9, r3
 800c352:	6927      	ldr	r7, [r4, #16]
 800c354:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c358:	68a3      	ldr	r3, [r4, #8]
 800c35a:	6861      	ldr	r1, [r4, #4]
 800c35c:	eb07 060a 	add.w	r6, r7, sl
 800c360:	42b3      	cmp	r3, r6
 800c362:	b085      	sub	sp, #20
 800c364:	bfb8      	it	lt
 800c366:	3101      	addlt	r1, #1
 800c368:	f7ff fed8 	bl	800c11c <_Balloc>
 800c36c:	b930      	cbnz	r0, 800c37c <__multiply+0x44>
 800c36e:	4602      	mov	r2, r0
 800c370:	4b44      	ldr	r3, [pc, #272]	; (800c484 <__multiply+0x14c>)
 800c372:	4845      	ldr	r0, [pc, #276]	; (800c488 <__multiply+0x150>)
 800c374:	f240 115d 	movw	r1, #349	; 0x15d
 800c378:	f000 fcb6 	bl	800cce8 <__assert_func>
 800c37c:	f100 0514 	add.w	r5, r0, #20
 800c380:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c384:	462b      	mov	r3, r5
 800c386:	2200      	movs	r2, #0
 800c388:	4543      	cmp	r3, r8
 800c38a:	d321      	bcc.n	800c3d0 <__multiply+0x98>
 800c38c:	f104 0314 	add.w	r3, r4, #20
 800c390:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c394:	f109 0314 	add.w	r3, r9, #20
 800c398:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c39c:	9202      	str	r2, [sp, #8]
 800c39e:	1b3a      	subs	r2, r7, r4
 800c3a0:	3a15      	subs	r2, #21
 800c3a2:	f022 0203 	bic.w	r2, r2, #3
 800c3a6:	3204      	adds	r2, #4
 800c3a8:	f104 0115 	add.w	r1, r4, #21
 800c3ac:	428f      	cmp	r7, r1
 800c3ae:	bf38      	it	cc
 800c3b0:	2204      	movcc	r2, #4
 800c3b2:	9201      	str	r2, [sp, #4]
 800c3b4:	9a02      	ldr	r2, [sp, #8]
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d80c      	bhi.n	800c3d6 <__multiply+0x9e>
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	dd03      	ble.n	800c3c8 <__multiply+0x90>
 800c3c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d05a      	beq.n	800c47e <__multiply+0x146>
 800c3c8:	6106      	str	r6, [r0, #16]
 800c3ca:	b005      	add	sp, #20
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	f843 2b04 	str.w	r2, [r3], #4
 800c3d4:	e7d8      	b.n	800c388 <__multiply+0x50>
 800c3d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3da:	f1ba 0f00 	cmp.w	sl, #0
 800c3de:	d024      	beq.n	800c42a <__multiply+0xf2>
 800c3e0:	f104 0e14 	add.w	lr, r4, #20
 800c3e4:	46a9      	mov	r9, r5
 800c3e6:	f04f 0c00 	mov.w	ip, #0
 800c3ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3ee:	f8d9 1000 	ldr.w	r1, [r9]
 800c3f2:	fa1f fb82 	uxth.w	fp, r2
 800c3f6:	b289      	uxth	r1, r1
 800c3f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c400:	f8d9 2000 	ldr.w	r2, [r9]
 800c404:	4461      	add	r1, ip
 800c406:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c40a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c40e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c412:	b289      	uxth	r1, r1
 800c414:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c418:	4577      	cmp	r7, lr
 800c41a:	f849 1b04 	str.w	r1, [r9], #4
 800c41e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c422:	d8e2      	bhi.n	800c3ea <__multiply+0xb2>
 800c424:	9a01      	ldr	r2, [sp, #4]
 800c426:	f845 c002 	str.w	ip, [r5, r2]
 800c42a:	9a03      	ldr	r2, [sp, #12]
 800c42c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c430:	3304      	adds	r3, #4
 800c432:	f1b9 0f00 	cmp.w	r9, #0
 800c436:	d020      	beq.n	800c47a <__multiply+0x142>
 800c438:	6829      	ldr	r1, [r5, #0]
 800c43a:	f104 0c14 	add.w	ip, r4, #20
 800c43e:	46ae      	mov	lr, r5
 800c440:	f04f 0a00 	mov.w	sl, #0
 800c444:	f8bc b000 	ldrh.w	fp, [ip]
 800c448:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c44c:	fb09 220b 	mla	r2, r9, fp, r2
 800c450:	4492      	add	sl, r2
 800c452:	b289      	uxth	r1, r1
 800c454:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c458:	f84e 1b04 	str.w	r1, [lr], #4
 800c45c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c460:	f8be 1000 	ldrh.w	r1, [lr]
 800c464:	0c12      	lsrs	r2, r2, #16
 800c466:	fb09 1102 	mla	r1, r9, r2, r1
 800c46a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c46e:	4567      	cmp	r7, ip
 800c470:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c474:	d8e6      	bhi.n	800c444 <__multiply+0x10c>
 800c476:	9a01      	ldr	r2, [sp, #4]
 800c478:	50a9      	str	r1, [r5, r2]
 800c47a:	3504      	adds	r5, #4
 800c47c:	e79a      	b.n	800c3b4 <__multiply+0x7c>
 800c47e:	3e01      	subs	r6, #1
 800c480:	e79c      	b.n	800c3bc <__multiply+0x84>
 800c482:	bf00      	nop
 800c484:	0800ee7b 	.word	0x0800ee7b
 800c488:	0800ee8c 	.word	0x0800ee8c

0800c48c <__pow5mult>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	4615      	mov	r5, r2
 800c492:	f012 0203 	ands.w	r2, r2, #3
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	d007      	beq.n	800c4ac <__pow5mult+0x20>
 800c49c:	4c25      	ldr	r4, [pc, #148]	; (800c534 <__pow5mult+0xa8>)
 800c49e:	3a01      	subs	r2, #1
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4a6:	f7ff fe9b 	bl	800c1e0 <__multadd>
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	10ad      	asrs	r5, r5, #2
 800c4ae:	d03d      	beq.n	800c52c <__pow5mult+0xa0>
 800c4b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c4b2:	b97c      	cbnz	r4, 800c4d4 <__pow5mult+0x48>
 800c4b4:	2010      	movs	r0, #16
 800c4b6:	f7ff fe29 	bl	800c10c <malloc>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	6270      	str	r0, [r6, #36]	; 0x24
 800c4be:	b928      	cbnz	r0, 800c4cc <__pow5mult+0x40>
 800c4c0:	4b1d      	ldr	r3, [pc, #116]	; (800c538 <__pow5mult+0xac>)
 800c4c2:	481e      	ldr	r0, [pc, #120]	; (800c53c <__pow5mult+0xb0>)
 800c4c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c4c8:	f000 fc0e 	bl	800cce8 <__assert_func>
 800c4cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4d0:	6004      	str	r4, [r0, #0]
 800c4d2:	60c4      	str	r4, [r0, #12]
 800c4d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4dc:	b94c      	cbnz	r4, 800c4f2 <__pow5mult+0x66>
 800c4de:	f240 2171 	movw	r1, #625	; 0x271
 800c4e2:	4630      	mov	r0, r6
 800c4e4:	f7ff ff12 	bl	800c30c <__i2b>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	f04f 0900 	mov.w	r9, #0
 800c4f6:	07eb      	lsls	r3, r5, #31
 800c4f8:	d50a      	bpl.n	800c510 <__pow5mult+0x84>
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7ff ff1a 	bl	800c338 <__multiply>
 800c504:	4639      	mov	r1, r7
 800c506:	4680      	mov	r8, r0
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff fe47 	bl	800c19c <_Bfree>
 800c50e:	4647      	mov	r7, r8
 800c510:	106d      	asrs	r5, r5, #1
 800c512:	d00b      	beq.n	800c52c <__pow5mult+0xa0>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	b938      	cbnz	r0, 800c528 <__pow5mult+0x9c>
 800c518:	4622      	mov	r2, r4
 800c51a:	4621      	mov	r1, r4
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff ff0b 	bl	800c338 <__multiply>
 800c522:	6020      	str	r0, [r4, #0]
 800c524:	f8c0 9000 	str.w	r9, [r0]
 800c528:	4604      	mov	r4, r0
 800c52a:	e7e4      	b.n	800c4f6 <__pow5mult+0x6a>
 800c52c:	4638      	mov	r0, r7
 800c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c532:	bf00      	nop
 800c534:	0800efd8 	.word	0x0800efd8
 800c538:	0800ee09 	.word	0x0800ee09
 800c53c:	0800ee8c 	.word	0x0800ee8c

0800c540 <__lshift>:
 800c540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	460c      	mov	r4, r1
 800c546:	6849      	ldr	r1, [r1, #4]
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	4607      	mov	r7, r0
 800c552:	4691      	mov	r9, r2
 800c554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c558:	f108 0601 	add.w	r6, r8, #1
 800c55c:	42b3      	cmp	r3, r6
 800c55e:	db0b      	blt.n	800c578 <__lshift+0x38>
 800c560:	4638      	mov	r0, r7
 800c562:	f7ff fddb 	bl	800c11c <_Balloc>
 800c566:	4605      	mov	r5, r0
 800c568:	b948      	cbnz	r0, 800c57e <__lshift+0x3e>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4b2a      	ldr	r3, [pc, #168]	; (800c618 <__lshift+0xd8>)
 800c56e:	482b      	ldr	r0, [pc, #172]	; (800c61c <__lshift+0xdc>)
 800c570:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c574:	f000 fbb8 	bl	800cce8 <__assert_func>
 800c578:	3101      	adds	r1, #1
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	e7ee      	b.n	800c55c <__lshift+0x1c>
 800c57e:	2300      	movs	r3, #0
 800c580:	f100 0114 	add.w	r1, r0, #20
 800c584:	f100 0210 	add.w	r2, r0, #16
 800c588:	4618      	mov	r0, r3
 800c58a:	4553      	cmp	r3, sl
 800c58c:	db37      	blt.n	800c5fe <__lshift+0xbe>
 800c58e:	6920      	ldr	r0, [r4, #16]
 800c590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c594:	f104 0314 	add.w	r3, r4, #20
 800c598:	f019 091f 	ands.w	r9, r9, #31
 800c59c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c5a4:	d02f      	beq.n	800c606 <__lshift+0xc6>
 800c5a6:	f1c9 0e20 	rsb	lr, r9, #32
 800c5aa:	468a      	mov	sl, r1
 800c5ac:	f04f 0c00 	mov.w	ip, #0
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	fa02 f209 	lsl.w	r2, r2, r9
 800c5b6:	ea42 020c 	orr.w	r2, r2, ip
 800c5ba:	f84a 2b04 	str.w	r2, [sl], #4
 800c5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c2:	4298      	cmp	r0, r3
 800c5c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c5c8:	d8f2      	bhi.n	800c5b0 <__lshift+0x70>
 800c5ca:	1b03      	subs	r3, r0, r4
 800c5cc:	3b15      	subs	r3, #21
 800c5ce:	f023 0303 	bic.w	r3, r3, #3
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	f104 0215 	add.w	r2, r4, #21
 800c5d8:	4290      	cmp	r0, r2
 800c5da:	bf38      	it	cc
 800c5dc:	2304      	movcc	r3, #4
 800c5de:	f841 c003 	str.w	ip, [r1, r3]
 800c5e2:	f1bc 0f00 	cmp.w	ip, #0
 800c5e6:	d001      	beq.n	800c5ec <__lshift+0xac>
 800c5e8:	f108 0602 	add.w	r6, r8, #2
 800c5ec:	3e01      	subs	r6, #1
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	612e      	str	r6, [r5, #16]
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	f7ff fdd2 	bl	800c19c <_Bfree>
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c602:	3301      	adds	r3, #1
 800c604:	e7c1      	b.n	800c58a <__lshift+0x4a>
 800c606:	3904      	subs	r1, #4
 800c608:	f853 2b04 	ldr.w	r2, [r3], #4
 800c60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c610:	4298      	cmp	r0, r3
 800c612:	d8f9      	bhi.n	800c608 <__lshift+0xc8>
 800c614:	e7ea      	b.n	800c5ec <__lshift+0xac>
 800c616:	bf00      	nop
 800c618:	0800ee7b 	.word	0x0800ee7b
 800c61c:	0800ee8c 	.word	0x0800ee8c

0800c620 <__mcmp>:
 800c620:	b530      	push	{r4, r5, lr}
 800c622:	6902      	ldr	r2, [r0, #16]
 800c624:	690c      	ldr	r4, [r1, #16]
 800c626:	1b12      	subs	r2, r2, r4
 800c628:	d10e      	bne.n	800c648 <__mcmp+0x28>
 800c62a:	f100 0314 	add.w	r3, r0, #20
 800c62e:	3114      	adds	r1, #20
 800c630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c63c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c640:	42a5      	cmp	r5, r4
 800c642:	d003      	beq.n	800c64c <__mcmp+0x2c>
 800c644:	d305      	bcc.n	800c652 <__mcmp+0x32>
 800c646:	2201      	movs	r2, #1
 800c648:	4610      	mov	r0, r2
 800c64a:	bd30      	pop	{r4, r5, pc}
 800c64c:	4283      	cmp	r3, r0
 800c64e:	d3f3      	bcc.n	800c638 <__mcmp+0x18>
 800c650:	e7fa      	b.n	800c648 <__mcmp+0x28>
 800c652:	f04f 32ff 	mov.w	r2, #4294967295
 800c656:	e7f7      	b.n	800c648 <__mcmp+0x28>

0800c658 <__mdiff>:
 800c658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	460c      	mov	r4, r1
 800c65e:	4606      	mov	r6, r0
 800c660:	4611      	mov	r1, r2
 800c662:	4620      	mov	r0, r4
 800c664:	4690      	mov	r8, r2
 800c666:	f7ff ffdb 	bl	800c620 <__mcmp>
 800c66a:	1e05      	subs	r5, r0, #0
 800c66c:	d110      	bne.n	800c690 <__mdiff+0x38>
 800c66e:	4629      	mov	r1, r5
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff fd53 	bl	800c11c <_Balloc>
 800c676:	b930      	cbnz	r0, 800c686 <__mdiff+0x2e>
 800c678:	4b3a      	ldr	r3, [pc, #232]	; (800c764 <__mdiff+0x10c>)
 800c67a:	4602      	mov	r2, r0
 800c67c:	f240 2132 	movw	r1, #562	; 0x232
 800c680:	4839      	ldr	r0, [pc, #228]	; (800c768 <__mdiff+0x110>)
 800c682:	f000 fb31 	bl	800cce8 <__assert_func>
 800c686:	2301      	movs	r3, #1
 800c688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c690:	bfa4      	itt	ge
 800c692:	4643      	movge	r3, r8
 800c694:	46a0      	movge	r8, r4
 800c696:	4630      	mov	r0, r6
 800c698:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c69c:	bfa6      	itte	ge
 800c69e:	461c      	movge	r4, r3
 800c6a0:	2500      	movge	r5, #0
 800c6a2:	2501      	movlt	r5, #1
 800c6a4:	f7ff fd3a 	bl	800c11c <_Balloc>
 800c6a8:	b920      	cbnz	r0, 800c6b4 <__mdiff+0x5c>
 800c6aa:	4b2e      	ldr	r3, [pc, #184]	; (800c764 <__mdiff+0x10c>)
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c6b2:	e7e5      	b.n	800c680 <__mdiff+0x28>
 800c6b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6b8:	6926      	ldr	r6, [r4, #16]
 800c6ba:	60c5      	str	r5, [r0, #12]
 800c6bc:	f104 0914 	add.w	r9, r4, #20
 800c6c0:	f108 0514 	add.w	r5, r8, #20
 800c6c4:	f100 0e14 	add.w	lr, r0, #20
 800c6c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6d0:	f108 0210 	add.w	r2, r8, #16
 800c6d4:	46f2      	mov	sl, lr
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6e0:	fa1f f883 	uxth.w	r8, r3
 800c6e4:	fa11 f18b 	uxtah	r1, r1, fp
 800c6e8:	0c1b      	lsrs	r3, r3, #16
 800c6ea:	eba1 0808 	sub.w	r8, r1, r8
 800c6ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6f6:	fa1f f888 	uxth.w	r8, r8
 800c6fa:	1419      	asrs	r1, r3, #16
 800c6fc:	454e      	cmp	r6, r9
 800c6fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c702:	f84a 3b04 	str.w	r3, [sl], #4
 800c706:	d8e7      	bhi.n	800c6d8 <__mdiff+0x80>
 800c708:	1b33      	subs	r3, r6, r4
 800c70a:	3b15      	subs	r3, #21
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	3304      	adds	r3, #4
 800c712:	3415      	adds	r4, #21
 800c714:	42a6      	cmp	r6, r4
 800c716:	bf38      	it	cc
 800c718:	2304      	movcc	r3, #4
 800c71a:	441d      	add	r5, r3
 800c71c:	4473      	add	r3, lr
 800c71e:	469e      	mov	lr, r3
 800c720:	462e      	mov	r6, r5
 800c722:	4566      	cmp	r6, ip
 800c724:	d30e      	bcc.n	800c744 <__mdiff+0xec>
 800c726:	f10c 0203 	add.w	r2, ip, #3
 800c72a:	1b52      	subs	r2, r2, r5
 800c72c:	f022 0203 	bic.w	r2, r2, #3
 800c730:	3d03      	subs	r5, #3
 800c732:	45ac      	cmp	ip, r5
 800c734:	bf38      	it	cc
 800c736:	2200      	movcc	r2, #0
 800c738:	441a      	add	r2, r3
 800c73a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c73e:	b17b      	cbz	r3, 800c760 <__mdiff+0x108>
 800c740:	6107      	str	r7, [r0, #16]
 800c742:	e7a3      	b.n	800c68c <__mdiff+0x34>
 800c744:	f856 8b04 	ldr.w	r8, [r6], #4
 800c748:	fa11 f288 	uxtah	r2, r1, r8
 800c74c:	1414      	asrs	r4, r2, #16
 800c74e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c752:	b292      	uxth	r2, r2
 800c754:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c758:	f84e 2b04 	str.w	r2, [lr], #4
 800c75c:	1421      	asrs	r1, r4, #16
 800c75e:	e7e0      	b.n	800c722 <__mdiff+0xca>
 800c760:	3f01      	subs	r7, #1
 800c762:	e7ea      	b.n	800c73a <__mdiff+0xe2>
 800c764:	0800ee7b 	.word	0x0800ee7b
 800c768:	0800ee8c 	.word	0x0800ee8c

0800c76c <__d2b>:
 800c76c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c770:	4689      	mov	r9, r1
 800c772:	2101      	movs	r1, #1
 800c774:	ec57 6b10 	vmov	r6, r7, d0
 800c778:	4690      	mov	r8, r2
 800c77a:	f7ff fccf 	bl	800c11c <_Balloc>
 800c77e:	4604      	mov	r4, r0
 800c780:	b930      	cbnz	r0, 800c790 <__d2b+0x24>
 800c782:	4602      	mov	r2, r0
 800c784:	4b25      	ldr	r3, [pc, #148]	; (800c81c <__d2b+0xb0>)
 800c786:	4826      	ldr	r0, [pc, #152]	; (800c820 <__d2b+0xb4>)
 800c788:	f240 310a 	movw	r1, #778	; 0x30a
 800c78c:	f000 faac 	bl	800cce8 <__assert_func>
 800c790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c798:	bb35      	cbnz	r5, 800c7e8 <__d2b+0x7c>
 800c79a:	2e00      	cmp	r6, #0
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	d028      	beq.n	800c7f2 <__d2b+0x86>
 800c7a0:	4668      	mov	r0, sp
 800c7a2:	9600      	str	r6, [sp, #0]
 800c7a4:	f7ff fd82 	bl	800c2ac <__lo0bits>
 800c7a8:	9900      	ldr	r1, [sp, #0]
 800c7aa:	b300      	cbz	r0, 800c7ee <__d2b+0x82>
 800c7ac:	9a01      	ldr	r2, [sp, #4]
 800c7ae:	f1c0 0320 	rsb	r3, r0, #32
 800c7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b6:	430b      	orrs	r3, r1
 800c7b8:	40c2      	lsrs	r2, r0
 800c7ba:	6163      	str	r3, [r4, #20]
 800c7bc:	9201      	str	r2, [sp, #4]
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	61a3      	str	r3, [r4, #24]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	bf14      	ite	ne
 800c7c6:	2202      	movne	r2, #2
 800c7c8:	2201      	moveq	r2, #1
 800c7ca:	6122      	str	r2, [r4, #16]
 800c7cc:	b1d5      	cbz	r5, 800c804 <__d2b+0x98>
 800c7ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7d2:	4405      	add	r5, r0
 800c7d4:	f8c9 5000 	str.w	r5, [r9]
 800c7d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7dc:	f8c8 0000 	str.w	r0, [r8]
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	b003      	add	sp, #12
 800c7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7ec:	e7d5      	b.n	800c79a <__d2b+0x2e>
 800c7ee:	6161      	str	r1, [r4, #20]
 800c7f0:	e7e5      	b.n	800c7be <__d2b+0x52>
 800c7f2:	a801      	add	r0, sp, #4
 800c7f4:	f7ff fd5a 	bl	800c2ac <__lo0bits>
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	6163      	str	r3, [r4, #20]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	6122      	str	r2, [r4, #16]
 800c800:	3020      	adds	r0, #32
 800c802:	e7e3      	b.n	800c7cc <__d2b+0x60>
 800c804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c80c:	f8c9 0000 	str.w	r0, [r9]
 800c810:	6918      	ldr	r0, [r3, #16]
 800c812:	f7ff fd2b 	bl	800c26c <__hi0bits>
 800c816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c81a:	e7df      	b.n	800c7dc <__d2b+0x70>
 800c81c:	0800ee7b 	.word	0x0800ee7b
 800c820:	0800ee8c 	.word	0x0800ee8c

0800c824 <_calloc_r>:
 800c824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c826:	fba1 2402 	umull	r2, r4, r1, r2
 800c82a:	b94c      	cbnz	r4, 800c840 <_calloc_r+0x1c>
 800c82c:	4611      	mov	r1, r2
 800c82e:	9201      	str	r2, [sp, #4]
 800c830:	f000 f87a 	bl	800c928 <_malloc_r>
 800c834:	9a01      	ldr	r2, [sp, #4]
 800c836:	4605      	mov	r5, r0
 800c838:	b930      	cbnz	r0, 800c848 <_calloc_r+0x24>
 800c83a:	4628      	mov	r0, r5
 800c83c:	b003      	add	sp, #12
 800c83e:	bd30      	pop	{r4, r5, pc}
 800c840:	220c      	movs	r2, #12
 800c842:	6002      	str	r2, [r0, #0]
 800c844:	2500      	movs	r5, #0
 800c846:	e7f8      	b.n	800c83a <_calloc_r+0x16>
 800c848:	4621      	mov	r1, r4
 800c84a:	f7fe f947 	bl	800aadc <memset>
 800c84e:	e7f4      	b.n	800c83a <_calloc_r+0x16>

0800c850 <_free_r>:
 800c850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c852:	2900      	cmp	r1, #0
 800c854:	d044      	beq.n	800c8e0 <_free_r+0x90>
 800c856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c85a:	9001      	str	r0, [sp, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f1a1 0404 	sub.w	r4, r1, #4
 800c862:	bfb8      	it	lt
 800c864:	18e4      	addlt	r4, r4, r3
 800c866:	f000 fa9b 	bl	800cda0 <__malloc_lock>
 800c86a:	4a1e      	ldr	r2, [pc, #120]	; (800c8e4 <_free_r+0x94>)
 800c86c:	9801      	ldr	r0, [sp, #4]
 800c86e:	6813      	ldr	r3, [r2, #0]
 800c870:	b933      	cbnz	r3, 800c880 <_free_r+0x30>
 800c872:	6063      	str	r3, [r4, #4]
 800c874:	6014      	str	r4, [r2, #0]
 800c876:	b003      	add	sp, #12
 800c878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c87c:	f000 ba96 	b.w	800cdac <__malloc_unlock>
 800c880:	42a3      	cmp	r3, r4
 800c882:	d908      	bls.n	800c896 <_free_r+0x46>
 800c884:	6825      	ldr	r5, [r4, #0]
 800c886:	1961      	adds	r1, r4, r5
 800c888:	428b      	cmp	r3, r1
 800c88a:	bf01      	itttt	eq
 800c88c:	6819      	ldreq	r1, [r3, #0]
 800c88e:	685b      	ldreq	r3, [r3, #4]
 800c890:	1949      	addeq	r1, r1, r5
 800c892:	6021      	streq	r1, [r4, #0]
 800c894:	e7ed      	b.n	800c872 <_free_r+0x22>
 800c896:	461a      	mov	r2, r3
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	b10b      	cbz	r3, 800c8a0 <_free_r+0x50>
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	d9fa      	bls.n	800c896 <_free_r+0x46>
 800c8a0:	6811      	ldr	r1, [r2, #0]
 800c8a2:	1855      	adds	r5, r2, r1
 800c8a4:	42a5      	cmp	r5, r4
 800c8a6:	d10b      	bne.n	800c8c0 <_free_r+0x70>
 800c8a8:	6824      	ldr	r4, [r4, #0]
 800c8aa:	4421      	add	r1, r4
 800c8ac:	1854      	adds	r4, r2, r1
 800c8ae:	42a3      	cmp	r3, r4
 800c8b0:	6011      	str	r1, [r2, #0]
 800c8b2:	d1e0      	bne.n	800c876 <_free_r+0x26>
 800c8b4:	681c      	ldr	r4, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	6053      	str	r3, [r2, #4]
 800c8ba:	4421      	add	r1, r4
 800c8bc:	6011      	str	r1, [r2, #0]
 800c8be:	e7da      	b.n	800c876 <_free_r+0x26>
 800c8c0:	d902      	bls.n	800c8c8 <_free_r+0x78>
 800c8c2:	230c      	movs	r3, #12
 800c8c4:	6003      	str	r3, [r0, #0]
 800c8c6:	e7d6      	b.n	800c876 <_free_r+0x26>
 800c8c8:	6825      	ldr	r5, [r4, #0]
 800c8ca:	1961      	adds	r1, r4, r5
 800c8cc:	428b      	cmp	r3, r1
 800c8ce:	bf04      	itt	eq
 800c8d0:	6819      	ldreq	r1, [r3, #0]
 800c8d2:	685b      	ldreq	r3, [r3, #4]
 800c8d4:	6063      	str	r3, [r4, #4]
 800c8d6:	bf04      	itt	eq
 800c8d8:	1949      	addeq	r1, r1, r5
 800c8da:	6021      	streq	r1, [r4, #0]
 800c8dc:	6054      	str	r4, [r2, #4]
 800c8de:	e7ca      	b.n	800c876 <_free_r+0x26>
 800c8e0:	b003      	add	sp, #12
 800c8e2:	bd30      	pop	{r4, r5, pc}
 800c8e4:	20000900 	.word	0x20000900

0800c8e8 <sbrk_aligned>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	4e0e      	ldr	r6, [pc, #56]	; (800c924 <sbrk_aligned+0x3c>)
 800c8ec:	460c      	mov	r4, r1
 800c8ee:	6831      	ldr	r1, [r6, #0]
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	b911      	cbnz	r1, 800c8fa <sbrk_aligned+0x12>
 800c8f4:	f000 f9e8 	bl	800ccc8 <_sbrk_r>
 800c8f8:	6030      	str	r0, [r6, #0]
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f000 f9e3 	bl	800ccc8 <_sbrk_r>
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	d00a      	beq.n	800c91c <sbrk_aligned+0x34>
 800c906:	1cc4      	adds	r4, r0, #3
 800c908:	f024 0403 	bic.w	r4, r4, #3
 800c90c:	42a0      	cmp	r0, r4
 800c90e:	d007      	beq.n	800c920 <sbrk_aligned+0x38>
 800c910:	1a21      	subs	r1, r4, r0
 800c912:	4628      	mov	r0, r5
 800c914:	f000 f9d8 	bl	800ccc8 <_sbrk_r>
 800c918:	3001      	adds	r0, #1
 800c91a:	d101      	bne.n	800c920 <sbrk_aligned+0x38>
 800c91c:	f04f 34ff 	mov.w	r4, #4294967295
 800c920:	4620      	mov	r0, r4
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	20000904 	.word	0x20000904

0800c928 <_malloc_r>:
 800c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92c:	1ccd      	adds	r5, r1, #3
 800c92e:	f025 0503 	bic.w	r5, r5, #3
 800c932:	3508      	adds	r5, #8
 800c934:	2d0c      	cmp	r5, #12
 800c936:	bf38      	it	cc
 800c938:	250c      	movcc	r5, #12
 800c93a:	2d00      	cmp	r5, #0
 800c93c:	4607      	mov	r7, r0
 800c93e:	db01      	blt.n	800c944 <_malloc_r+0x1c>
 800c940:	42a9      	cmp	r1, r5
 800c942:	d905      	bls.n	800c950 <_malloc_r+0x28>
 800c944:	230c      	movs	r3, #12
 800c946:	603b      	str	r3, [r7, #0]
 800c948:	2600      	movs	r6, #0
 800c94a:	4630      	mov	r0, r6
 800c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c950:	4e2e      	ldr	r6, [pc, #184]	; (800ca0c <_malloc_r+0xe4>)
 800c952:	f000 fa25 	bl	800cda0 <__malloc_lock>
 800c956:	6833      	ldr	r3, [r6, #0]
 800c958:	461c      	mov	r4, r3
 800c95a:	bb34      	cbnz	r4, 800c9aa <_malloc_r+0x82>
 800c95c:	4629      	mov	r1, r5
 800c95e:	4638      	mov	r0, r7
 800c960:	f7ff ffc2 	bl	800c8e8 <sbrk_aligned>
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	4604      	mov	r4, r0
 800c968:	d14d      	bne.n	800ca06 <_malloc_r+0xde>
 800c96a:	6834      	ldr	r4, [r6, #0]
 800c96c:	4626      	mov	r6, r4
 800c96e:	2e00      	cmp	r6, #0
 800c970:	d140      	bne.n	800c9f4 <_malloc_r+0xcc>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	4631      	mov	r1, r6
 800c976:	4638      	mov	r0, r7
 800c978:	eb04 0803 	add.w	r8, r4, r3
 800c97c:	f000 f9a4 	bl	800ccc8 <_sbrk_r>
 800c980:	4580      	cmp	r8, r0
 800c982:	d13a      	bne.n	800c9fa <_malloc_r+0xd2>
 800c984:	6821      	ldr	r1, [r4, #0]
 800c986:	3503      	adds	r5, #3
 800c988:	1a6d      	subs	r5, r5, r1
 800c98a:	f025 0503 	bic.w	r5, r5, #3
 800c98e:	3508      	adds	r5, #8
 800c990:	2d0c      	cmp	r5, #12
 800c992:	bf38      	it	cc
 800c994:	250c      	movcc	r5, #12
 800c996:	4629      	mov	r1, r5
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff ffa5 	bl	800c8e8 <sbrk_aligned>
 800c99e:	3001      	adds	r0, #1
 800c9a0:	d02b      	beq.n	800c9fa <_malloc_r+0xd2>
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	442b      	add	r3, r5
 800c9a6:	6023      	str	r3, [r4, #0]
 800c9a8:	e00e      	b.n	800c9c8 <_malloc_r+0xa0>
 800c9aa:	6822      	ldr	r2, [r4, #0]
 800c9ac:	1b52      	subs	r2, r2, r5
 800c9ae:	d41e      	bmi.n	800c9ee <_malloc_r+0xc6>
 800c9b0:	2a0b      	cmp	r2, #11
 800c9b2:	d916      	bls.n	800c9e2 <_malloc_r+0xba>
 800c9b4:	1961      	adds	r1, r4, r5
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	6025      	str	r5, [r4, #0]
 800c9ba:	bf18      	it	ne
 800c9bc:	6059      	strne	r1, [r3, #4]
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	bf08      	it	eq
 800c9c2:	6031      	streq	r1, [r6, #0]
 800c9c4:	5162      	str	r2, [r4, r5]
 800c9c6:	604b      	str	r3, [r1, #4]
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f104 060b 	add.w	r6, r4, #11
 800c9ce:	f000 f9ed 	bl	800cdac <__malloc_unlock>
 800c9d2:	f026 0607 	bic.w	r6, r6, #7
 800c9d6:	1d23      	adds	r3, r4, #4
 800c9d8:	1af2      	subs	r2, r6, r3
 800c9da:	d0b6      	beq.n	800c94a <_malloc_r+0x22>
 800c9dc:	1b9b      	subs	r3, r3, r6
 800c9de:	50a3      	str	r3, [r4, r2]
 800c9e0:	e7b3      	b.n	800c94a <_malloc_r+0x22>
 800c9e2:	6862      	ldr	r2, [r4, #4]
 800c9e4:	42a3      	cmp	r3, r4
 800c9e6:	bf0c      	ite	eq
 800c9e8:	6032      	streq	r2, [r6, #0]
 800c9ea:	605a      	strne	r2, [r3, #4]
 800c9ec:	e7ec      	b.n	800c9c8 <_malloc_r+0xa0>
 800c9ee:	4623      	mov	r3, r4
 800c9f0:	6864      	ldr	r4, [r4, #4]
 800c9f2:	e7b2      	b.n	800c95a <_malloc_r+0x32>
 800c9f4:	4634      	mov	r4, r6
 800c9f6:	6876      	ldr	r6, [r6, #4]
 800c9f8:	e7b9      	b.n	800c96e <_malloc_r+0x46>
 800c9fa:	230c      	movs	r3, #12
 800c9fc:	603b      	str	r3, [r7, #0]
 800c9fe:	4638      	mov	r0, r7
 800ca00:	f000 f9d4 	bl	800cdac <__malloc_unlock>
 800ca04:	e7a1      	b.n	800c94a <_malloc_r+0x22>
 800ca06:	6025      	str	r5, [r4, #0]
 800ca08:	e7de      	b.n	800c9c8 <_malloc_r+0xa0>
 800ca0a:	bf00      	nop
 800ca0c:	20000900 	.word	0x20000900

0800ca10 <__ssputs_r>:
 800ca10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca14:	688e      	ldr	r6, [r1, #8]
 800ca16:	429e      	cmp	r6, r3
 800ca18:	4682      	mov	sl, r0
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	4690      	mov	r8, r2
 800ca1e:	461f      	mov	r7, r3
 800ca20:	d838      	bhi.n	800ca94 <__ssputs_r+0x84>
 800ca22:	898a      	ldrh	r2, [r1, #12]
 800ca24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca28:	d032      	beq.n	800ca90 <__ssputs_r+0x80>
 800ca2a:	6825      	ldr	r5, [r4, #0]
 800ca2c:	6909      	ldr	r1, [r1, #16]
 800ca2e:	eba5 0901 	sub.w	r9, r5, r1
 800ca32:	6965      	ldr	r5, [r4, #20]
 800ca34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	444b      	add	r3, r9
 800ca40:	106d      	asrs	r5, r5, #1
 800ca42:	429d      	cmp	r5, r3
 800ca44:	bf38      	it	cc
 800ca46:	461d      	movcc	r5, r3
 800ca48:	0553      	lsls	r3, r2, #21
 800ca4a:	d531      	bpl.n	800cab0 <__ssputs_r+0xa0>
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7ff ff6b 	bl	800c928 <_malloc_r>
 800ca52:	4606      	mov	r6, r0
 800ca54:	b950      	cbnz	r0, 800ca6c <__ssputs_r+0x5c>
 800ca56:	230c      	movs	r3, #12
 800ca58:	f8ca 3000 	str.w	r3, [sl]
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca62:	81a3      	strh	r3, [r4, #12]
 800ca64:	f04f 30ff 	mov.w	r0, #4294967295
 800ca68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca6c:	6921      	ldr	r1, [r4, #16]
 800ca6e:	464a      	mov	r2, r9
 800ca70:	f7fe f826 	bl	800aac0 <memcpy>
 800ca74:	89a3      	ldrh	r3, [r4, #12]
 800ca76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca7e:	81a3      	strh	r3, [r4, #12]
 800ca80:	6126      	str	r6, [r4, #16]
 800ca82:	6165      	str	r5, [r4, #20]
 800ca84:	444e      	add	r6, r9
 800ca86:	eba5 0509 	sub.w	r5, r5, r9
 800ca8a:	6026      	str	r6, [r4, #0]
 800ca8c:	60a5      	str	r5, [r4, #8]
 800ca8e:	463e      	mov	r6, r7
 800ca90:	42be      	cmp	r6, r7
 800ca92:	d900      	bls.n	800ca96 <__ssputs_r+0x86>
 800ca94:	463e      	mov	r6, r7
 800ca96:	6820      	ldr	r0, [r4, #0]
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4641      	mov	r1, r8
 800ca9c:	f000 f966 	bl	800cd6c <memmove>
 800caa0:	68a3      	ldr	r3, [r4, #8]
 800caa2:	1b9b      	subs	r3, r3, r6
 800caa4:	60a3      	str	r3, [r4, #8]
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	4433      	add	r3, r6
 800caaa:	6023      	str	r3, [r4, #0]
 800caac:	2000      	movs	r0, #0
 800caae:	e7db      	b.n	800ca68 <__ssputs_r+0x58>
 800cab0:	462a      	mov	r2, r5
 800cab2:	f000 f981 	bl	800cdb8 <_realloc_r>
 800cab6:	4606      	mov	r6, r0
 800cab8:	2800      	cmp	r0, #0
 800caba:	d1e1      	bne.n	800ca80 <__ssputs_r+0x70>
 800cabc:	6921      	ldr	r1, [r4, #16]
 800cabe:	4650      	mov	r0, sl
 800cac0:	f7ff fec6 	bl	800c850 <_free_r>
 800cac4:	e7c7      	b.n	800ca56 <__ssputs_r+0x46>
	...

0800cac8 <_svfiprintf_r>:
 800cac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	4698      	mov	r8, r3
 800cace:	898b      	ldrh	r3, [r1, #12]
 800cad0:	061b      	lsls	r3, r3, #24
 800cad2:	b09d      	sub	sp, #116	; 0x74
 800cad4:	4607      	mov	r7, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	4614      	mov	r4, r2
 800cada:	d50e      	bpl.n	800cafa <_svfiprintf_r+0x32>
 800cadc:	690b      	ldr	r3, [r1, #16]
 800cade:	b963      	cbnz	r3, 800cafa <_svfiprintf_r+0x32>
 800cae0:	2140      	movs	r1, #64	; 0x40
 800cae2:	f7ff ff21 	bl	800c928 <_malloc_r>
 800cae6:	6028      	str	r0, [r5, #0]
 800cae8:	6128      	str	r0, [r5, #16]
 800caea:	b920      	cbnz	r0, 800caf6 <_svfiprintf_r+0x2e>
 800caec:	230c      	movs	r3, #12
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	f04f 30ff 	mov.w	r0, #4294967295
 800caf4:	e0d1      	b.n	800cc9a <_svfiprintf_r+0x1d2>
 800caf6:	2340      	movs	r3, #64	; 0x40
 800caf8:	616b      	str	r3, [r5, #20]
 800cafa:	2300      	movs	r3, #0
 800cafc:	9309      	str	r3, [sp, #36]	; 0x24
 800cafe:	2320      	movs	r3, #32
 800cb00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb04:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb08:	2330      	movs	r3, #48	; 0x30
 800cb0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ccb4 <_svfiprintf_r+0x1ec>
 800cb0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb12:	f04f 0901 	mov.w	r9, #1
 800cb16:	4623      	mov	r3, r4
 800cb18:	469a      	mov	sl, r3
 800cb1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb1e:	b10a      	cbz	r2, 800cb24 <_svfiprintf_r+0x5c>
 800cb20:	2a25      	cmp	r2, #37	; 0x25
 800cb22:	d1f9      	bne.n	800cb18 <_svfiprintf_r+0x50>
 800cb24:	ebba 0b04 	subs.w	fp, sl, r4
 800cb28:	d00b      	beq.n	800cb42 <_svfiprintf_r+0x7a>
 800cb2a:	465b      	mov	r3, fp
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	4638      	mov	r0, r7
 800cb32:	f7ff ff6d 	bl	800ca10 <__ssputs_r>
 800cb36:	3001      	adds	r0, #1
 800cb38:	f000 80aa 	beq.w	800cc90 <_svfiprintf_r+0x1c8>
 800cb3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb3e:	445a      	add	r2, fp
 800cb40:	9209      	str	r2, [sp, #36]	; 0x24
 800cb42:	f89a 3000 	ldrb.w	r3, [sl]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 80a2 	beq.w	800cc90 <_svfiprintf_r+0x1c8>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb56:	f10a 0a01 	add.w	sl, sl, #1
 800cb5a:	9304      	str	r3, [sp, #16]
 800cb5c:	9307      	str	r3, [sp, #28]
 800cb5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb62:	931a      	str	r3, [sp, #104]	; 0x68
 800cb64:	4654      	mov	r4, sl
 800cb66:	2205      	movs	r2, #5
 800cb68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb6c:	4851      	ldr	r0, [pc, #324]	; (800ccb4 <_svfiprintf_r+0x1ec>)
 800cb6e:	f7f3 fb5f 	bl	8000230 <memchr>
 800cb72:	9a04      	ldr	r2, [sp, #16]
 800cb74:	b9d8      	cbnz	r0, 800cbae <_svfiprintf_r+0xe6>
 800cb76:	06d0      	lsls	r0, r2, #27
 800cb78:	bf44      	itt	mi
 800cb7a:	2320      	movmi	r3, #32
 800cb7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb80:	0711      	lsls	r1, r2, #28
 800cb82:	bf44      	itt	mi
 800cb84:	232b      	movmi	r3, #43	; 0x2b
 800cb86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb8e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb90:	d015      	beq.n	800cbbe <_svfiprintf_r+0xf6>
 800cb92:	9a07      	ldr	r2, [sp, #28]
 800cb94:	4654      	mov	r4, sl
 800cb96:	2000      	movs	r0, #0
 800cb98:	f04f 0c0a 	mov.w	ip, #10
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cba2:	3b30      	subs	r3, #48	; 0x30
 800cba4:	2b09      	cmp	r3, #9
 800cba6:	d94e      	bls.n	800cc46 <_svfiprintf_r+0x17e>
 800cba8:	b1b0      	cbz	r0, 800cbd8 <_svfiprintf_r+0x110>
 800cbaa:	9207      	str	r2, [sp, #28]
 800cbac:	e014      	b.n	800cbd8 <_svfiprintf_r+0x110>
 800cbae:	eba0 0308 	sub.w	r3, r0, r8
 800cbb2:	fa09 f303 	lsl.w	r3, r9, r3
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	9304      	str	r3, [sp, #16]
 800cbba:	46a2      	mov	sl, r4
 800cbbc:	e7d2      	b.n	800cb64 <_svfiprintf_r+0x9c>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	1d19      	adds	r1, r3, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	9103      	str	r1, [sp, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bfbb      	ittet	lt
 800cbca:	425b      	neglt	r3, r3
 800cbcc:	f042 0202 	orrlt.w	r2, r2, #2
 800cbd0:	9307      	strge	r3, [sp, #28]
 800cbd2:	9307      	strlt	r3, [sp, #28]
 800cbd4:	bfb8      	it	lt
 800cbd6:	9204      	strlt	r2, [sp, #16]
 800cbd8:	7823      	ldrb	r3, [r4, #0]
 800cbda:	2b2e      	cmp	r3, #46	; 0x2e
 800cbdc:	d10c      	bne.n	800cbf8 <_svfiprintf_r+0x130>
 800cbde:	7863      	ldrb	r3, [r4, #1]
 800cbe0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe2:	d135      	bne.n	800cc50 <_svfiprintf_r+0x188>
 800cbe4:	9b03      	ldr	r3, [sp, #12]
 800cbe6:	1d1a      	adds	r2, r3, #4
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	9203      	str	r2, [sp, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	bfb8      	it	lt
 800cbf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbf4:	3402      	adds	r4, #2
 800cbf6:	9305      	str	r3, [sp, #20]
 800cbf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ccc4 <_svfiprintf_r+0x1fc>
 800cbfc:	7821      	ldrb	r1, [r4, #0]
 800cbfe:	2203      	movs	r2, #3
 800cc00:	4650      	mov	r0, sl
 800cc02:	f7f3 fb15 	bl	8000230 <memchr>
 800cc06:	b140      	cbz	r0, 800cc1a <_svfiprintf_r+0x152>
 800cc08:	2340      	movs	r3, #64	; 0x40
 800cc0a:	eba0 000a 	sub.w	r0, r0, sl
 800cc0e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	4303      	orrs	r3, r0
 800cc16:	3401      	adds	r4, #1
 800cc18:	9304      	str	r3, [sp, #16]
 800cc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc1e:	4826      	ldr	r0, [pc, #152]	; (800ccb8 <_svfiprintf_r+0x1f0>)
 800cc20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc24:	2206      	movs	r2, #6
 800cc26:	f7f3 fb03 	bl	8000230 <memchr>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d038      	beq.n	800cca0 <_svfiprintf_r+0x1d8>
 800cc2e:	4b23      	ldr	r3, [pc, #140]	; (800ccbc <_svfiprintf_r+0x1f4>)
 800cc30:	bb1b      	cbnz	r3, 800cc7a <_svfiprintf_r+0x1b2>
 800cc32:	9b03      	ldr	r3, [sp, #12]
 800cc34:	3307      	adds	r3, #7
 800cc36:	f023 0307 	bic.w	r3, r3, #7
 800cc3a:	3308      	adds	r3, #8
 800cc3c:	9303      	str	r3, [sp, #12]
 800cc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc40:	4433      	add	r3, r6
 800cc42:	9309      	str	r3, [sp, #36]	; 0x24
 800cc44:	e767      	b.n	800cb16 <_svfiprintf_r+0x4e>
 800cc46:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	e7a5      	b.n	800cb9c <_svfiprintf_r+0xd4>
 800cc50:	2300      	movs	r3, #0
 800cc52:	3401      	adds	r4, #1
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	4619      	mov	r1, r3
 800cc58:	f04f 0c0a 	mov.w	ip, #10
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc62:	3a30      	subs	r2, #48	; 0x30
 800cc64:	2a09      	cmp	r2, #9
 800cc66:	d903      	bls.n	800cc70 <_svfiprintf_r+0x1a8>
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d0c5      	beq.n	800cbf8 <_svfiprintf_r+0x130>
 800cc6c:	9105      	str	r1, [sp, #20]
 800cc6e:	e7c3      	b.n	800cbf8 <_svfiprintf_r+0x130>
 800cc70:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc74:	4604      	mov	r4, r0
 800cc76:	2301      	movs	r3, #1
 800cc78:	e7f0      	b.n	800cc5c <_svfiprintf_r+0x194>
 800cc7a:	ab03      	add	r3, sp, #12
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	462a      	mov	r2, r5
 800cc80:	4b0f      	ldr	r3, [pc, #60]	; (800ccc0 <_svfiprintf_r+0x1f8>)
 800cc82:	a904      	add	r1, sp, #16
 800cc84:	4638      	mov	r0, r7
 800cc86:	f7fd ffd1 	bl	800ac2c <_printf_float>
 800cc8a:	1c42      	adds	r2, r0, #1
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	d1d6      	bne.n	800cc3e <_svfiprintf_r+0x176>
 800cc90:	89ab      	ldrh	r3, [r5, #12]
 800cc92:	065b      	lsls	r3, r3, #25
 800cc94:	f53f af2c 	bmi.w	800caf0 <_svfiprintf_r+0x28>
 800cc98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc9a:	b01d      	add	sp, #116	; 0x74
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	ab03      	add	r3, sp, #12
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	462a      	mov	r2, r5
 800cca6:	4b06      	ldr	r3, [pc, #24]	; (800ccc0 <_svfiprintf_r+0x1f8>)
 800cca8:	a904      	add	r1, sp, #16
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f7fe fa62 	bl	800b174 <_printf_i>
 800ccb0:	e7eb      	b.n	800cc8a <_svfiprintf_r+0x1c2>
 800ccb2:	bf00      	nop
 800ccb4:	0800efe4 	.word	0x0800efe4
 800ccb8:	0800efee 	.word	0x0800efee
 800ccbc:	0800ac2d 	.word	0x0800ac2d
 800ccc0:	0800ca11 	.word	0x0800ca11
 800ccc4:	0800efea 	.word	0x0800efea

0800ccc8 <_sbrk_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4d06      	ldr	r5, [pc, #24]	; (800cce4 <_sbrk_r+0x1c>)
 800cccc:	2300      	movs	r3, #0
 800ccce:	4604      	mov	r4, r0
 800ccd0:	4608      	mov	r0, r1
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	f7f7 fd8e 	bl	80047f4 <_sbrk>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d102      	bne.n	800cce2 <_sbrk_r+0x1a>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	b103      	cbz	r3, 800cce2 <_sbrk_r+0x1a>
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	bd38      	pop	{r3, r4, r5, pc}
 800cce4:	20000908 	.word	0x20000908

0800cce8 <__assert_func>:
 800cce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccea:	4614      	mov	r4, r2
 800ccec:	461a      	mov	r2, r3
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <__assert_func+0x2c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4605      	mov	r5, r0
 800ccf4:	68d8      	ldr	r0, [r3, #12]
 800ccf6:	b14c      	cbz	r4, 800cd0c <__assert_func+0x24>
 800ccf8:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <__assert_func+0x30>)
 800ccfa:	9100      	str	r1, [sp, #0]
 800ccfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd00:	4906      	ldr	r1, [pc, #24]	; (800cd1c <__assert_func+0x34>)
 800cd02:	462b      	mov	r3, r5
 800cd04:	f000 f80e 	bl	800cd24 <fiprintf>
 800cd08:	f000 faac 	bl	800d264 <abort>
 800cd0c:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <__assert_func+0x38>)
 800cd0e:	461c      	mov	r4, r3
 800cd10:	e7f3      	b.n	800ccfa <__assert_func+0x12>
 800cd12:	bf00      	nop
 800cd14:	20000064 	.word	0x20000064
 800cd18:	0800eff5 	.word	0x0800eff5
 800cd1c:	0800f002 	.word	0x0800f002
 800cd20:	0800f030 	.word	0x0800f030

0800cd24 <fiprintf>:
 800cd24:	b40e      	push	{r1, r2, r3}
 800cd26:	b503      	push	{r0, r1, lr}
 800cd28:	4601      	mov	r1, r0
 800cd2a:	ab03      	add	r3, sp, #12
 800cd2c:	4805      	ldr	r0, [pc, #20]	; (800cd44 <fiprintf+0x20>)
 800cd2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd32:	6800      	ldr	r0, [r0, #0]
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	f000 f897 	bl	800ce68 <_vfiprintf_r>
 800cd3a:	b002      	add	sp, #8
 800cd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd40:	b003      	add	sp, #12
 800cd42:	4770      	bx	lr
 800cd44:	20000064 	.word	0x20000064

0800cd48 <__ascii_mbtowc>:
 800cd48:	b082      	sub	sp, #8
 800cd4a:	b901      	cbnz	r1, 800cd4e <__ascii_mbtowc+0x6>
 800cd4c:	a901      	add	r1, sp, #4
 800cd4e:	b142      	cbz	r2, 800cd62 <__ascii_mbtowc+0x1a>
 800cd50:	b14b      	cbz	r3, 800cd66 <__ascii_mbtowc+0x1e>
 800cd52:	7813      	ldrb	r3, [r2, #0]
 800cd54:	600b      	str	r3, [r1, #0]
 800cd56:	7812      	ldrb	r2, [r2, #0]
 800cd58:	1e10      	subs	r0, r2, #0
 800cd5a:	bf18      	it	ne
 800cd5c:	2001      	movne	r0, #1
 800cd5e:	b002      	add	sp, #8
 800cd60:	4770      	bx	lr
 800cd62:	4610      	mov	r0, r2
 800cd64:	e7fb      	b.n	800cd5e <__ascii_mbtowc+0x16>
 800cd66:	f06f 0001 	mvn.w	r0, #1
 800cd6a:	e7f8      	b.n	800cd5e <__ascii_mbtowc+0x16>

0800cd6c <memmove>:
 800cd6c:	4288      	cmp	r0, r1
 800cd6e:	b510      	push	{r4, lr}
 800cd70:	eb01 0402 	add.w	r4, r1, r2
 800cd74:	d902      	bls.n	800cd7c <memmove+0x10>
 800cd76:	4284      	cmp	r4, r0
 800cd78:	4623      	mov	r3, r4
 800cd7a:	d807      	bhi.n	800cd8c <memmove+0x20>
 800cd7c:	1e43      	subs	r3, r0, #1
 800cd7e:	42a1      	cmp	r1, r4
 800cd80:	d008      	beq.n	800cd94 <memmove+0x28>
 800cd82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd8a:	e7f8      	b.n	800cd7e <memmove+0x12>
 800cd8c:	4402      	add	r2, r0
 800cd8e:	4601      	mov	r1, r0
 800cd90:	428a      	cmp	r2, r1
 800cd92:	d100      	bne.n	800cd96 <memmove+0x2a>
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd9e:	e7f7      	b.n	800cd90 <memmove+0x24>

0800cda0 <__malloc_lock>:
 800cda0:	4801      	ldr	r0, [pc, #4]	; (800cda8 <__malloc_lock+0x8>)
 800cda2:	f000 bc1f 	b.w	800d5e4 <__retarget_lock_acquire_recursive>
 800cda6:	bf00      	nop
 800cda8:	2000090c 	.word	0x2000090c

0800cdac <__malloc_unlock>:
 800cdac:	4801      	ldr	r0, [pc, #4]	; (800cdb4 <__malloc_unlock+0x8>)
 800cdae:	f000 bc1a 	b.w	800d5e6 <__retarget_lock_release_recursive>
 800cdb2:	bf00      	nop
 800cdb4:	2000090c 	.word	0x2000090c

0800cdb8 <_realloc_r>:
 800cdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	4680      	mov	r8, r0
 800cdbe:	4614      	mov	r4, r2
 800cdc0:	460e      	mov	r6, r1
 800cdc2:	b921      	cbnz	r1, 800cdce <_realloc_r+0x16>
 800cdc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc8:	4611      	mov	r1, r2
 800cdca:	f7ff bdad 	b.w	800c928 <_malloc_r>
 800cdce:	b92a      	cbnz	r2, 800cddc <_realloc_r+0x24>
 800cdd0:	f7ff fd3e 	bl	800c850 <_free_r>
 800cdd4:	4625      	mov	r5, r4
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	f000 fc6a 	bl	800d6b4 <_malloc_usable_size_r>
 800cde0:	4284      	cmp	r4, r0
 800cde2:	4607      	mov	r7, r0
 800cde4:	d802      	bhi.n	800cdec <_realloc_r+0x34>
 800cde6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdea:	d812      	bhi.n	800ce12 <_realloc_r+0x5a>
 800cdec:	4621      	mov	r1, r4
 800cdee:	4640      	mov	r0, r8
 800cdf0:	f7ff fd9a 	bl	800c928 <_malloc_r>
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d0ed      	beq.n	800cdd6 <_realloc_r+0x1e>
 800cdfa:	42bc      	cmp	r4, r7
 800cdfc:	4622      	mov	r2, r4
 800cdfe:	4631      	mov	r1, r6
 800ce00:	bf28      	it	cs
 800ce02:	463a      	movcs	r2, r7
 800ce04:	f7fd fe5c 	bl	800aac0 <memcpy>
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	f7ff fd20 	bl	800c850 <_free_r>
 800ce10:	e7e1      	b.n	800cdd6 <_realloc_r+0x1e>
 800ce12:	4635      	mov	r5, r6
 800ce14:	e7df      	b.n	800cdd6 <_realloc_r+0x1e>

0800ce16 <__sfputc_r>:
 800ce16:	6893      	ldr	r3, [r2, #8]
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	b410      	push	{r4}
 800ce1e:	6093      	str	r3, [r2, #8]
 800ce20:	da08      	bge.n	800ce34 <__sfputc_r+0x1e>
 800ce22:	6994      	ldr	r4, [r2, #24]
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	db01      	blt.n	800ce2c <__sfputc_r+0x16>
 800ce28:	290a      	cmp	r1, #10
 800ce2a:	d103      	bne.n	800ce34 <__sfputc_r+0x1e>
 800ce2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce30:	f000 b94a 	b.w	800d0c8 <__swbuf_r>
 800ce34:	6813      	ldr	r3, [r2, #0]
 800ce36:	1c58      	adds	r0, r3, #1
 800ce38:	6010      	str	r0, [r2, #0]
 800ce3a:	7019      	strb	r1, [r3, #0]
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <__sfputs_r>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	4606      	mov	r6, r0
 800ce48:	460f      	mov	r7, r1
 800ce4a:	4614      	mov	r4, r2
 800ce4c:	18d5      	adds	r5, r2, r3
 800ce4e:	42ac      	cmp	r4, r5
 800ce50:	d101      	bne.n	800ce56 <__sfputs_r+0x12>
 800ce52:	2000      	movs	r0, #0
 800ce54:	e007      	b.n	800ce66 <__sfputs_r+0x22>
 800ce56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce5a:	463a      	mov	r2, r7
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff ffda 	bl	800ce16 <__sfputc_r>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	d1f3      	bne.n	800ce4e <__sfputs_r+0xa>
 800ce66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce68 <_vfiprintf_r>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	460d      	mov	r5, r1
 800ce6e:	b09d      	sub	sp, #116	; 0x74
 800ce70:	4614      	mov	r4, r2
 800ce72:	4698      	mov	r8, r3
 800ce74:	4606      	mov	r6, r0
 800ce76:	b118      	cbz	r0, 800ce80 <_vfiprintf_r+0x18>
 800ce78:	6983      	ldr	r3, [r0, #24]
 800ce7a:	b90b      	cbnz	r3, 800ce80 <_vfiprintf_r+0x18>
 800ce7c:	f000 fb14 	bl	800d4a8 <__sinit>
 800ce80:	4b89      	ldr	r3, [pc, #548]	; (800d0a8 <_vfiprintf_r+0x240>)
 800ce82:	429d      	cmp	r5, r3
 800ce84:	d11b      	bne.n	800cebe <_vfiprintf_r+0x56>
 800ce86:	6875      	ldr	r5, [r6, #4]
 800ce88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce8a:	07d9      	lsls	r1, r3, #31
 800ce8c:	d405      	bmi.n	800ce9a <_vfiprintf_r+0x32>
 800ce8e:	89ab      	ldrh	r3, [r5, #12]
 800ce90:	059a      	lsls	r2, r3, #22
 800ce92:	d402      	bmi.n	800ce9a <_vfiprintf_r+0x32>
 800ce94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce96:	f000 fba5 	bl	800d5e4 <__retarget_lock_acquire_recursive>
 800ce9a:	89ab      	ldrh	r3, [r5, #12]
 800ce9c:	071b      	lsls	r3, r3, #28
 800ce9e:	d501      	bpl.n	800cea4 <_vfiprintf_r+0x3c>
 800cea0:	692b      	ldr	r3, [r5, #16]
 800cea2:	b9eb      	cbnz	r3, 800cee0 <_vfiprintf_r+0x78>
 800cea4:	4629      	mov	r1, r5
 800cea6:	4630      	mov	r0, r6
 800cea8:	f000 f96e 	bl	800d188 <__swsetup_r>
 800ceac:	b1c0      	cbz	r0, 800cee0 <_vfiprintf_r+0x78>
 800ceae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceb0:	07dc      	lsls	r4, r3, #31
 800ceb2:	d50e      	bpl.n	800ced2 <_vfiprintf_r+0x6a>
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	b01d      	add	sp, #116	; 0x74
 800ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebe:	4b7b      	ldr	r3, [pc, #492]	; (800d0ac <_vfiprintf_r+0x244>)
 800cec0:	429d      	cmp	r5, r3
 800cec2:	d101      	bne.n	800cec8 <_vfiprintf_r+0x60>
 800cec4:	68b5      	ldr	r5, [r6, #8]
 800cec6:	e7df      	b.n	800ce88 <_vfiprintf_r+0x20>
 800cec8:	4b79      	ldr	r3, [pc, #484]	; (800d0b0 <_vfiprintf_r+0x248>)
 800ceca:	429d      	cmp	r5, r3
 800cecc:	bf08      	it	eq
 800cece:	68f5      	ldreq	r5, [r6, #12]
 800ced0:	e7da      	b.n	800ce88 <_vfiprintf_r+0x20>
 800ced2:	89ab      	ldrh	r3, [r5, #12]
 800ced4:	0598      	lsls	r0, r3, #22
 800ced6:	d4ed      	bmi.n	800ceb4 <_vfiprintf_r+0x4c>
 800ced8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceda:	f000 fb84 	bl	800d5e6 <__retarget_lock_release_recursive>
 800cede:	e7e9      	b.n	800ceb4 <_vfiprintf_r+0x4c>
 800cee0:	2300      	movs	r3, #0
 800cee2:	9309      	str	r3, [sp, #36]	; 0x24
 800cee4:	2320      	movs	r3, #32
 800cee6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceea:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceee:	2330      	movs	r3, #48	; 0x30
 800cef0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d0b4 <_vfiprintf_r+0x24c>
 800cef4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cef8:	f04f 0901 	mov.w	r9, #1
 800cefc:	4623      	mov	r3, r4
 800cefe:	469a      	mov	sl, r3
 800cf00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf04:	b10a      	cbz	r2, 800cf0a <_vfiprintf_r+0xa2>
 800cf06:	2a25      	cmp	r2, #37	; 0x25
 800cf08:	d1f9      	bne.n	800cefe <_vfiprintf_r+0x96>
 800cf0a:	ebba 0b04 	subs.w	fp, sl, r4
 800cf0e:	d00b      	beq.n	800cf28 <_vfiprintf_r+0xc0>
 800cf10:	465b      	mov	r3, fp
 800cf12:	4622      	mov	r2, r4
 800cf14:	4629      	mov	r1, r5
 800cf16:	4630      	mov	r0, r6
 800cf18:	f7ff ff94 	bl	800ce44 <__sfputs_r>
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	f000 80aa 	beq.w	800d076 <_vfiprintf_r+0x20e>
 800cf22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf24:	445a      	add	r2, fp
 800cf26:	9209      	str	r2, [sp, #36]	; 0x24
 800cf28:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 80a2 	beq.w	800d076 <_vfiprintf_r+0x20e>
 800cf32:	2300      	movs	r3, #0
 800cf34:	f04f 32ff 	mov.w	r2, #4294967295
 800cf38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf3c:	f10a 0a01 	add.w	sl, sl, #1
 800cf40:	9304      	str	r3, [sp, #16]
 800cf42:	9307      	str	r3, [sp, #28]
 800cf44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf48:	931a      	str	r3, [sp, #104]	; 0x68
 800cf4a:	4654      	mov	r4, sl
 800cf4c:	2205      	movs	r2, #5
 800cf4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf52:	4858      	ldr	r0, [pc, #352]	; (800d0b4 <_vfiprintf_r+0x24c>)
 800cf54:	f7f3 f96c 	bl	8000230 <memchr>
 800cf58:	9a04      	ldr	r2, [sp, #16]
 800cf5a:	b9d8      	cbnz	r0, 800cf94 <_vfiprintf_r+0x12c>
 800cf5c:	06d1      	lsls	r1, r2, #27
 800cf5e:	bf44      	itt	mi
 800cf60:	2320      	movmi	r3, #32
 800cf62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf66:	0713      	lsls	r3, r2, #28
 800cf68:	bf44      	itt	mi
 800cf6a:	232b      	movmi	r3, #43	; 0x2b
 800cf6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf70:	f89a 3000 	ldrb.w	r3, [sl]
 800cf74:	2b2a      	cmp	r3, #42	; 0x2a
 800cf76:	d015      	beq.n	800cfa4 <_vfiprintf_r+0x13c>
 800cf78:	9a07      	ldr	r2, [sp, #28]
 800cf7a:	4654      	mov	r4, sl
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	f04f 0c0a 	mov.w	ip, #10
 800cf82:	4621      	mov	r1, r4
 800cf84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf88:	3b30      	subs	r3, #48	; 0x30
 800cf8a:	2b09      	cmp	r3, #9
 800cf8c:	d94e      	bls.n	800d02c <_vfiprintf_r+0x1c4>
 800cf8e:	b1b0      	cbz	r0, 800cfbe <_vfiprintf_r+0x156>
 800cf90:	9207      	str	r2, [sp, #28]
 800cf92:	e014      	b.n	800cfbe <_vfiprintf_r+0x156>
 800cf94:	eba0 0308 	sub.w	r3, r0, r8
 800cf98:	fa09 f303 	lsl.w	r3, r9, r3
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	9304      	str	r3, [sp, #16]
 800cfa0:	46a2      	mov	sl, r4
 800cfa2:	e7d2      	b.n	800cf4a <_vfiprintf_r+0xe2>
 800cfa4:	9b03      	ldr	r3, [sp, #12]
 800cfa6:	1d19      	adds	r1, r3, #4
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	9103      	str	r1, [sp, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	bfbb      	ittet	lt
 800cfb0:	425b      	neglt	r3, r3
 800cfb2:	f042 0202 	orrlt.w	r2, r2, #2
 800cfb6:	9307      	strge	r3, [sp, #28]
 800cfb8:	9307      	strlt	r3, [sp, #28]
 800cfba:	bfb8      	it	lt
 800cfbc:	9204      	strlt	r2, [sp, #16]
 800cfbe:	7823      	ldrb	r3, [r4, #0]
 800cfc0:	2b2e      	cmp	r3, #46	; 0x2e
 800cfc2:	d10c      	bne.n	800cfde <_vfiprintf_r+0x176>
 800cfc4:	7863      	ldrb	r3, [r4, #1]
 800cfc6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc8:	d135      	bne.n	800d036 <_vfiprintf_r+0x1ce>
 800cfca:	9b03      	ldr	r3, [sp, #12]
 800cfcc:	1d1a      	adds	r2, r3, #4
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	9203      	str	r2, [sp, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	bfb8      	it	lt
 800cfd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfda:	3402      	adds	r4, #2
 800cfdc:	9305      	str	r3, [sp, #20]
 800cfde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0c4 <_vfiprintf_r+0x25c>
 800cfe2:	7821      	ldrb	r1, [r4, #0]
 800cfe4:	2203      	movs	r2, #3
 800cfe6:	4650      	mov	r0, sl
 800cfe8:	f7f3 f922 	bl	8000230 <memchr>
 800cfec:	b140      	cbz	r0, 800d000 <_vfiprintf_r+0x198>
 800cfee:	2340      	movs	r3, #64	; 0x40
 800cff0:	eba0 000a 	sub.w	r0, r0, sl
 800cff4:	fa03 f000 	lsl.w	r0, r3, r0
 800cff8:	9b04      	ldr	r3, [sp, #16]
 800cffa:	4303      	orrs	r3, r0
 800cffc:	3401      	adds	r4, #1
 800cffe:	9304      	str	r3, [sp, #16]
 800d000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d004:	482c      	ldr	r0, [pc, #176]	; (800d0b8 <_vfiprintf_r+0x250>)
 800d006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d00a:	2206      	movs	r2, #6
 800d00c:	f7f3 f910 	bl	8000230 <memchr>
 800d010:	2800      	cmp	r0, #0
 800d012:	d03f      	beq.n	800d094 <_vfiprintf_r+0x22c>
 800d014:	4b29      	ldr	r3, [pc, #164]	; (800d0bc <_vfiprintf_r+0x254>)
 800d016:	bb1b      	cbnz	r3, 800d060 <_vfiprintf_r+0x1f8>
 800d018:	9b03      	ldr	r3, [sp, #12]
 800d01a:	3307      	adds	r3, #7
 800d01c:	f023 0307 	bic.w	r3, r3, #7
 800d020:	3308      	adds	r3, #8
 800d022:	9303      	str	r3, [sp, #12]
 800d024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d026:	443b      	add	r3, r7
 800d028:	9309      	str	r3, [sp, #36]	; 0x24
 800d02a:	e767      	b.n	800cefc <_vfiprintf_r+0x94>
 800d02c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d030:	460c      	mov	r4, r1
 800d032:	2001      	movs	r0, #1
 800d034:	e7a5      	b.n	800cf82 <_vfiprintf_r+0x11a>
 800d036:	2300      	movs	r3, #0
 800d038:	3401      	adds	r4, #1
 800d03a:	9305      	str	r3, [sp, #20]
 800d03c:	4619      	mov	r1, r3
 800d03e:	f04f 0c0a 	mov.w	ip, #10
 800d042:	4620      	mov	r0, r4
 800d044:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d048:	3a30      	subs	r2, #48	; 0x30
 800d04a:	2a09      	cmp	r2, #9
 800d04c:	d903      	bls.n	800d056 <_vfiprintf_r+0x1ee>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0c5      	beq.n	800cfde <_vfiprintf_r+0x176>
 800d052:	9105      	str	r1, [sp, #20]
 800d054:	e7c3      	b.n	800cfde <_vfiprintf_r+0x176>
 800d056:	fb0c 2101 	mla	r1, ip, r1, r2
 800d05a:	4604      	mov	r4, r0
 800d05c:	2301      	movs	r3, #1
 800d05e:	e7f0      	b.n	800d042 <_vfiprintf_r+0x1da>
 800d060:	ab03      	add	r3, sp, #12
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	462a      	mov	r2, r5
 800d066:	4b16      	ldr	r3, [pc, #88]	; (800d0c0 <_vfiprintf_r+0x258>)
 800d068:	a904      	add	r1, sp, #16
 800d06a:	4630      	mov	r0, r6
 800d06c:	f7fd fdde 	bl	800ac2c <_printf_float>
 800d070:	4607      	mov	r7, r0
 800d072:	1c78      	adds	r0, r7, #1
 800d074:	d1d6      	bne.n	800d024 <_vfiprintf_r+0x1bc>
 800d076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d078:	07d9      	lsls	r1, r3, #31
 800d07a:	d405      	bmi.n	800d088 <_vfiprintf_r+0x220>
 800d07c:	89ab      	ldrh	r3, [r5, #12]
 800d07e:	059a      	lsls	r2, r3, #22
 800d080:	d402      	bmi.n	800d088 <_vfiprintf_r+0x220>
 800d082:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d084:	f000 faaf 	bl	800d5e6 <__retarget_lock_release_recursive>
 800d088:	89ab      	ldrh	r3, [r5, #12]
 800d08a:	065b      	lsls	r3, r3, #25
 800d08c:	f53f af12 	bmi.w	800ceb4 <_vfiprintf_r+0x4c>
 800d090:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d092:	e711      	b.n	800ceb8 <_vfiprintf_r+0x50>
 800d094:	ab03      	add	r3, sp, #12
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	462a      	mov	r2, r5
 800d09a:	4b09      	ldr	r3, [pc, #36]	; (800d0c0 <_vfiprintf_r+0x258>)
 800d09c:	a904      	add	r1, sp, #16
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7fe f868 	bl	800b174 <_printf_i>
 800d0a4:	e7e4      	b.n	800d070 <_vfiprintf_r+0x208>
 800d0a6:	bf00      	nop
 800d0a8:	0800f15c 	.word	0x0800f15c
 800d0ac:	0800f17c 	.word	0x0800f17c
 800d0b0:	0800f13c 	.word	0x0800f13c
 800d0b4:	0800efe4 	.word	0x0800efe4
 800d0b8:	0800efee 	.word	0x0800efee
 800d0bc:	0800ac2d 	.word	0x0800ac2d
 800d0c0:	0800ce45 	.word	0x0800ce45
 800d0c4:	0800efea 	.word	0x0800efea

0800d0c8 <__swbuf_r>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	460e      	mov	r6, r1
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	b118      	cbz	r0, 800d0da <__swbuf_r+0x12>
 800d0d2:	6983      	ldr	r3, [r0, #24]
 800d0d4:	b90b      	cbnz	r3, 800d0da <__swbuf_r+0x12>
 800d0d6:	f000 f9e7 	bl	800d4a8 <__sinit>
 800d0da:	4b21      	ldr	r3, [pc, #132]	; (800d160 <__swbuf_r+0x98>)
 800d0dc:	429c      	cmp	r4, r3
 800d0de:	d12b      	bne.n	800d138 <__swbuf_r+0x70>
 800d0e0:	686c      	ldr	r4, [r5, #4]
 800d0e2:	69a3      	ldr	r3, [r4, #24]
 800d0e4:	60a3      	str	r3, [r4, #8]
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	071a      	lsls	r2, r3, #28
 800d0ea:	d52f      	bpl.n	800d14c <__swbuf_r+0x84>
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	b36b      	cbz	r3, 800d14c <__swbuf_r+0x84>
 800d0f0:	6923      	ldr	r3, [r4, #16]
 800d0f2:	6820      	ldr	r0, [r4, #0]
 800d0f4:	1ac0      	subs	r0, r0, r3
 800d0f6:	6963      	ldr	r3, [r4, #20]
 800d0f8:	b2f6      	uxtb	r6, r6
 800d0fa:	4283      	cmp	r3, r0
 800d0fc:	4637      	mov	r7, r6
 800d0fe:	dc04      	bgt.n	800d10a <__swbuf_r+0x42>
 800d100:	4621      	mov	r1, r4
 800d102:	4628      	mov	r0, r5
 800d104:	f000 f93c 	bl	800d380 <_fflush_r>
 800d108:	bb30      	cbnz	r0, 800d158 <__swbuf_r+0x90>
 800d10a:	68a3      	ldr	r3, [r4, #8]
 800d10c:	3b01      	subs	r3, #1
 800d10e:	60a3      	str	r3, [r4, #8]
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	6022      	str	r2, [r4, #0]
 800d116:	701e      	strb	r6, [r3, #0]
 800d118:	6963      	ldr	r3, [r4, #20]
 800d11a:	3001      	adds	r0, #1
 800d11c:	4283      	cmp	r3, r0
 800d11e:	d004      	beq.n	800d12a <__swbuf_r+0x62>
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	07db      	lsls	r3, r3, #31
 800d124:	d506      	bpl.n	800d134 <__swbuf_r+0x6c>
 800d126:	2e0a      	cmp	r6, #10
 800d128:	d104      	bne.n	800d134 <__swbuf_r+0x6c>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4628      	mov	r0, r5
 800d12e:	f000 f927 	bl	800d380 <_fflush_r>
 800d132:	b988      	cbnz	r0, 800d158 <__swbuf_r+0x90>
 800d134:	4638      	mov	r0, r7
 800d136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d138:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <__swbuf_r+0x9c>)
 800d13a:	429c      	cmp	r4, r3
 800d13c:	d101      	bne.n	800d142 <__swbuf_r+0x7a>
 800d13e:	68ac      	ldr	r4, [r5, #8]
 800d140:	e7cf      	b.n	800d0e2 <__swbuf_r+0x1a>
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <__swbuf_r+0xa0>)
 800d144:	429c      	cmp	r4, r3
 800d146:	bf08      	it	eq
 800d148:	68ec      	ldreq	r4, [r5, #12]
 800d14a:	e7ca      	b.n	800d0e2 <__swbuf_r+0x1a>
 800d14c:	4621      	mov	r1, r4
 800d14e:	4628      	mov	r0, r5
 800d150:	f000 f81a 	bl	800d188 <__swsetup_r>
 800d154:	2800      	cmp	r0, #0
 800d156:	d0cb      	beq.n	800d0f0 <__swbuf_r+0x28>
 800d158:	f04f 37ff 	mov.w	r7, #4294967295
 800d15c:	e7ea      	b.n	800d134 <__swbuf_r+0x6c>
 800d15e:	bf00      	nop
 800d160:	0800f15c 	.word	0x0800f15c
 800d164:	0800f17c 	.word	0x0800f17c
 800d168:	0800f13c 	.word	0x0800f13c

0800d16c <__ascii_wctomb>:
 800d16c:	b149      	cbz	r1, 800d182 <__ascii_wctomb+0x16>
 800d16e:	2aff      	cmp	r2, #255	; 0xff
 800d170:	bf85      	ittet	hi
 800d172:	238a      	movhi	r3, #138	; 0x8a
 800d174:	6003      	strhi	r3, [r0, #0]
 800d176:	700a      	strbls	r2, [r1, #0]
 800d178:	f04f 30ff 	movhi.w	r0, #4294967295
 800d17c:	bf98      	it	ls
 800d17e:	2001      	movls	r0, #1
 800d180:	4770      	bx	lr
 800d182:	4608      	mov	r0, r1
 800d184:	4770      	bx	lr
	...

0800d188 <__swsetup_r>:
 800d188:	4b32      	ldr	r3, [pc, #200]	; (800d254 <__swsetup_r+0xcc>)
 800d18a:	b570      	push	{r4, r5, r6, lr}
 800d18c:	681d      	ldr	r5, [r3, #0]
 800d18e:	4606      	mov	r6, r0
 800d190:	460c      	mov	r4, r1
 800d192:	b125      	cbz	r5, 800d19e <__swsetup_r+0x16>
 800d194:	69ab      	ldr	r3, [r5, #24]
 800d196:	b913      	cbnz	r3, 800d19e <__swsetup_r+0x16>
 800d198:	4628      	mov	r0, r5
 800d19a:	f000 f985 	bl	800d4a8 <__sinit>
 800d19e:	4b2e      	ldr	r3, [pc, #184]	; (800d258 <__swsetup_r+0xd0>)
 800d1a0:	429c      	cmp	r4, r3
 800d1a2:	d10f      	bne.n	800d1c4 <__swsetup_r+0x3c>
 800d1a4:	686c      	ldr	r4, [r5, #4]
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1ac:	0719      	lsls	r1, r3, #28
 800d1ae:	d42c      	bmi.n	800d20a <__swsetup_r+0x82>
 800d1b0:	06dd      	lsls	r5, r3, #27
 800d1b2:	d411      	bmi.n	800d1d8 <__swsetup_r+0x50>
 800d1b4:	2309      	movs	r3, #9
 800d1b6:	6033      	str	r3, [r6, #0]
 800d1b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	e03e      	b.n	800d242 <__swsetup_r+0xba>
 800d1c4:	4b25      	ldr	r3, [pc, #148]	; (800d25c <__swsetup_r+0xd4>)
 800d1c6:	429c      	cmp	r4, r3
 800d1c8:	d101      	bne.n	800d1ce <__swsetup_r+0x46>
 800d1ca:	68ac      	ldr	r4, [r5, #8]
 800d1cc:	e7eb      	b.n	800d1a6 <__swsetup_r+0x1e>
 800d1ce:	4b24      	ldr	r3, [pc, #144]	; (800d260 <__swsetup_r+0xd8>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	bf08      	it	eq
 800d1d4:	68ec      	ldreq	r4, [r5, #12]
 800d1d6:	e7e6      	b.n	800d1a6 <__swsetup_r+0x1e>
 800d1d8:	0758      	lsls	r0, r3, #29
 800d1da:	d512      	bpl.n	800d202 <__swsetup_r+0x7a>
 800d1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1de:	b141      	cbz	r1, 800d1f2 <__swsetup_r+0x6a>
 800d1e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1e4:	4299      	cmp	r1, r3
 800d1e6:	d002      	beq.n	800d1ee <__swsetup_r+0x66>
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7ff fb31 	bl	800c850 <_free_r>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	6363      	str	r3, [r4, #52]	; 0x34
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	6063      	str	r3, [r4, #4]
 800d1fe:	6923      	ldr	r3, [r4, #16]
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	f043 0308 	orr.w	r3, r3, #8
 800d208:	81a3      	strh	r3, [r4, #12]
 800d20a:	6923      	ldr	r3, [r4, #16]
 800d20c:	b94b      	cbnz	r3, 800d222 <__swsetup_r+0x9a>
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d218:	d003      	beq.n	800d222 <__swsetup_r+0x9a>
 800d21a:	4621      	mov	r1, r4
 800d21c:	4630      	mov	r0, r6
 800d21e:	f000 fa09 	bl	800d634 <__smakebuf_r>
 800d222:	89a0      	ldrh	r0, [r4, #12]
 800d224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d228:	f010 0301 	ands.w	r3, r0, #1
 800d22c:	d00a      	beq.n	800d244 <__swsetup_r+0xbc>
 800d22e:	2300      	movs	r3, #0
 800d230:	60a3      	str	r3, [r4, #8]
 800d232:	6963      	ldr	r3, [r4, #20]
 800d234:	425b      	negs	r3, r3
 800d236:	61a3      	str	r3, [r4, #24]
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	b943      	cbnz	r3, 800d24e <__swsetup_r+0xc6>
 800d23c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d240:	d1ba      	bne.n	800d1b8 <__swsetup_r+0x30>
 800d242:	bd70      	pop	{r4, r5, r6, pc}
 800d244:	0781      	lsls	r1, r0, #30
 800d246:	bf58      	it	pl
 800d248:	6963      	ldrpl	r3, [r4, #20]
 800d24a:	60a3      	str	r3, [r4, #8]
 800d24c:	e7f4      	b.n	800d238 <__swsetup_r+0xb0>
 800d24e:	2000      	movs	r0, #0
 800d250:	e7f7      	b.n	800d242 <__swsetup_r+0xba>
 800d252:	bf00      	nop
 800d254:	20000064 	.word	0x20000064
 800d258:	0800f15c 	.word	0x0800f15c
 800d25c:	0800f17c 	.word	0x0800f17c
 800d260:	0800f13c 	.word	0x0800f13c

0800d264 <abort>:
 800d264:	b508      	push	{r3, lr}
 800d266:	2006      	movs	r0, #6
 800d268:	f000 fa54 	bl	800d714 <raise>
 800d26c:	2001      	movs	r0, #1
 800d26e:	f7f7 fa49 	bl	8004704 <_exit>
	...

0800d274 <__sflush_r>:
 800d274:	898a      	ldrh	r2, [r1, #12]
 800d276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d27a:	4605      	mov	r5, r0
 800d27c:	0710      	lsls	r0, r2, #28
 800d27e:	460c      	mov	r4, r1
 800d280:	d458      	bmi.n	800d334 <__sflush_r+0xc0>
 800d282:	684b      	ldr	r3, [r1, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	dc05      	bgt.n	800d294 <__sflush_r+0x20>
 800d288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	dc02      	bgt.n	800d294 <__sflush_r+0x20>
 800d28e:	2000      	movs	r0, #0
 800d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d296:	2e00      	cmp	r6, #0
 800d298:	d0f9      	beq.n	800d28e <__sflush_r+0x1a>
 800d29a:	2300      	movs	r3, #0
 800d29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2a0:	682f      	ldr	r7, [r5, #0]
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	d032      	beq.n	800d30c <__sflush_r+0x98>
 800d2a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	075a      	lsls	r2, r3, #29
 800d2ac:	d505      	bpl.n	800d2ba <__sflush_r+0x46>
 800d2ae:	6863      	ldr	r3, [r4, #4]
 800d2b0:	1ac0      	subs	r0, r0, r3
 800d2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2b4:	b10b      	cbz	r3, 800d2ba <__sflush_r+0x46>
 800d2b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2b8:	1ac0      	subs	r0, r0, r3
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4602      	mov	r2, r0
 800d2be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2c0:	6a21      	ldr	r1, [r4, #32]
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	47b0      	blx	r6
 800d2c6:	1c43      	adds	r3, r0, #1
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	d106      	bne.n	800d2da <__sflush_r+0x66>
 800d2cc:	6829      	ldr	r1, [r5, #0]
 800d2ce:	291d      	cmp	r1, #29
 800d2d0:	d82c      	bhi.n	800d32c <__sflush_r+0xb8>
 800d2d2:	4a2a      	ldr	r2, [pc, #168]	; (800d37c <__sflush_r+0x108>)
 800d2d4:	40ca      	lsrs	r2, r1
 800d2d6:	07d6      	lsls	r6, r2, #31
 800d2d8:	d528      	bpl.n	800d32c <__sflush_r+0xb8>
 800d2da:	2200      	movs	r2, #0
 800d2dc:	6062      	str	r2, [r4, #4]
 800d2de:	04d9      	lsls	r1, r3, #19
 800d2e0:	6922      	ldr	r2, [r4, #16]
 800d2e2:	6022      	str	r2, [r4, #0]
 800d2e4:	d504      	bpl.n	800d2f0 <__sflush_r+0x7c>
 800d2e6:	1c42      	adds	r2, r0, #1
 800d2e8:	d101      	bne.n	800d2ee <__sflush_r+0x7a>
 800d2ea:	682b      	ldr	r3, [r5, #0]
 800d2ec:	b903      	cbnz	r3, 800d2f0 <__sflush_r+0x7c>
 800d2ee:	6560      	str	r0, [r4, #84]	; 0x54
 800d2f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2f2:	602f      	str	r7, [r5, #0]
 800d2f4:	2900      	cmp	r1, #0
 800d2f6:	d0ca      	beq.n	800d28e <__sflush_r+0x1a>
 800d2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2fc:	4299      	cmp	r1, r3
 800d2fe:	d002      	beq.n	800d306 <__sflush_r+0x92>
 800d300:	4628      	mov	r0, r5
 800d302:	f7ff faa5 	bl	800c850 <_free_r>
 800d306:	2000      	movs	r0, #0
 800d308:	6360      	str	r0, [r4, #52]	; 0x34
 800d30a:	e7c1      	b.n	800d290 <__sflush_r+0x1c>
 800d30c:	6a21      	ldr	r1, [r4, #32]
 800d30e:	2301      	movs	r3, #1
 800d310:	4628      	mov	r0, r5
 800d312:	47b0      	blx	r6
 800d314:	1c41      	adds	r1, r0, #1
 800d316:	d1c7      	bne.n	800d2a8 <__sflush_r+0x34>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0c4      	beq.n	800d2a8 <__sflush_r+0x34>
 800d31e:	2b1d      	cmp	r3, #29
 800d320:	d001      	beq.n	800d326 <__sflush_r+0xb2>
 800d322:	2b16      	cmp	r3, #22
 800d324:	d101      	bne.n	800d32a <__sflush_r+0xb6>
 800d326:	602f      	str	r7, [r5, #0]
 800d328:	e7b1      	b.n	800d28e <__sflush_r+0x1a>
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d330:	81a3      	strh	r3, [r4, #12]
 800d332:	e7ad      	b.n	800d290 <__sflush_r+0x1c>
 800d334:	690f      	ldr	r7, [r1, #16]
 800d336:	2f00      	cmp	r7, #0
 800d338:	d0a9      	beq.n	800d28e <__sflush_r+0x1a>
 800d33a:	0793      	lsls	r3, r2, #30
 800d33c:	680e      	ldr	r6, [r1, #0]
 800d33e:	bf08      	it	eq
 800d340:	694b      	ldreq	r3, [r1, #20]
 800d342:	600f      	str	r7, [r1, #0]
 800d344:	bf18      	it	ne
 800d346:	2300      	movne	r3, #0
 800d348:	eba6 0807 	sub.w	r8, r6, r7
 800d34c:	608b      	str	r3, [r1, #8]
 800d34e:	f1b8 0f00 	cmp.w	r8, #0
 800d352:	dd9c      	ble.n	800d28e <__sflush_r+0x1a>
 800d354:	6a21      	ldr	r1, [r4, #32]
 800d356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d358:	4643      	mov	r3, r8
 800d35a:	463a      	mov	r2, r7
 800d35c:	4628      	mov	r0, r5
 800d35e:	47b0      	blx	r6
 800d360:	2800      	cmp	r0, #0
 800d362:	dc06      	bgt.n	800d372 <__sflush_r+0xfe>
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d36a:	81a3      	strh	r3, [r4, #12]
 800d36c:	f04f 30ff 	mov.w	r0, #4294967295
 800d370:	e78e      	b.n	800d290 <__sflush_r+0x1c>
 800d372:	4407      	add	r7, r0
 800d374:	eba8 0800 	sub.w	r8, r8, r0
 800d378:	e7e9      	b.n	800d34e <__sflush_r+0xda>
 800d37a:	bf00      	nop
 800d37c:	20400001 	.word	0x20400001

0800d380 <_fflush_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	690b      	ldr	r3, [r1, #16]
 800d384:	4605      	mov	r5, r0
 800d386:	460c      	mov	r4, r1
 800d388:	b913      	cbnz	r3, 800d390 <_fflush_r+0x10>
 800d38a:	2500      	movs	r5, #0
 800d38c:	4628      	mov	r0, r5
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	b118      	cbz	r0, 800d39a <_fflush_r+0x1a>
 800d392:	6983      	ldr	r3, [r0, #24]
 800d394:	b90b      	cbnz	r3, 800d39a <_fflush_r+0x1a>
 800d396:	f000 f887 	bl	800d4a8 <__sinit>
 800d39a:	4b14      	ldr	r3, [pc, #80]	; (800d3ec <_fflush_r+0x6c>)
 800d39c:	429c      	cmp	r4, r3
 800d39e:	d11b      	bne.n	800d3d8 <_fflush_r+0x58>
 800d3a0:	686c      	ldr	r4, [r5, #4]
 800d3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d0ef      	beq.n	800d38a <_fflush_r+0xa>
 800d3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3ac:	07d0      	lsls	r0, r2, #31
 800d3ae:	d404      	bmi.n	800d3ba <_fflush_r+0x3a>
 800d3b0:	0599      	lsls	r1, r3, #22
 800d3b2:	d402      	bmi.n	800d3ba <_fflush_r+0x3a>
 800d3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3b6:	f000 f915 	bl	800d5e4 <__retarget_lock_acquire_recursive>
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	4621      	mov	r1, r4
 800d3be:	f7ff ff59 	bl	800d274 <__sflush_r>
 800d3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3c4:	07da      	lsls	r2, r3, #31
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	d4e0      	bmi.n	800d38c <_fflush_r+0xc>
 800d3ca:	89a3      	ldrh	r3, [r4, #12]
 800d3cc:	059b      	lsls	r3, r3, #22
 800d3ce:	d4dd      	bmi.n	800d38c <_fflush_r+0xc>
 800d3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3d2:	f000 f908 	bl	800d5e6 <__retarget_lock_release_recursive>
 800d3d6:	e7d9      	b.n	800d38c <_fflush_r+0xc>
 800d3d8:	4b05      	ldr	r3, [pc, #20]	; (800d3f0 <_fflush_r+0x70>)
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	d101      	bne.n	800d3e2 <_fflush_r+0x62>
 800d3de:	68ac      	ldr	r4, [r5, #8]
 800d3e0:	e7df      	b.n	800d3a2 <_fflush_r+0x22>
 800d3e2:	4b04      	ldr	r3, [pc, #16]	; (800d3f4 <_fflush_r+0x74>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	bf08      	it	eq
 800d3e8:	68ec      	ldreq	r4, [r5, #12]
 800d3ea:	e7da      	b.n	800d3a2 <_fflush_r+0x22>
 800d3ec:	0800f15c 	.word	0x0800f15c
 800d3f0:	0800f17c 	.word	0x0800f17c
 800d3f4:	0800f13c 	.word	0x0800f13c

0800d3f8 <std>:
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	b510      	push	{r4, lr}
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	e9c0 3300 	strd	r3, r3, [r0]
 800d402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d406:	6083      	str	r3, [r0, #8]
 800d408:	8181      	strh	r1, [r0, #12]
 800d40a:	6643      	str	r3, [r0, #100]	; 0x64
 800d40c:	81c2      	strh	r2, [r0, #14]
 800d40e:	6183      	str	r3, [r0, #24]
 800d410:	4619      	mov	r1, r3
 800d412:	2208      	movs	r2, #8
 800d414:	305c      	adds	r0, #92	; 0x5c
 800d416:	f7fd fb61 	bl	800aadc <memset>
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <std+0x38>)
 800d41c:	6263      	str	r3, [r4, #36]	; 0x24
 800d41e:	4b05      	ldr	r3, [pc, #20]	; (800d434 <std+0x3c>)
 800d420:	62a3      	str	r3, [r4, #40]	; 0x28
 800d422:	4b05      	ldr	r3, [pc, #20]	; (800d438 <std+0x40>)
 800d424:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d426:	4b05      	ldr	r3, [pc, #20]	; (800d43c <std+0x44>)
 800d428:	6224      	str	r4, [r4, #32]
 800d42a:	6323      	str	r3, [r4, #48]	; 0x30
 800d42c:	bd10      	pop	{r4, pc}
 800d42e:	bf00      	nop
 800d430:	0800d74d 	.word	0x0800d74d
 800d434:	0800d76f 	.word	0x0800d76f
 800d438:	0800d7a7 	.word	0x0800d7a7
 800d43c:	0800d7cb 	.word	0x0800d7cb

0800d440 <_cleanup_r>:
 800d440:	4901      	ldr	r1, [pc, #4]	; (800d448 <_cleanup_r+0x8>)
 800d442:	f000 b8af 	b.w	800d5a4 <_fwalk_reent>
 800d446:	bf00      	nop
 800d448:	0800d381 	.word	0x0800d381

0800d44c <__sfmoreglue>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	2268      	movs	r2, #104	; 0x68
 800d450:	1e4d      	subs	r5, r1, #1
 800d452:	4355      	muls	r5, r2
 800d454:	460e      	mov	r6, r1
 800d456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d45a:	f7ff fa65 	bl	800c928 <_malloc_r>
 800d45e:	4604      	mov	r4, r0
 800d460:	b140      	cbz	r0, 800d474 <__sfmoreglue+0x28>
 800d462:	2100      	movs	r1, #0
 800d464:	e9c0 1600 	strd	r1, r6, [r0]
 800d468:	300c      	adds	r0, #12
 800d46a:	60a0      	str	r0, [r4, #8]
 800d46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d470:	f7fd fb34 	bl	800aadc <memset>
 800d474:	4620      	mov	r0, r4
 800d476:	bd70      	pop	{r4, r5, r6, pc}

0800d478 <__sfp_lock_acquire>:
 800d478:	4801      	ldr	r0, [pc, #4]	; (800d480 <__sfp_lock_acquire+0x8>)
 800d47a:	f000 b8b3 	b.w	800d5e4 <__retarget_lock_acquire_recursive>
 800d47e:	bf00      	nop
 800d480:	2000090d 	.word	0x2000090d

0800d484 <__sfp_lock_release>:
 800d484:	4801      	ldr	r0, [pc, #4]	; (800d48c <__sfp_lock_release+0x8>)
 800d486:	f000 b8ae 	b.w	800d5e6 <__retarget_lock_release_recursive>
 800d48a:	bf00      	nop
 800d48c:	2000090d 	.word	0x2000090d

0800d490 <__sinit_lock_acquire>:
 800d490:	4801      	ldr	r0, [pc, #4]	; (800d498 <__sinit_lock_acquire+0x8>)
 800d492:	f000 b8a7 	b.w	800d5e4 <__retarget_lock_acquire_recursive>
 800d496:	bf00      	nop
 800d498:	2000090e 	.word	0x2000090e

0800d49c <__sinit_lock_release>:
 800d49c:	4801      	ldr	r0, [pc, #4]	; (800d4a4 <__sinit_lock_release+0x8>)
 800d49e:	f000 b8a2 	b.w	800d5e6 <__retarget_lock_release_recursive>
 800d4a2:	bf00      	nop
 800d4a4:	2000090e 	.word	0x2000090e

0800d4a8 <__sinit>:
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	f7ff fff0 	bl	800d490 <__sinit_lock_acquire>
 800d4b0:	69a3      	ldr	r3, [r4, #24]
 800d4b2:	b11b      	cbz	r3, 800d4bc <__sinit+0x14>
 800d4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4b8:	f7ff bff0 	b.w	800d49c <__sinit_lock_release>
 800d4bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d4c0:	6523      	str	r3, [r4, #80]	; 0x50
 800d4c2:	4b13      	ldr	r3, [pc, #76]	; (800d510 <__sinit+0x68>)
 800d4c4:	4a13      	ldr	r2, [pc, #76]	; (800d514 <__sinit+0x6c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	bf04      	itt	eq
 800d4ce:	2301      	moveq	r3, #1
 800d4d0:	61a3      	streq	r3, [r4, #24]
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 f820 	bl	800d518 <__sfp>
 800d4d8:	6060      	str	r0, [r4, #4]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f000 f81c 	bl	800d518 <__sfp>
 800d4e0:	60a0      	str	r0, [r4, #8]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 f818 	bl	800d518 <__sfp>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	60e0      	str	r0, [r4, #12]
 800d4ec:	2104      	movs	r1, #4
 800d4ee:	6860      	ldr	r0, [r4, #4]
 800d4f0:	f7ff ff82 	bl	800d3f8 <std>
 800d4f4:	68a0      	ldr	r0, [r4, #8]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	2109      	movs	r1, #9
 800d4fa:	f7ff ff7d 	bl	800d3f8 <std>
 800d4fe:	68e0      	ldr	r0, [r4, #12]
 800d500:	2202      	movs	r2, #2
 800d502:	2112      	movs	r1, #18
 800d504:	f7ff ff78 	bl	800d3f8 <std>
 800d508:	2301      	movs	r3, #1
 800d50a:	61a3      	str	r3, [r4, #24]
 800d50c:	e7d2      	b.n	800d4b4 <__sinit+0xc>
 800d50e:	bf00      	nop
 800d510:	0800edc4 	.word	0x0800edc4
 800d514:	0800d441 	.word	0x0800d441

0800d518 <__sfp>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	4607      	mov	r7, r0
 800d51c:	f7ff ffac 	bl	800d478 <__sfp_lock_acquire>
 800d520:	4b1e      	ldr	r3, [pc, #120]	; (800d59c <__sfp+0x84>)
 800d522:	681e      	ldr	r6, [r3, #0]
 800d524:	69b3      	ldr	r3, [r6, #24]
 800d526:	b913      	cbnz	r3, 800d52e <__sfp+0x16>
 800d528:	4630      	mov	r0, r6
 800d52a:	f7ff ffbd 	bl	800d4a8 <__sinit>
 800d52e:	3648      	adds	r6, #72	; 0x48
 800d530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d534:	3b01      	subs	r3, #1
 800d536:	d503      	bpl.n	800d540 <__sfp+0x28>
 800d538:	6833      	ldr	r3, [r6, #0]
 800d53a:	b30b      	cbz	r3, 800d580 <__sfp+0x68>
 800d53c:	6836      	ldr	r6, [r6, #0]
 800d53e:	e7f7      	b.n	800d530 <__sfp+0x18>
 800d540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d544:	b9d5      	cbnz	r5, 800d57c <__sfp+0x64>
 800d546:	4b16      	ldr	r3, [pc, #88]	; (800d5a0 <__sfp+0x88>)
 800d548:	60e3      	str	r3, [r4, #12]
 800d54a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d54e:	6665      	str	r5, [r4, #100]	; 0x64
 800d550:	f000 f847 	bl	800d5e2 <__retarget_lock_init_recursive>
 800d554:	f7ff ff96 	bl	800d484 <__sfp_lock_release>
 800d558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d55c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d560:	6025      	str	r5, [r4, #0]
 800d562:	61a5      	str	r5, [r4, #24]
 800d564:	2208      	movs	r2, #8
 800d566:	4629      	mov	r1, r5
 800d568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d56c:	f7fd fab6 	bl	800aadc <memset>
 800d570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d578:	4620      	mov	r0, r4
 800d57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d57c:	3468      	adds	r4, #104	; 0x68
 800d57e:	e7d9      	b.n	800d534 <__sfp+0x1c>
 800d580:	2104      	movs	r1, #4
 800d582:	4638      	mov	r0, r7
 800d584:	f7ff ff62 	bl	800d44c <__sfmoreglue>
 800d588:	4604      	mov	r4, r0
 800d58a:	6030      	str	r0, [r6, #0]
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d1d5      	bne.n	800d53c <__sfp+0x24>
 800d590:	f7ff ff78 	bl	800d484 <__sfp_lock_release>
 800d594:	230c      	movs	r3, #12
 800d596:	603b      	str	r3, [r7, #0]
 800d598:	e7ee      	b.n	800d578 <__sfp+0x60>
 800d59a:	bf00      	nop
 800d59c:	0800edc4 	.word	0x0800edc4
 800d5a0:	ffff0001 	.word	0xffff0001

0800d5a4 <_fwalk_reent>:
 800d5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	4688      	mov	r8, r1
 800d5ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5b0:	2700      	movs	r7, #0
 800d5b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5b6:	f1b9 0901 	subs.w	r9, r9, #1
 800d5ba:	d505      	bpl.n	800d5c8 <_fwalk_reent+0x24>
 800d5bc:	6824      	ldr	r4, [r4, #0]
 800d5be:	2c00      	cmp	r4, #0
 800d5c0:	d1f7      	bne.n	800d5b2 <_fwalk_reent+0xe>
 800d5c2:	4638      	mov	r0, r7
 800d5c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c8:	89ab      	ldrh	r3, [r5, #12]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d907      	bls.n	800d5de <_fwalk_reent+0x3a>
 800d5ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	d003      	beq.n	800d5de <_fwalk_reent+0x3a>
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4630      	mov	r0, r6
 800d5da:	47c0      	blx	r8
 800d5dc:	4307      	orrs	r7, r0
 800d5de:	3568      	adds	r5, #104	; 0x68
 800d5e0:	e7e9      	b.n	800d5b6 <_fwalk_reent+0x12>

0800d5e2 <__retarget_lock_init_recursive>:
 800d5e2:	4770      	bx	lr

0800d5e4 <__retarget_lock_acquire_recursive>:
 800d5e4:	4770      	bx	lr

0800d5e6 <__retarget_lock_release_recursive>:
 800d5e6:	4770      	bx	lr

0800d5e8 <__swhatbuf_r>:
 800d5e8:	b570      	push	{r4, r5, r6, lr}
 800d5ea:	460e      	mov	r6, r1
 800d5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	b096      	sub	sp, #88	; 0x58
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	461d      	mov	r5, r3
 800d5f8:	da08      	bge.n	800d60c <__swhatbuf_r+0x24>
 800d5fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d5fe:	2200      	movs	r2, #0
 800d600:	602a      	str	r2, [r5, #0]
 800d602:	061a      	lsls	r2, r3, #24
 800d604:	d410      	bmi.n	800d628 <__swhatbuf_r+0x40>
 800d606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d60a:	e00e      	b.n	800d62a <__swhatbuf_r+0x42>
 800d60c:	466a      	mov	r2, sp
 800d60e:	f000 f903 	bl	800d818 <_fstat_r>
 800d612:	2800      	cmp	r0, #0
 800d614:	dbf1      	blt.n	800d5fa <__swhatbuf_r+0x12>
 800d616:	9a01      	ldr	r2, [sp, #4]
 800d618:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d61c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d620:	425a      	negs	r2, r3
 800d622:	415a      	adcs	r2, r3
 800d624:	602a      	str	r2, [r5, #0]
 800d626:	e7ee      	b.n	800d606 <__swhatbuf_r+0x1e>
 800d628:	2340      	movs	r3, #64	; 0x40
 800d62a:	2000      	movs	r0, #0
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	b016      	add	sp, #88	; 0x58
 800d630:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d634 <__smakebuf_r>:
 800d634:	898b      	ldrh	r3, [r1, #12]
 800d636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d638:	079d      	lsls	r5, r3, #30
 800d63a:	4606      	mov	r6, r0
 800d63c:	460c      	mov	r4, r1
 800d63e:	d507      	bpl.n	800d650 <__smakebuf_r+0x1c>
 800d640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	6123      	str	r3, [r4, #16]
 800d648:	2301      	movs	r3, #1
 800d64a:	6163      	str	r3, [r4, #20]
 800d64c:	b002      	add	sp, #8
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	ab01      	add	r3, sp, #4
 800d652:	466a      	mov	r2, sp
 800d654:	f7ff ffc8 	bl	800d5e8 <__swhatbuf_r>
 800d658:	9900      	ldr	r1, [sp, #0]
 800d65a:	4605      	mov	r5, r0
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff f963 	bl	800c928 <_malloc_r>
 800d662:	b948      	cbnz	r0, 800d678 <__smakebuf_r+0x44>
 800d664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d668:	059a      	lsls	r2, r3, #22
 800d66a:	d4ef      	bmi.n	800d64c <__smakebuf_r+0x18>
 800d66c:	f023 0303 	bic.w	r3, r3, #3
 800d670:	f043 0302 	orr.w	r3, r3, #2
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	e7e3      	b.n	800d640 <__smakebuf_r+0xc>
 800d678:	4b0d      	ldr	r3, [pc, #52]	; (800d6b0 <__smakebuf_r+0x7c>)
 800d67a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	6020      	str	r0, [r4, #0]
 800d680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	9b00      	ldr	r3, [sp, #0]
 800d688:	6163      	str	r3, [r4, #20]
 800d68a:	9b01      	ldr	r3, [sp, #4]
 800d68c:	6120      	str	r0, [r4, #16]
 800d68e:	b15b      	cbz	r3, 800d6a8 <__smakebuf_r+0x74>
 800d690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d694:	4630      	mov	r0, r6
 800d696:	f000 f8d1 	bl	800d83c <_isatty_r>
 800d69a:	b128      	cbz	r0, 800d6a8 <__smakebuf_r+0x74>
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	f023 0303 	bic.w	r3, r3, #3
 800d6a2:	f043 0301 	orr.w	r3, r3, #1
 800d6a6:	81a3      	strh	r3, [r4, #12]
 800d6a8:	89a0      	ldrh	r0, [r4, #12]
 800d6aa:	4305      	orrs	r5, r0
 800d6ac:	81a5      	strh	r5, [r4, #12]
 800d6ae:	e7cd      	b.n	800d64c <__smakebuf_r+0x18>
 800d6b0:	0800d441 	.word	0x0800d441

0800d6b4 <_malloc_usable_size_r>:
 800d6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6b8:	1f18      	subs	r0, r3, #4
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	bfbc      	itt	lt
 800d6be:	580b      	ldrlt	r3, [r1, r0]
 800d6c0:	18c0      	addlt	r0, r0, r3
 800d6c2:	4770      	bx	lr

0800d6c4 <_raise_r>:
 800d6c4:	291f      	cmp	r1, #31
 800d6c6:	b538      	push	{r3, r4, r5, lr}
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	460d      	mov	r5, r1
 800d6cc:	d904      	bls.n	800d6d8 <_raise_r+0x14>
 800d6ce:	2316      	movs	r3, #22
 800d6d0:	6003      	str	r3, [r0, #0]
 800d6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d6:	bd38      	pop	{r3, r4, r5, pc}
 800d6d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6da:	b112      	cbz	r2, 800d6e2 <_raise_r+0x1e>
 800d6dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6e0:	b94b      	cbnz	r3, 800d6f6 <_raise_r+0x32>
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 f830 	bl	800d748 <_getpid_r>
 800d6e8:	462a      	mov	r2, r5
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6f2:	f000 b817 	b.w	800d724 <_kill_r>
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d00a      	beq.n	800d710 <_raise_r+0x4c>
 800d6fa:	1c59      	adds	r1, r3, #1
 800d6fc:	d103      	bne.n	800d706 <_raise_r+0x42>
 800d6fe:	2316      	movs	r3, #22
 800d700:	6003      	str	r3, [r0, #0]
 800d702:	2001      	movs	r0, #1
 800d704:	e7e7      	b.n	800d6d6 <_raise_r+0x12>
 800d706:	2400      	movs	r4, #0
 800d708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d70c:	4628      	mov	r0, r5
 800d70e:	4798      	blx	r3
 800d710:	2000      	movs	r0, #0
 800d712:	e7e0      	b.n	800d6d6 <_raise_r+0x12>

0800d714 <raise>:
 800d714:	4b02      	ldr	r3, [pc, #8]	; (800d720 <raise+0xc>)
 800d716:	4601      	mov	r1, r0
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	f7ff bfd3 	b.w	800d6c4 <_raise_r>
 800d71e:	bf00      	nop
 800d720:	20000064 	.word	0x20000064

0800d724 <_kill_r>:
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	4d07      	ldr	r5, [pc, #28]	; (800d744 <_kill_r+0x20>)
 800d728:	2300      	movs	r3, #0
 800d72a:	4604      	mov	r4, r0
 800d72c:	4608      	mov	r0, r1
 800d72e:	4611      	mov	r1, r2
 800d730:	602b      	str	r3, [r5, #0]
 800d732:	f7f6 ffd7 	bl	80046e4 <_kill>
 800d736:	1c43      	adds	r3, r0, #1
 800d738:	d102      	bne.n	800d740 <_kill_r+0x1c>
 800d73a:	682b      	ldr	r3, [r5, #0]
 800d73c:	b103      	cbz	r3, 800d740 <_kill_r+0x1c>
 800d73e:	6023      	str	r3, [r4, #0]
 800d740:	bd38      	pop	{r3, r4, r5, pc}
 800d742:	bf00      	nop
 800d744:	20000908 	.word	0x20000908

0800d748 <_getpid_r>:
 800d748:	f7f6 bfc4 	b.w	80046d4 <_getpid>

0800d74c <__sread>:
 800d74c:	b510      	push	{r4, lr}
 800d74e:	460c      	mov	r4, r1
 800d750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d754:	f000 f894 	bl	800d880 <_read_r>
 800d758:	2800      	cmp	r0, #0
 800d75a:	bfab      	itete	ge
 800d75c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d75e:	89a3      	ldrhlt	r3, [r4, #12]
 800d760:	181b      	addge	r3, r3, r0
 800d762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d766:	bfac      	ite	ge
 800d768:	6563      	strge	r3, [r4, #84]	; 0x54
 800d76a:	81a3      	strhlt	r3, [r4, #12]
 800d76c:	bd10      	pop	{r4, pc}

0800d76e <__swrite>:
 800d76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d772:	461f      	mov	r7, r3
 800d774:	898b      	ldrh	r3, [r1, #12]
 800d776:	05db      	lsls	r3, r3, #23
 800d778:	4605      	mov	r5, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	4616      	mov	r6, r2
 800d77e:	d505      	bpl.n	800d78c <__swrite+0x1e>
 800d780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d784:	2302      	movs	r3, #2
 800d786:	2200      	movs	r2, #0
 800d788:	f000 f868 	bl	800d85c <_lseek_r>
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	4632      	mov	r2, r6
 800d79a:	463b      	mov	r3, r7
 800d79c:	4628      	mov	r0, r5
 800d79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a2:	f000 b817 	b.w	800d7d4 <_write_r>

0800d7a6 <__sseek>:
 800d7a6:	b510      	push	{r4, lr}
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ae:	f000 f855 	bl	800d85c <_lseek_r>
 800d7b2:	1c43      	adds	r3, r0, #1
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	bf15      	itete	ne
 800d7b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d7ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d7be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d7c2:	81a3      	strheq	r3, [r4, #12]
 800d7c4:	bf18      	it	ne
 800d7c6:	81a3      	strhne	r3, [r4, #12]
 800d7c8:	bd10      	pop	{r4, pc}

0800d7ca <__sclose>:
 800d7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ce:	f000 b813 	b.w	800d7f8 <_close_r>
	...

0800d7d4 <_write_r>:
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	4d07      	ldr	r5, [pc, #28]	; (800d7f4 <_write_r+0x20>)
 800d7d8:	4604      	mov	r4, r0
 800d7da:	4608      	mov	r0, r1
 800d7dc:	4611      	mov	r1, r2
 800d7de:	2200      	movs	r2, #0
 800d7e0:	602a      	str	r2, [r5, #0]
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	f7f6 ffb5 	bl	8004752 <_write>
 800d7e8:	1c43      	adds	r3, r0, #1
 800d7ea:	d102      	bne.n	800d7f2 <_write_r+0x1e>
 800d7ec:	682b      	ldr	r3, [r5, #0]
 800d7ee:	b103      	cbz	r3, 800d7f2 <_write_r+0x1e>
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	20000908 	.word	0x20000908

0800d7f8 <_close_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4d06      	ldr	r5, [pc, #24]	; (800d814 <_close_r+0x1c>)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4604      	mov	r4, r0
 800d800:	4608      	mov	r0, r1
 800d802:	602b      	str	r3, [r5, #0]
 800d804:	f7f6 ffc1 	bl	800478a <_close>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d102      	bne.n	800d812 <_close_r+0x1a>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	b103      	cbz	r3, 800d812 <_close_r+0x1a>
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	20000908 	.word	0x20000908

0800d818 <_fstat_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d07      	ldr	r5, [pc, #28]	; (800d838 <_fstat_r+0x20>)
 800d81c:	2300      	movs	r3, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	4611      	mov	r1, r2
 800d824:	602b      	str	r3, [r5, #0]
 800d826:	f7f6 ffbc 	bl	80047a2 <_fstat>
 800d82a:	1c43      	adds	r3, r0, #1
 800d82c:	d102      	bne.n	800d834 <_fstat_r+0x1c>
 800d82e:	682b      	ldr	r3, [r5, #0]
 800d830:	b103      	cbz	r3, 800d834 <_fstat_r+0x1c>
 800d832:	6023      	str	r3, [r4, #0]
 800d834:	bd38      	pop	{r3, r4, r5, pc}
 800d836:	bf00      	nop
 800d838:	20000908 	.word	0x20000908

0800d83c <_isatty_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d06      	ldr	r5, [pc, #24]	; (800d858 <_isatty_r+0x1c>)
 800d840:	2300      	movs	r3, #0
 800d842:	4604      	mov	r4, r0
 800d844:	4608      	mov	r0, r1
 800d846:	602b      	str	r3, [r5, #0]
 800d848:	f7f6 ffbb 	bl	80047c2 <_isatty>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_isatty_r+0x1a>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_isatty_r+0x1a>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	20000908 	.word	0x20000908

0800d85c <_lseek_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4d07      	ldr	r5, [pc, #28]	; (800d87c <_lseek_r+0x20>)
 800d860:	4604      	mov	r4, r0
 800d862:	4608      	mov	r0, r1
 800d864:	4611      	mov	r1, r2
 800d866:	2200      	movs	r2, #0
 800d868:	602a      	str	r2, [r5, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	f7f6 ffb4 	bl	80047d8 <_lseek>
 800d870:	1c43      	adds	r3, r0, #1
 800d872:	d102      	bne.n	800d87a <_lseek_r+0x1e>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	b103      	cbz	r3, 800d87a <_lseek_r+0x1e>
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	20000908 	.word	0x20000908

0800d880 <_read_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d07      	ldr	r5, [pc, #28]	; (800d8a0 <_read_r+0x20>)
 800d884:	4604      	mov	r4, r0
 800d886:	4608      	mov	r0, r1
 800d888:	4611      	mov	r1, r2
 800d88a:	2200      	movs	r2, #0
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	461a      	mov	r2, r3
 800d890:	f7f6 ff42 	bl	8004718 <_read>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d102      	bne.n	800d89e <_read_r+0x1e>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	b103      	cbz	r3, 800d89e <_read_r+0x1e>
 800d89c:	6023      	str	r3, [r4, #0]
 800d89e:	bd38      	pop	{r3, r4, r5, pc}
 800d8a0:	20000908 	.word	0x20000908

0800d8a4 <pow>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	ed2d 8b02 	vpush	{d8}
 800d8aa:	eeb0 8a40 	vmov.f32	s16, s0
 800d8ae:	eef0 8a60 	vmov.f32	s17, s1
 800d8b2:	ec55 4b11 	vmov	r4, r5, d1
 800d8b6:	f000 f8df 	bl	800da78 <__ieee754_pow>
 800d8ba:	4622      	mov	r2, r4
 800d8bc:	462b      	mov	r3, r5
 800d8be:	4620      	mov	r0, r4
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	ec57 6b10 	vmov	r6, r7, d0
 800d8c6:	f7f3 f959 	bl	8000b7c <__aeabi_dcmpun>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d13b      	bne.n	800d946 <pow+0xa2>
 800d8ce:	ec51 0b18 	vmov	r0, r1, d8
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f7f3 f91f 	bl	8000b18 <__aeabi_dcmpeq>
 800d8da:	b1b8      	cbz	r0, 800d90c <pow+0x68>
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2300      	movs	r3, #0
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	4629      	mov	r1, r5
 800d8e4:	f7f3 f918 	bl	8000b18 <__aeabi_dcmpeq>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d146      	bne.n	800d97a <pow+0xd6>
 800d8ec:	ec45 4b10 	vmov	d0, r4, r5
 800d8f0:	f001 f864 	bl	800e9bc <finite>
 800d8f4:	b338      	cbz	r0, 800d946 <pow+0xa2>
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7f3 f915 	bl	8000b2c <__aeabi_dcmplt>
 800d902:	b300      	cbz	r0, 800d946 <pow+0xa2>
 800d904:	f7fd f8b2 	bl	800aa6c <__errno>
 800d908:	2322      	movs	r3, #34	; 0x22
 800d90a:	e01b      	b.n	800d944 <pow+0xa0>
 800d90c:	ec47 6b10 	vmov	d0, r6, r7
 800d910:	f001 f854 	bl	800e9bc <finite>
 800d914:	b9e0      	cbnz	r0, 800d950 <pow+0xac>
 800d916:	eeb0 0a48 	vmov.f32	s0, s16
 800d91a:	eef0 0a68 	vmov.f32	s1, s17
 800d91e:	f001 f84d 	bl	800e9bc <finite>
 800d922:	b1a8      	cbz	r0, 800d950 <pow+0xac>
 800d924:	ec45 4b10 	vmov	d0, r4, r5
 800d928:	f001 f848 	bl	800e9bc <finite>
 800d92c:	b180      	cbz	r0, 800d950 <pow+0xac>
 800d92e:	4632      	mov	r2, r6
 800d930:	463b      	mov	r3, r7
 800d932:	4630      	mov	r0, r6
 800d934:	4639      	mov	r1, r7
 800d936:	f7f3 f921 	bl	8000b7c <__aeabi_dcmpun>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d0e2      	beq.n	800d904 <pow+0x60>
 800d93e:	f7fd f895 	bl	800aa6c <__errno>
 800d942:	2321      	movs	r3, #33	; 0x21
 800d944:	6003      	str	r3, [r0, #0]
 800d946:	ecbd 8b02 	vpop	{d8}
 800d94a:	ec47 6b10 	vmov	d0, r6, r7
 800d94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d950:	2200      	movs	r2, #0
 800d952:	2300      	movs	r3, #0
 800d954:	4630      	mov	r0, r6
 800d956:	4639      	mov	r1, r7
 800d958:	f7f3 f8de 	bl	8000b18 <__aeabi_dcmpeq>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d0f2      	beq.n	800d946 <pow+0xa2>
 800d960:	eeb0 0a48 	vmov.f32	s0, s16
 800d964:	eef0 0a68 	vmov.f32	s1, s17
 800d968:	f001 f828 	bl	800e9bc <finite>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d0ea      	beq.n	800d946 <pow+0xa2>
 800d970:	ec45 4b10 	vmov	d0, r4, r5
 800d974:	f001 f822 	bl	800e9bc <finite>
 800d978:	e7c3      	b.n	800d902 <pow+0x5e>
 800d97a:	4f01      	ldr	r7, [pc, #4]	; (800d980 <pow+0xdc>)
 800d97c:	2600      	movs	r6, #0
 800d97e:	e7e2      	b.n	800d946 <pow+0xa2>
 800d980:	3ff00000 	.word	0x3ff00000

0800d984 <sqrt>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	ed2d 8b02 	vpush	{d8}
 800d98a:	ec55 4b10 	vmov	r4, r5, d0
 800d98e:	f000 fda1 	bl	800e4d4 <__ieee754_sqrt>
 800d992:	4622      	mov	r2, r4
 800d994:	462b      	mov	r3, r5
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	eeb0 8a40 	vmov.f32	s16, s0
 800d99e:	eef0 8a60 	vmov.f32	s17, s1
 800d9a2:	f7f3 f8eb 	bl	8000b7c <__aeabi_dcmpun>
 800d9a6:	b990      	cbnz	r0, 800d9ce <sqrt+0x4a>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7f3 f8bc 	bl	8000b2c <__aeabi_dcmplt>
 800d9b4:	b158      	cbz	r0, 800d9ce <sqrt+0x4a>
 800d9b6:	f7fd f859 	bl	800aa6c <__errno>
 800d9ba:	2321      	movs	r3, #33	; 0x21
 800d9bc:	6003      	str	r3, [r0, #0]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	f7f2 ff69 	bl	800089c <__aeabi_ddiv>
 800d9ca:	ec41 0b18 	vmov	d8, r0, r1
 800d9ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d2:	eef0 0a68 	vmov.f32	s1, s17
 800d9d6:	ecbd 8b02 	vpop	{d8}
 800d9da:	bd38      	pop	{r3, r4, r5, pc}

0800d9dc <asinf>:
 800d9dc:	b508      	push	{r3, lr}
 800d9de:	ed2d 8b02 	vpush	{d8}
 800d9e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d9e6:	f000 fe27 	bl	800e638 <__ieee754_asinf>
 800d9ea:	eeb4 8a48 	vcmp.f32	s16, s16
 800d9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f2:	eef0 8a40 	vmov.f32	s17, s0
 800d9f6:	d615      	bvs.n	800da24 <asinf+0x48>
 800d9f8:	eeb0 0a48 	vmov.f32	s0, s16
 800d9fc:	f001 f946 	bl	800ec8c <fabsf>
 800da00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800da04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800da08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0c:	dd0a      	ble.n	800da24 <asinf+0x48>
 800da0e:	f7fd f82d 	bl	800aa6c <__errno>
 800da12:	ecbd 8b02 	vpop	{d8}
 800da16:	2321      	movs	r3, #33	; 0x21
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800da1e:	4804      	ldr	r0, [pc, #16]	; (800da30 <asinf+0x54>)
 800da20:	f001 b93c 	b.w	800ec9c <nanf>
 800da24:	eeb0 0a68 	vmov.f32	s0, s17
 800da28:	ecbd 8b02 	vpop	{d8}
 800da2c:	bd08      	pop	{r3, pc}
 800da2e:	bf00      	nop
 800da30:	0800f030 	.word	0x0800f030

0800da34 <atan2f>:
 800da34:	f000 bee6 	b.w	800e804 <__ieee754_atan2f>

0800da38 <sqrtf>:
 800da38:	b508      	push	{r3, lr}
 800da3a:	ed2d 8b02 	vpush	{d8}
 800da3e:	eeb0 8a40 	vmov.f32	s16, s0
 800da42:	f000 ff7f 	bl	800e944 <__ieee754_sqrtf>
 800da46:	eeb4 8a48 	vcmp.f32	s16, s16
 800da4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4e:	d60c      	bvs.n	800da6a <sqrtf+0x32>
 800da50:	eddf 8a07 	vldr	s17, [pc, #28]	; 800da70 <sqrtf+0x38>
 800da54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800da58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5c:	d505      	bpl.n	800da6a <sqrtf+0x32>
 800da5e:	f7fd f805 	bl	800aa6c <__errno>
 800da62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800da66:	2321      	movs	r3, #33	; 0x21
 800da68:	6003      	str	r3, [r0, #0]
 800da6a:	ecbd 8b02 	vpop	{d8}
 800da6e:	bd08      	pop	{r3, pc}
	...

0800da78 <__ieee754_pow>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	ed2d 8b06 	vpush	{d8-d10}
 800da80:	b089      	sub	sp, #36	; 0x24
 800da82:	ed8d 1b00 	vstr	d1, [sp]
 800da86:	e9dd 2900 	ldrd	r2, r9, [sp]
 800da8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800da8e:	ea58 0102 	orrs.w	r1, r8, r2
 800da92:	ec57 6b10 	vmov	r6, r7, d0
 800da96:	d115      	bne.n	800dac4 <__ieee754_pow+0x4c>
 800da98:	19b3      	adds	r3, r6, r6
 800da9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800da9e:	4152      	adcs	r2, r2
 800daa0:	4299      	cmp	r1, r3
 800daa2:	4b89      	ldr	r3, [pc, #548]	; (800dcc8 <__ieee754_pow+0x250>)
 800daa4:	4193      	sbcs	r3, r2
 800daa6:	f080 84d2 	bcs.w	800e44e <__ieee754_pow+0x9d6>
 800daaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daae:	4630      	mov	r0, r6
 800dab0:	4639      	mov	r1, r7
 800dab2:	f7f2 fc13 	bl	80002dc <__adddf3>
 800dab6:	ec41 0b10 	vmov	d0, r0, r1
 800daba:	b009      	add	sp, #36	; 0x24
 800dabc:	ecbd 8b06 	vpop	{d8-d10}
 800dac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac4:	4b81      	ldr	r3, [pc, #516]	; (800dccc <__ieee754_pow+0x254>)
 800dac6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800daca:	429c      	cmp	r4, r3
 800dacc:	ee10 aa10 	vmov	sl, s0
 800dad0:	463d      	mov	r5, r7
 800dad2:	dc06      	bgt.n	800dae2 <__ieee754_pow+0x6a>
 800dad4:	d101      	bne.n	800dada <__ieee754_pow+0x62>
 800dad6:	2e00      	cmp	r6, #0
 800dad8:	d1e7      	bne.n	800daaa <__ieee754_pow+0x32>
 800dada:	4598      	cmp	r8, r3
 800dadc:	dc01      	bgt.n	800dae2 <__ieee754_pow+0x6a>
 800dade:	d10f      	bne.n	800db00 <__ieee754_pow+0x88>
 800dae0:	b172      	cbz	r2, 800db00 <__ieee754_pow+0x88>
 800dae2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dae6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800daea:	ea55 050a 	orrs.w	r5, r5, sl
 800daee:	d1dc      	bne.n	800daaa <__ieee754_pow+0x32>
 800daf0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800daf4:	18db      	adds	r3, r3, r3
 800daf6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dafa:	4152      	adcs	r2, r2
 800dafc:	429d      	cmp	r5, r3
 800dafe:	e7d0      	b.n	800daa2 <__ieee754_pow+0x2a>
 800db00:	2d00      	cmp	r5, #0
 800db02:	da3b      	bge.n	800db7c <__ieee754_pow+0x104>
 800db04:	4b72      	ldr	r3, [pc, #456]	; (800dcd0 <__ieee754_pow+0x258>)
 800db06:	4598      	cmp	r8, r3
 800db08:	dc51      	bgt.n	800dbae <__ieee754_pow+0x136>
 800db0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800db0e:	4598      	cmp	r8, r3
 800db10:	f340 84ac 	ble.w	800e46c <__ieee754_pow+0x9f4>
 800db14:	ea4f 5328 	mov.w	r3, r8, asr #20
 800db18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db1c:	2b14      	cmp	r3, #20
 800db1e:	dd0f      	ble.n	800db40 <__ieee754_pow+0xc8>
 800db20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800db24:	fa22 f103 	lsr.w	r1, r2, r3
 800db28:	fa01 f303 	lsl.w	r3, r1, r3
 800db2c:	4293      	cmp	r3, r2
 800db2e:	f040 849d 	bne.w	800e46c <__ieee754_pow+0x9f4>
 800db32:	f001 0101 	and.w	r1, r1, #1
 800db36:	f1c1 0302 	rsb	r3, r1, #2
 800db3a:	9304      	str	r3, [sp, #16]
 800db3c:	b182      	cbz	r2, 800db60 <__ieee754_pow+0xe8>
 800db3e:	e05f      	b.n	800dc00 <__ieee754_pow+0x188>
 800db40:	2a00      	cmp	r2, #0
 800db42:	d15b      	bne.n	800dbfc <__ieee754_pow+0x184>
 800db44:	f1c3 0314 	rsb	r3, r3, #20
 800db48:	fa48 f103 	asr.w	r1, r8, r3
 800db4c:	fa01 f303 	lsl.w	r3, r1, r3
 800db50:	4543      	cmp	r3, r8
 800db52:	f040 8488 	bne.w	800e466 <__ieee754_pow+0x9ee>
 800db56:	f001 0101 	and.w	r1, r1, #1
 800db5a:	f1c1 0302 	rsb	r3, r1, #2
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	4b5c      	ldr	r3, [pc, #368]	; (800dcd4 <__ieee754_pow+0x25c>)
 800db62:	4598      	cmp	r8, r3
 800db64:	d132      	bne.n	800dbcc <__ieee754_pow+0x154>
 800db66:	f1b9 0f00 	cmp.w	r9, #0
 800db6a:	f280 8478 	bge.w	800e45e <__ieee754_pow+0x9e6>
 800db6e:	4959      	ldr	r1, [pc, #356]	; (800dcd4 <__ieee754_pow+0x25c>)
 800db70:	4632      	mov	r2, r6
 800db72:	463b      	mov	r3, r7
 800db74:	2000      	movs	r0, #0
 800db76:	f7f2 fe91 	bl	800089c <__aeabi_ddiv>
 800db7a:	e79c      	b.n	800dab6 <__ieee754_pow+0x3e>
 800db7c:	2300      	movs	r3, #0
 800db7e:	9304      	str	r3, [sp, #16]
 800db80:	2a00      	cmp	r2, #0
 800db82:	d13d      	bne.n	800dc00 <__ieee754_pow+0x188>
 800db84:	4b51      	ldr	r3, [pc, #324]	; (800dccc <__ieee754_pow+0x254>)
 800db86:	4598      	cmp	r8, r3
 800db88:	d1ea      	bne.n	800db60 <__ieee754_pow+0xe8>
 800db8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800db8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800db92:	ea53 030a 	orrs.w	r3, r3, sl
 800db96:	f000 845a 	beq.w	800e44e <__ieee754_pow+0x9d6>
 800db9a:	4b4f      	ldr	r3, [pc, #316]	; (800dcd8 <__ieee754_pow+0x260>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	dd08      	ble.n	800dbb2 <__ieee754_pow+0x13a>
 800dba0:	f1b9 0f00 	cmp.w	r9, #0
 800dba4:	f2c0 8457 	blt.w	800e456 <__ieee754_pow+0x9de>
 800dba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbac:	e783      	b.n	800dab6 <__ieee754_pow+0x3e>
 800dbae:	2302      	movs	r3, #2
 800dbb0:	e7e5      	b.n	800db7e <__ieee754_pow+0x106>
 800dbb2:	f1b9 0f00 	cmp.w	r9, #0
 800dbb6:	f04f 0000 	mov.w	r0, #0
 800dbba:	f04f 0100 	mov.w	r1, #0
 800dbbe:	f6bf af7a 	bge.w	800dab6 <__ieee754_pow+0x3e>
 800dbc2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dbc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dbca:	e774      	b.n	800dab6 <__ieee754_pow+0x3e>
 800dbcc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dbd0:	d106      	bne.n	800dbe0 <__ieee754_pow+0x168>
 800dbd2:	4632      	mov	r2, r6
 800dbd4:	463b      	mov	r3, r7
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	4639      	mov	r1, r7
 800dbda:	f7f2 fd35 	bl	8000648 <__aeabi_dmul>
 800dbde:	e76a      	b.n	800dab6 <__ieee754_pow+0x3e>
 800dbe0:	4b3e      	ldr	r3, [pc, #248]	; (800dcdc <__ieee754_pow+0x264>)
 800dbe2:	4599      	cmp	r9, r3
 800dbe4:	d10c      	bne.n	800dc00 <__ieee754_pow+0x188>
 800dbe6:	2d00      	cmp	r5, #0
 800dbe8:	db0a      	blt.n	800dc00 <__ieee754_pow+0x188>
 800dbea:	ec47 6b10 	vmov	d0, r6, r7
 800dbee:	b009      	add	sp, #36	; 0x24
 800dbf0:	ecbd 8b06 	vpop	{d8-d10}
 800dbf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	f000 bc6c 	b.w	800e4d4 <__ieee754_sqrt>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	ec47 6b10 	vmov	d0, r6, r7
 800dc04:	f000 fed1 	bl	800e9aa <fabs>
 800dc08:	ec51 0b10 	vmov	r0, r1, d0
 800dc0c:	f1ba 0f00 	cmp.w	sl, #0
 800dc10:	d129      	bne.n	800dc66 <__ieee754_pow+0x1ee>
 800dc12:	b124      	cbz	r4, 800dc1e <__ieee754_pow+0x1a6>
 800dc14:	4b2f      	ldr	r3, [pc, #188]	; (800dcd4 <__ieee754_pow+0x25c>)
 800dc16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d123      	bne.n	800dc66 <__ieee754_pow+0x1ee>
 800dc1e:	f1b9 0f00 	cmp.w	r9, #0
 800dc22:	da05      	bge.n	800dc30 <__ieee754_pow+0x1b8>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	2000      	movs	r0, #0
 800dc2a:	492a      	ldr	r1, [pc, #168]	; (800dcd4 <__ieee754_pow+0x25c>)
 800dc2c:	f7f2 fe36 	bl	800089c <__aeabi_ddiv>
 800dc30:	2d00      	cmp	r5, #0
 800dc32:	f6bf af40 	bge.w	800dab6 <__ieee754_pow+0x3e>
 800dc36:	9b04      	ldr	r3, [sp, #16]
 800dc38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dc3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dc40:	4323      	orrs	r3, r4
 800dc42:	d108      	bne.n	800dc56 <__ieee754_pow+0x1de>
 800dc44:	4602      	mov	r2, r0
 800dc46:	460b      	mov	r3, r1
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	f7f2 fb44 	bl	80002d8 <__aeabi_dsub>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	e78f      	b.n	800db76 <__ieee754_pow+0xfe>
 800dc56:	9b04      	ldr	r3, [sp, #16]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	f47f af2c 	bne.w	800dab6 <__ieee754_pow+0x3e>
 800dc5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc62:	4619      	mov	r1, r3
 800dc64:	e727      	b.n	800dab6 <__ieee754_pow+0x3e>
 800dc66:	0feb      	lsrs	r3, r5, #31
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	9306      	str	r3, [sp, #24]
 800dc6c:	9a06      	ldr	r2, [sp, #24]
 800dc6e:	9b04      	ldr	r3, [sp, #16]
 800dc70:	4313      	orrs	r3, r2
 800dc72:	d102      	bne.n	800dc7a <__ieee754_pow+0x202>
 800dc74:	4632      	mov	r2, r6
 800dc76:	463b      	mov	r3, r7
 800dc78:	e7e6      	b.n	800dc48 <__ieee754_pow+0x1d0>
 800dc7a:	4b19      	ldr	r3, [pc, #100]	; (800dce0 <__ieee754_pow+0x268>)
 800dc7c:	4598      	cmp	r8, r3
 800dc7e:	f340 80fb 	ble.w	800de78 <__ieee754_pow+0x400>
 800dc82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dc86:	4598      	cmp	r8, r3
 800dc88:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <__ieee754_pow+0x260>)
 800dc8a:	dd0c      	ble.n	800dca6 <__ieee754_pow+0x22e>
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	dc0f      	bgt.n	800dcb0 <__ieee754_pow+0x238>
 800dc90:	f1b9 0f00 	cmp.w	r9, #0
 800dc94:	da0f      	bge.n	800dcb6 <__ieee754_pow+0x23e>
 800dc96:	2000      	movs	r0, #0
 800dc98:	b009      	add	sp, #36	; 0x24
 800dc9a:	ecbd 8b06 	vpop	{d8-d10}
 800dc9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca2:	f000 be79 	b.w	800e998 <__math_oflow>
 800dca6:	429c      	cmp	r4, r3
 800dca8:	dbf2      	blt.n	800dc90 <__ieee754_pow+0x218>
 800dcaa:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <__ieee754_pow+0x25c>)
 800dcac:	429c      	cmp	r4, r3
 800dcae:	dd19      	ble.n	800dce4 <__ieee754_pow+0x26c>
 800dcb0:	f1b9 0f00 	cmp.w	r9, #0
 800dcb4:	dcef      	bgt.n	800dc96 <__ieee754_pow+0x21e>
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	b009      	add	sp, #36	; 0x24
 800dcba:	ecbd 8b06 	vpop	{d8-d10}
 800dcbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc2:	f000 be60 	b.w	800e986 <__math_uflow>
 800dcc6:	bf00      	nop
 800dcc8:	fff00000 	.word	0xfff00000
 800dccc:	7ff00000 	.word	0x7ff00000
 800dcd0:	433fffff 	.word	0x433fffff
 800dcd4:	3ff00000 	.word	0x3ff00000
 800dcd8:	3fefffff 	.word	0x3fefffff
 800dcdc:	3fe00000 	.word	0x3fe00000
 800dce0:	41e00000 	.word	0x41e00000
 800dce4:	4b60      	ldr	r3, [pc, #384]	; (800de68 <__ieee754_pow+0x3f0>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	f7f2 faf6 	bl	80002d8 <__aeabi_dsub>
 800dcec:	a354      	add	r3, pc, #336	; (adr r3, 800de40 <__ieee754_pow+0x3c8>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460d      	mov	r5, r1
 800dcf6:	f7f2 fca7 	bl	8000648 <__aeabi_dmul>
 800dcfa:	a353      	add	r3, pc, #332	; (adr r3, 800de48 <__ieee754_pow+0x3d0>)
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	4606      	mov	r6, r0
 800dd02:	460f      	mov	r7, r1
 800dd04:	4620      	mov	r0, r4
 800dd06:	4629      	mov	r1, r5
 800dd08:	f7f2 fc9e 	bl	8000648 <__aeabi_dmul>
 800dd0c:	4b57      	ldr	r3, [pc, #348]	; (800de6c <__ieee754_pow+0x3f4>)
 800dd0e:	4682      	mov	sl, r0
 800dd10:	468b      	mov	fp, r1
 800dd12:	2200      	movs	r2, #0
 800dd14:	4620      	mov	r0, r4
 800dd16:	4629      	mov	r1, r5
 800dd18:	f7f2 fc96 	bl	8000648 <__aeabi_dmul>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	a14b      	add	r1, pc, #300	; (adr r1, 800de50 <__ieee754_pow+0x3d8>)
 800dd22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd26:	f7f2 fad7 	bl	80002d8 <__aeabi_dsub>
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	462b      	mov	r3, r5
 800dd2e:	f7f2 fc8b 	bl	8000648 <__aeabi_dmul>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	2000      	movs	r0, #0
 800dd38:	494d      	ldr	r1, [pc, #308]	; (800de70 <__ieee754_pow+0x3f8>)
 800dd3a:	f7f2 facd 	bl	80002d8 <__aeabi_dsub>
 800dd3e:	4622      	mov	r2, r4
 800dd40:	4680      	mov	r8, r0
 800dd42:	4689      	mov	r9, r1
 800dd44:	462b      	mov	r3, r5
 800dd46:	4620      	mov	r0, r4
 800dd48:	4629      	mov	r1, r5
 800dd4a:	f7f2 fc7d 	bl	8000648 <__aeabi_dmul>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	4640      	mov	r0, r8
 800dd54:	4649      	mov	r1, r9
 800dd56:	f7f2 fc77 	bl	8000648 <__aeabi_dmul>
 800dd5a:	a33f      	add	r3, pc, #252	; (adr r3, 800de58 <__ieee754_pow+0x3e0>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	f7f2 fc72 	bl	8000648 <__aeabi_dmul>
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	4650      	mov	r0, sl
 800dd6a:	4659      	mov	r1, fp
 800dd6c:	f7f2 fab4 	bl	80002d8 <__aeabi_dsub>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	4680      	mov	r8, r0
 800dd76:	4689      	mov	r9, r1
 800dd78:	4630      	mov	r0, r6
 800dd7a:	4639      	mov	r1, r7
 800dd7c:	f7f2 faae 	bl	80002dc <__adddf3>
 800dd80:	2000      	movs	r0, #0
 800dd82:	4632      	mov	r2, r6
 800dd84:	463b      	mov	r3, r7
 800dd86:	4604      	mov	r4, r0
 800dd88:	460d      	mov	r5, r1
 800dd8a:	f7f2 faa5 	bl	80002d8 <__aeabi_dsub>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	460b      	mov	r3, r1
 800dd92:	4640      	mov	r0, r8
 800dd94:	4649      	mov	r1, r9
 800dd96:	f7f2 fa9f 	bl	80002d8 <__aeabi_dsub>
 800dd9a:	9b04      	ldr	r3, [sp, #16]
 800dd9c:	9a06      	ldr	r2, [sp, #24]
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	4313      	orrs	r3, r2
 800dda2:	4682      	mov	sl, r0
 800dda4:	468b      	mov	fp, r1
 800dda6:	f040 81e7 	bne.w	800e178 <__ieee754_pow+0x700>
 800ddaa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800de60 <__ieee754_pow+0x3e8>
 800ddae:	eeb0 8a47 	vmov.f32	s16, s14
 800ddb2:	eef0 8a67 	vmov.f32	s17, s15
 800ddb6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ddba:	2600      	movs	r6, #0
 800ddbc:	4632      	mov	r2, r6
 800ddbe:	463b      	mov	r3, r7
 800ddc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddc4:	f7f2 fa88 	bl	80002d8 <__aeabi_dsub>
 800ddc8:	4622      	mov	r2, r4
 800ddca:	462b      	mov	r3, r5
 800ddcc:	f7f2 fc3c 	bl	8000648 <__aeabi_dmul>
 800ddd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddd4:	4680      	mov	r8, r0
 800ddd6:	4689      	mov	r9, r1
 800ddd8:	4650      	mov	r0, sl
 800ddda:	4659      	mov	r1, fp
 800dddc:	f7f2 fc34 	bl	8000648 <__aeabi_dmul>
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4640      	mov	r0, r8
 800dde6:	4649      	mov	r1, r9
 800dde8:	f7f2 fa78 	bl	80002dc <__adddf3>
 800ddec:	4632      	mov	r2, r6
 800ddee:	463b      	mov	r3, r7
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	4689      	mov	r9, r1
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	4629      	mov	r1, r5
 800ddf8:	f7f2 fc26 	bl	8000648 <__aeabi_dmul>
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4604      	mov	r4, r0
 800de00:	460d      	mov	r5, r1
 800de02:	4602      	mov	r2, r0
 800de04:	4649      	mov	r1, r9
 800de06:	4640      	mov	r0, r8
 800de08:	f7f2 fa68 	bl	80002dc <__adddf3>
 800de0c:	4b19      	ldr	r3, [pc, #100]	; (800de74 <__ieee754_pow+0x3fc>)
 800de0e:	4299      	cmp	r1, r3
 800de10:	ec45 4b19 	vmov	d9, r4, r5
 800de14:	4606      	mov	r6, r0
 800de16:	460f      	mov	r7, r1
 800de18:	468b      	mov	fp, r1
 800de1a:	f340 82f1 	ble.w	800e400 <__ieee754_pow+0x988>
 800de1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800de22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800de26:	4303      	orrs	r3, r0
 800de28:	f000 81e4 	beq.w	800e1f4 <__ieee754_pow+0x77c>
 800de2c:	ec51 0b18 	vmov	r0, r1, d8
 800de30:	2200      	movs	r2, #0
 800de32:	2300      	movs	r3, #0
 800de34:	f7f2 fe7a 	bl	8000b2c <__aeabi_dcmplt>
 800de38:	3800      	subs	r0, #0
 800de3a:	bf18      	it	ne
 800de3c:	2001      	movne	r0, #1
 800de3e:	e72b      	b.n	800dc98 <__ieee754_pow+0x220>
 800de40:	60000000 	.word	0x60000000
 800de44:	3ff71547 	.word	0x3ff71547
 800de48:	f85ddf44 	.word	0xf85ddf44
 800de4c:	3e54ae0b 	.word	0x3e54ae0b
 800de50:	55555555 	.word	0x55555555
 800de54:	3fd55555 	.word	0x3fd55555
 800de58:	652b82fe 	.word	0x652b82fe
 800de5c:	3ff71547 	.word	0x3ff71547
 800de60:	00000000 	.word	0x00000000
 800de64:	bff00000 	.word	0xbff00000
 800de68:	3ff00000 	.word	0x3ff00000
 800de6c:	3fd00000 	.word	0x3fd00000
 800de70:	3fe00000 	.word	0x3fe00000
 800de74:	408fffff 	.word	0x408fffff
 800de78:	4bd5      	ldr	r3, [pc, #852]	; (800e1d0 <__ieee754_pow+0x758>)
 800de7a:	402b      	ands	r3, r5
 800de7c:	2200      	movs	r2, #0
 800de7e:	b92b      	cbnz	r3, 800de8c <__ieee754_pow+0x414>
 800de80:	4bd4      	ldr	r3, [pc, #848]	; (800e1d4 <__ieee754_pow+0x75c>)
 800de82:	f7f2 fbe1 	bl	8000648 <__aeabi_dmul>
 800de86:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800de8a:	460c      	mov	r4, r1
 800de8c:	1523      	asrs	r3, r4, #20
 800de8e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800de92:	4413      	add	r3, r2
 800de94:	9305      	str	r3, [sp, #20]
 800de96:	4bd0      	ldr	r3, [pc, #832]	; (800e1d8 <__ieee754_pow+0x760>)
 800de98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de9c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dea0:	429c      	cmp	r4, r3
 800dea2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dea6:	dd08      	ble.n	800deba <__ieee754_pow+0x442>
 800dea8:	4bcc      	ldr	r3, [pc, #816]	; (800e1dc <__ieee754_pow+0x764>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	f340 8162 	ble.w	800e174 <__ieee754_pow+0x6fc>
 800deb0:	9b05      	ldr	r3, [sp, #20]
 800deb2:	3301      	adds	r3, #1
 800deb4:	9305      	str	r3, [sp, #20]
 800deb6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800deba:	2400      	movs	r4, #0
 800debc:	00e3      	lsls	r3, r4, #3
 800debe:	9307      	str	r3, [sp, #28]
 800dec0:	4bc7      	ldr	r3, [pc, #796]	; (800e1e0 <__ieee754_pow+0x768>)
 800dec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dec6:	ed93 7b00 	vldr	d7, [r3]
 800deca:	4629      	mov	r1, r5
 800decc:	ec53 2b17 	vmov	r2, r3, d7
 800ded0:	eeb0 9a47 	vmov.f32	s18, s14
 800ded4:	eef0 9a67 	vmov.f32	s19, s15
 800ded8:	4682      	mov	sl, r0
 800deda:	f7f2 f9fd 	bl	80002d8 <__aeabi_dsub>
 800dede:	4652      	mov	r2, sl
 800dee0:	4606      	mov	r6, r0
 800dee2:	460f      	mov	r7, r1
 800dee4:	462b      	mov	r3, r5
 800dee6:	ec51 0b19 	vmov	r0, r1, d9
 800deea:	f7f2 f9f7 	bl	80002dc <__adddf3>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	2000      	movs	r0, #0
 800def4:	49bb      	ldr	r1, [pc, #748]	; (800e1e4 <__ieee754_pow+0x76c>)
 800def6:	f7f2 fcd1 	bl	800089c <__aeabi_ddiv>
 800defa:	ec41 0b1a 	vmov	d10, r0, r1
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4630      	mov	r0, r6
 800df04:	4639      	mov	r1, r7
 800df06:	f7f2 fb9f 	bl	8000648 <__aeabi_dmul>
 800df0a:	2300      	movs	r3, #0
 800df0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df10:	9302      	str	r3, [sp, #8]
 800df12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800df16:	46ab      	mov	fp, r5
 800df18:	106d      	asrs	r5, r5, #1
 800df1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800df1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800df22:	ec41 0b18 	vmov	d8, r0, r1
 800df26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800df2a:	2200      	movs	r2, #0
 800df2c:	4640      	mov	r0, r8
 800df2e:	4649      	mov	r1, r9
 800df30:	4614      	mov	r4, r2
 800df32:	461d      	mov	r5, r3
 800df34:	f7f2 fb88 	bl	8000648 <__aeabi_dmul>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	4630      	mov	r0, r6
 800df3e:	4639      	mov	r1, r7
 800df40:	f7f2 f9ca 	bl	80002d8 <__aeabi_dsub>
 800df44:	ec53 2b19 	vmov	r2, r3, d9
 800df48:	4606      	mov	r6, r0
 800df4a:	460f      	mov	r7, r1
 800df4c:	4620      	mov	r0, r4
 800df4e:	4629      	mov	r1, r5
 800df50:	f7f2 f9c2 	bl	80002d8 <__aeabi_dsub>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4650      	mov	r0, sl
 800df5a:	4659      	mov	r1, fp
 800df5c:	f7f2 f9bc 	bl	80002d8 <__aeabi_dsub>
 800df60:	4642      	mov	r2, r8
 800df62:	464b      	mov	r3, r9
 800df64:	f7f2 fb70 	bl	8000648 <__aeabi_dmul>
 800df68:	4602      	mov	r2, r0
 800df6a:	460b      	mov	r3, r1
 800df6c:	4630      	mov	r0, r6
 800df6e:	4639      	mov	r1, r7
 800df70:	f7f2 f9b2 	bl	80002d8 <__aeabi_dsub>
 800df74:	ec53 2b1a 	vmov	r2, r3, d10
 800df78:	f7f2 fb66 	bl	8000648 <__aeabi_dmul>
 800df7c:	ec53 2b18 	vmov	r2, r3, d8
 800df80:	ec41 0b19 	vmov	d9, r0, r1
 800df84:	ec51 0b18 	vmov	r0, r1, d8
 800df88:	f7f2 fb5e 	bl	8000648 <__aeabi_dmul>
 800df8c:	a37c      	add	r3, pc, #496	; (adr r3, 800e180 <__ieee754_pow+0x708>)
 800df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df92:	4604      	mov	r4, r0
 800df94:	460d      	mov	r5, r1
 800df96:	f7f2 fb57 	bl	8000648 <__aeabi_dmul>
 800df9a:	a37b      	add	r3, pc, #492	; (adr r3, 800e188 <__ieee754_pow+0x710>)
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f7f2 f99c 	bl	80002dc <__adddf3>
 800dfa4:	4622      	mov	r2, r4
 800dfa6:	462b      	mov	r3, r5
 800dfa8:	f7f2 fb4e 	bl	8000648 <__aeabi_dmul>
 800dfac:	a378      	add	r3, pc, #480	; (adr r3, 800e190 <__ieee754_pow+0x718>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 f993 	bl	80002dc <__adddf3>
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	462b      	mov	r3, r5
 800dfba:	f7f2 fb45 	bl	8000648 <__aeabi_dmul>
 800dfbe:	a376      	add	r3, pc, #472	; (adr r3, 800e198 <__ieee754_pow+0x720>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 f98a 	bl	80002dc <__adddf3>
 800dfc8:	4622      	mov	r2, r4
 800dfca:	462b      	mov	r3, r5
 800dfcc:	f7f2 fb3c 	bl	8000648 <__aeabi_dmul>
 800dfd0:	a373      	add	r3, pc, #460	; (adr r3, 800e1a0 <__ieee754_pow+0x728>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 f981 	bl	80002dc <__adddf3>
 800dfda:	4622      	mov	r2, r4
 800dfdc:	462b      	mov	r3, r5
 800dfde:	f7f2 fb33 	bl	8000648 <__aeabi_dmul>
 800dfe2:	a371      	add	r3, pc, #452	; (adr r3, 800e1a8 <__ieee754_pow+0x730>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 f978 	bl	80002dc <__adddf3>
 800dfec:	4622      	mov	r2, r4
 800dfee:	4606      	mov	r6, r0
 800dff0:	460f      	mov	r7, r1
 800dff2:	462b      	mov	r3, r5
 800dff4:	4620      	mov	r0, r4
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7f2 fb26 	bl	8000648 <__aeabi_dmul>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	4630      	mov	r0, r6
 800e002:	4639      	mov	r1, r7
 800e004:	f7f2 fb20 	bl	8000648 <__aeabi_dmul>
 800e008:	4642      	mov	r2, r8
 800e00a:	4604      	mov	r4, r0
 800e00c:	460d      	mov	r5, r1
 800e00e:	464b      	mov	r3, r9
 800e010:	ec51 0b18 	vmov	r0, r1, d8
 800e014:	f7f2 f962 	bl	80002dc <__adddf3>
 800e018:	ec53 2b19 	vmov	r2, r3, d9
 800e01c:	f7f2 fb14 	bl	8000648 <__aeabi_dmul>
 800e020:	4622      	mov	r2, r4
 800e022:	462b      	mov	r3, r5
 800e024:	f7f2 f95a 	bl	80002dc <__adddf3>
 800e028:	4642      	mov	r2, r8
 800e02a:	4682      	mov	sl, r0
 800e02c:	468b      	mov	fp, r1
 800e02e:	464b      	mov	r3, r9
 800e030:	4640      	mov	r0, r8
 800e032:	4649      	mov	r1, r9
 800e034:	f7f2 fb08 	bl	8000648 <__aeabi_dmul>
 800e038:	4b6b      	ldr	r3, [pc, #428]	; (800e1e8 <__ieee754_pow+0x770>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	4606      	mov	r6, r0
 800e03e:	460f      	mov	r7, r1
 800e040:	f7f2 f94c 	bl	80002dc <__adddf3>
 800e044:	4652      	mov	r2, sl
 800e046:	465b      	mov	r3, fp
 800e048:	f7f2 f948 	bl	80002dc <__adddf3>
 800e04c:	2000      	movs	r0, #0
 800e04e:	4604      	mov	r4, r0
 800e050:	460d      	mov	r5, r1
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4640      	mov	r0, r8
 800e058:	4649      	mov	r1, r9
 800e05a:	f7f2 faf5 	bl	8000648 <__aeabi_dmul>
 800e05e:	4b62      	ldr	r3, [pc, #392]	; (800e1e8 <__ieee754_pow+0x770>)
 800e060:	4680      	mov	r8, r0
 800e062:	4689      	mov	r9, r1
 800e064:	2200      	movs	r2, #0
 800e066:	4620      	mov	r0, r4
 800e068:	4629      	mov	r1, r5
 800e06a:	f7f2 f935 	bl	80002d8 <__aeabi_dsub>
 800e06e:	4632      	mov	r2, r6
 800e070:	463b      	mov	r3, r7
 800e072:	f7f2 f931 	bl	80002d8 <__aeabi_dsub>
 800e076:	4602      	mov	r2, r0
 800e078:	460b      	mov	r3, r1
 800e07a:	4650      	mov	r0, sl
 800e07c:	4659      	mov	r1, fp
 800e07e:	f7f2 f92b 	bl	80002d8 <__aeabi_dsub>
 800e082:	ec53 2b18 	vmov	r2, r3, d8
 800e086:	f7f2 fadf 	bl	8000648 <__aeabi_dmul>
 800e08a:	4622      	mov	r2, r4
 800e08c:	4606      	mov	r6, r0
 800e08e:	460f      	mov	r7, r1
 800e090:	462b      	mov	r3, r5
 800e092:	ec51 0b19 	vmov	r0, r1, d9
 800e096:	f7f2 fad7 	bl	8000648 <__aeabi_dmul>
 800e09a:	4602      	mov	r2, r0
 800e09c:	460b      	mov	r3, r1
 800e09e:	4630      	mov	r0, r6
 800e0a0:	4639      	mov	r1, r7
 800e0a2:	f7f2 f91b 	bl	80002dc <__adddf3>
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	460f      	mov	r7, r1
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	f7f2 f913 	bl	80002dc <__adddf3>
 800e0b6:	a33e      	add	r3, pc, #248	; (adr r3, 800e1b0 <__ieee754_pow+0x738>)
 800e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0bc:	2000      	movs	r0, #0
 800e0be:	4604      	mov	r4, r0
 800e0c0:	460d      	mov	r5, r1
 800e0c2:	f7f2 fac1 	bl	8000648 <__aeabi_dmul>
 800e0c6:	4642      	mov	r2, r8
 800e0c8:	ec41 0b18 	vmov	d8, r0, r1
 800e0cc:	464b      	mov	r3, r9
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	f7f2 f901 	bl	80002d8 <__aeabi_dsub>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	460b      	mov	r3, r1
 800e0da:	4630      	mov	r0, r6
 800e0dc:	4639      	mov	r1, r7
 800e0de:	f7f2 f8fb 	bl	80002d8 <__aeabi_dsub>
 800e0e2:	a335      	add	r3, pc, #212	; (adr r3, 800e1b8 <__ieee754_pow+0x740>)
 800e0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e8:	f7f2 faae 	bl	8000648 <__aeabi_dmul>
 800e0ec:	a334      	add	r3, pc, #208	; (adr r3, 800e1c0 <__ieee754_pow+0x748>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	460f      	mov	r7, r1
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	f7f2 faa5 	bl	8000648 <__aeabi_dmul>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	4630      	mov	r0, r6
 800e104:	4639      	mov	r1, r7
 800e106:	f7f2 f8e9 	bl	80002dc <__adddf3>
 800e10a:	9a07      	ldr	r2, [sp, #28]
 800e10c:	4b37      	ldr	r3, [pc, #220]	; (800e1ec <__ieee754_pow+0x774>)
 800e10e:	4413      	add	r3, r2
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	f7f2 f8e2 	bl	80002dc <__adddf3>
 800e118:	4682      	mov	sl, r0
 800e11a:	9805      	ldr	r0, [sp, #20]
 800e11c:	468b      	mov	fp, r1
 800e11e:	f7f2 fa29 	bl	8000574 <__aeabi_i2d>
 800e122:	9a07      	ldr	r2, [sp, #28]
 800e124:	4b32      	ldr	r3, [pc, #200]	; (800e1f0 <__ieee754_pow+0x778>)
 800e126:	4413      	add	r3, r2
 800e128:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e12c:	4606      	mov	r6, r0
 800e12e:	460f      	mov	r7, r1
 800e130:	4652      	mov	r2, sl
 800e132:	465b      	mov	r3, fp
 800e134:	ec51 0b18 	vmov	r0, r1, d8
 800e138:	f7f2 f8d0 	bl	80002dc <__adddf3>
 800e13c:	4642      	mov	r2, r8
 800e13e:	464b      	mov	r3, r9
 800e140:	f7f2 f8cc 	bl	80002dc <__adddf3>
 800e144:	4632      	mov	r2, r6
 800e146:	463b      	mov	r3, r7
 800e148:	f7f2 f8c8 	bl	80002dc <__adddf3>
 800e14c:	2000      	movs	r0, #0
 800e14e:	4632      	mov	r2, r6
 800e150:	463b      	mov	r3, r7
 800e152:	4604      	mov	r4, r0
 800e154:	460d      	mov	r5, r1
 800e156:	f7f2 f8bf 	bl	80002d8 <__aeabi_dsub>
 800e15a:	4642      	mov	r2, r8
 800e15c:	464b      	mov	r3, r9
 800e15e:	f7f2 f8bb 	bl	80002d8 <__aeabi_dsub>
 800e162:	ec53 2b18 	vmov	r2, r3, d8
 800e166:	f7f2 f8b7 	bl	80002d8 <__aeabi_dsub>
 800e16a:	4602      	mov	r2, r0
 800e16c:	460b      	mov	r3, r1
 800e16e:	4650      	mov	r0, sl
 800e170:	4659      	mov	r1, fp
 800e172:	e610      	b.n	800dd96 <__ieee754_pow+0x31e>
 800e174:	2401      	movs	r4, #1
 800e176:	e6a1      	b.n	800debc <__ieee754_pow+0x444>
 800e178:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e1c8 <__ieee754_pow+0x750>
 800e17c:	e617      	b.n	800ddae <__ieee754_pow+0x336>
 800e17e:	bf00      	nop
 800e180:	4a454eef 	.word	0x4a454eef
 800e184:	3fca7e28 	.word	0x3fca7e28
 800e188:	93c9db65 	.word	0x93c9db65
 800e18c:	3fcd864a 	.word	0x3fcd864a
 800e190:	a91d4101 	.word	0xa91d4101
 800e194:	3fd17460 	.word	0x3fd17460
 800e198:	518f264d 	.word	0x518f264d
 800e19c:	3fd55555 	.word	0x3fd55555
 800e1a0:	db6fabff 	.word	0xdb6fabff
 800e1a4:	3fdb6db6 	.word	0x3fdb6db6
 800e1a8:	33333303 	.word	0x33333303
 800e1ac:	3fe33333 	.word	0x3fe33333
 800e1b0:	e0000000 	.word	0xe0000000
 800e1b4:	3feec709 	.word	0x3feec709
 800e1b8:	dc3a03fd 	.word	0xdc3a03fd
 800e1bc:	3feec709 	.word	0x3feec709
 800e1c0:	145b01f5 	.word	0x145b01f5
 800e1c4:	be3e2fe0 	.word	0xbe3e2fe0
 800e1c8:	00000000 	.word	0x00000000
 800e1cc:	3ff00000 	.word	0x3ff00000
 800e1d0:	7ff00000 	.word	0x7ff00000
 800e1d4:	43400000 	.word	0x43400000
 800e1d8:	0003988e 	.word	0x0003988e
 800e1dc:	000bb679 	.word	0x000bb679
 800e1e0:	0800f1a0 	.word	0x0800f1a0
 800e1e4:	3ff00000 	.word	0x3ff00000
 800e1e8:	40080000 	.word	0x40080000
 800e1ec:	0800f1c0 	.word	0x0800f1c0
 800e1f0:	0800f1b0 	.word	0x0800f1b0
 800e1f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e4cc <__ieee754_pow+0xa54>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	4649      	mov	r1, r9
 800e1fe:	f7f2 f86d 	bl	80002dc <__adddf3>
 800e202:	4622      	mov	r2, r4
 800e204:	ec41 0b1a 	vmov	d10, r0, r1
 800e208:	462b      	mov	r3, r5
 800e20a:	4630      	mov	r0, r6
 800e20c:	4639      	mov	r1, r7
 800e20e:	f7f2 f863 	bl	80002d8 <__aeabi_dsub>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	ec51 0b1a 	vmov	r0, r1, d10
 800e21a:	f7f2 fca5 	bl	8000b68 <__aeabi_dcmpgt>
 800e21e:	2800      	cmp	r0, #0
 800e220:	f47f ae04 	bne.w	800de2c <__ieee754_pow+0x3b4>
 800e224:	4aa4      	ldr	r2, [pc, #656]	; (800e4b8 <__ieee754_pow+0xa40>)
 800e226:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e22a:	4293      	cmp	r3, r2
 800e22c:	f340 8108 	ble.w	800e440 <__ieee754_pow+0x9c8>
 800e230:	151b      	asrs	r3, r3, #20
 800e232:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e236:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e23a:	fa4a f303 	asr.w	r3, sl, r3
 800e23e:	445b      	add	r3, fp
 800e240:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e244:	4e9d      	ldr	r6, [pc, #628]	; (800e4bc <__ieee754_pow+0xa44>)
 800e246:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e24a:	4116      	asrs	r6, r2
 800e24c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e250:	2000      	movs	r0, #0
 800e252:	ea23 0106 	bic.w	r1, r3, r6
 800e256:	f1c2 0214 	rsb	r2, r2, #20
 800e25a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e25e:	fa4a fa02 	asr.w	sl, sl, r2
 800e262:	f1bb 0f00 	cmp.w	fp, #0
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	bfb8      	it	lt
 800e270:	f1ca 0a00 	rsblt	sl, sl, #0
 800e274:	f7f2 f830 	bl	80002d8 <__aeabi_dsub>
 800e278:	ec41 0b19 	vmov	d9, r0, r1
 800e27c:	4642      	mov	r2, r8
 800e27e:	464b      	mov	r3, r9
 800e280:	ec51 0b19 	vmov	r0, r1, d9
 800e284:	f7f2 f82a 	bl	80002dc <__adddf3>
 800e288:	a37b      	add	r3, pc, #492	; (adr r3, 800e478 <__ieee754_pow+0xa00>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	2000      	movs	r0, #0
 800e290:	4604      	mov	r4, r0
 800e292:	460d      	mov	r5, r1
 800e294:	f7f2 f9d8 	bl	8000648 <__aeabi_dmul>
 800e298:	ec53 2b19 	vmov	r2, r3, d9
 800e29c:	4606      	mov	r6, r0
 800e29e:	460f      	mov	r7, r1
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	f7f2 f818 	bl	80002d8 <__aeabi_dsub>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4640      	mov	r0, r8
 800e2ae:	4649      	mov	r1, r9
 800e2b0:	f7f2 f812 	bl	80002d8 <__aeabi_dsub>
 800e2b4:	a372      	add	r3, pc, #456	; (adr r3, 800e480 <__ieee754_pow+0xa08>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f7f2 f9c5 	bl	8000648 <__aeabi_dmul>
 800e2be:	a372      	add	r3, pc, #456	; (adr r3, 800e488 <__ieee754_pow+0xa10>)
 800e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c4:	4680      	mov	r8, r0
 800e2c6:	4689      	mov	r9, r1
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	f7f2 f9bc 	bl	8000648 <__aeabi_dmul>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	4649      	mov	r1, r9
 800e2d8:	f7f2 f800 	bl	80002dc <__adddf3>
 800e2dc:	4604      	mov	r4, r0
 800e2de:	460d      	mov	r5, r1
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4630      	mov	r0, r6
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	f7f1 fff8 	bl	80002dc <__adddf3>
 800e2ec:	4632      	mov	r2, r6
 800e2ee:	463b      	mov	r3, r7
 800e2f0:	4680      	mov	r8, r0
 800e2f2:	4689      	mov	r9, r1
 800e2f4:	f7f1 fff0 	bl	80002d8 <__aeabi_dsub>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4629      	mov	r1, r5
 800e300:	f7f1 ffea 	bl	80002d8 <__aeabi_dsub>
 800e304:	4642      	mov	r2, r8
 800e306:	4606      	mov	r6, r0
 800e308:	460f      	mov	r7, r1
 800e30a:	464b      	mov	r3, r9
 800e30c:	4640      	mov	r0, r8
 800e30e:	4649      	mov	r1, r9
 800e310:	f7f2 f99a 	bl	8000648 <__aeabi_dmul>
 800e314:	a35e      	add	r3, pc, #376	; (adr r3, 800e490 <__ieee754_pow+0xa18>)
 800e316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31a:	4604      	mov	r4, r0
 800e31c:	460d      	mov	r5, r1
 800e31e:	f7f2 f993 	bl	8000648 <__aeabi_dmul>
 800e322:	a35d      	add	r3, pc, #372	; (adr r3, 800e498 <__ieee754_pow+0xa20>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f7f1 ffd6 	bl	80002d8 <__aeabi_dsub>
 800e32c:	4622      	mov	r2, r4
 800e32e:	462b      	mov	r3, r5
 800e330:	f7f2 f98a 	bl	8000648 <__aeabi_dmul>
 800e334:	a35a      	add	r3, pc, #360	; (adr r3, 800e4a0 <__ieee754_pow+0xa28>)
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f7f1 ffcf 	bl	80002dc <__adddf3>
 800e33e:	4622      	mov	r2, r4
 800e340:	462b      	mov	r3, r5
 800e342:	f7f2 f981 	bl	8000648 <__aeabi_dmul>
 800e346:	a358      	add	r3, pc, #352	; (adr r3, 800e4a8 <__ieee754_pow+0xa30>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	f7f1 ffc4 	bl	80002d8 <__aeabi_dsub>
 800e350:	4622      	mov	r2, r4
 800e352:	462b      	mov	r3, r5
 800e354:	f7f2 f978 	bl	8000648 <__aeabi_dmul>
 800e358:	a355      	add	r3, pc, #340	; (adr r3, 800e4b0 <__ieee754_pow+0xa38>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f1 ffbd 	bl	80002dc <__adddf3>
 800e362:	4622      	mov	r2, r4
 800e364:	462b      	mov	r3, r5
 800e366:	f7f2 f96f 	bl	8000648 <__aeabi_dmul>
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	4640      	mov	r0, r8
 800e370:	4649      	mov	r1, r9
 800e372:	f7f1 ffb1 	bl	80002d8 <__aeabi_dsub>
 800e376:	4604      	mov	r4, r0
 800e378:	460d      	mov	r5, r1
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	4640      	mov	r0, r8
 800e380:	4649      	mov	r1, r9
 800e382:	f7f2 f961 	bl	8000648 <__aeabi_dmul>
 800e386:	2200      	movs	r2, #0
 800e388:	ec41 0b19 	vmov	d9, r0, r1
 800e38c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e390:	4620      	mov	r0, r4
 800e392:	4629      	mov	r1, r5
 800e394:	f7f1 ffa0 	bl	80002d8 <__aeabi_dsub>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	ec51 0b19 	vmov	r0, r1, d9
 800e3a0:	f7f2 fa7c 	bl	800089c <__aeabi_ddiv>
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	460d      	mov	r5, r1
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	4640      	mov	r0, r8
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	f7f2 f94a 	bl	8000648 <__aeabi_dmul>
 800e3b4:	4632      	mov	r2, r6
 800e3b6:	463b      	mov	r3, r7
 800e3b8:	f7f1 ff90 	bl	80002dc <__adddf3>
 800e3bc:	4602      	mov	r2, r0
 800e3be:	460b      	mov	r3, r1
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	f7f1 ff88 	bl	80002d8 <__aeabi_dsub>
 800e3c8:	4642      	mov	r2, r8
 800e3ca:	464b      	mov	r3, r9
 800e3cc:	f7f1 ff84 	bl	80002d8 <__aeabi_dsub>
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	493a      	ldr	r1, [pc, #232]	; (800e4c0 <__ieee754_pow+0xa48>)
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	f7f1 ff7e 	bl	80002d8 <__aeabi_dsub>
 800e3dc:	ec41 0b10 	vmov	d0, r0, r1
 800e3e0:	ee10 3a90 	vmov	r3, s1
 800e3e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e3e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3ec:	da2b      	bge.n	800e446 <__ieee754_pow+0x9ce>
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	f000 faf2 	bl	800e9d8 <scalbn>
 800e3f4:	ec51 0b10 	vmov	r0, r1, d0
 800e3f8:	ec53 2b18 	vmov	r2, r3, d8
 800e3fc:	f7ff bbed 	b.w	800dbda <__ieee754_pow+0x162>
 800e400:	4b30      	ldr	r3, [pc, #192]	; (800e4c4 <__ieee754_pow+0xa4c>)
 800e402:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e406:	429e      	cmp	r6, r3
 800e408:	f77f af0c 	ble.w	800e224 <__ieee754_pow+0x7ac>
 800e40c:	4b2e      	ldr	r3, [pc, #184]	; (800e4c8 <__ieee754_pow+0xa50>)
 800e40e:	440b      	add	r3, r1
 800e410:	4303      	orrs	r3, r0
 800e412:	d009      	beq.n	800e428 <__ieee754_pow+0x9b0>
 800e414:	ec51 0b18 	vmov	r0, r1, d8
 800e418:	2200      	movs	r2, #0
 800e41a:	2300      	movs	r3, #0
 800e41c:	f7f2 fb86 	bl	8000b2c <__aeabi_dcmplt>
 800e420:	3800      	subs	r0, #0
 800e422:	bf18      	it	ne
 800e424:	2001      	movne	r0, #1
 800e426:	e447      	b.n	800dcb8 <__ieee754_pow+0x240>
 800e428:	4622      	mov	r2, r4
 800e42a:	462b      	mov	r3, r5
 800e42c:	f7f1 ff54 	bl	80002d8 <__aeabi_dsub>
 800e430:	4642      	mov	r2, r8
 800e432:	464b      	mov	r3, r9
 800e434:	f7f2 fb8e 	bl	8000b54 <__aeabi_dcmpge>
 800e438:	2800      	cmp	r0, #0
 800e43a:	f43f aef3 	beq.w	800e224 <__ieee754_pow+0x7ac>
 800e43e:	e7e9      	b.n	800e414 <__ieee754_pow+0x99c>
 800e440:	f04f 0a00 	mov.w	sl, #0
 800e444:	e71a      	b.n	800e27c <__ieee754_pow+0x804>
 800e446:	ec51 0b10 	vmov	r0, r1, d0
 800e44a:	4619      	mov	r1, r3
 800e44c:	e7d4      	b.n	800e3f8 <__ieee754_pow+0x980>
 800e44e:	491c      	ldr	r1, [pc, #112]	; (800e4c0 <__ieee754_pow+0xa48>)
 800e450:	2000      	movs	r0, #0
 800e452:	f7ff bb30 	b.w	800dab6 <__ieee754_pow+0x3e>
 800e456:	2000      	movs	r0, #0
 800e458:	2100      	movs	r1, #0
 800e45a:	f7ff bb2c 	b.w	800dab6 <__ieee754_pow+0x3e>
 800e45e:	4630      	mov	r0, r6
 800e460:	4639      	mov	r1, r7
 800e462:	f7ff bb28 	b.w	800dab6 <__ieee754_pow+0x3e>
 800e466:	9204      	str	r2, [sp, #16]
 800e468:	f7ff bb7a 	b.w	800db60 <__ieee754_pow+0xe8>
 800e46c:	2300      	movs	r3, #0
 800e46e:	f7ff bb64 	b.w	800db3a <__ieee754_pow+0xc2>
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	00000000 	.word	0x00000000
 800e47c:	3fe62e43 	.word	0x3fe62e43
 800e480:	fefa39ef 	.word	0xfefa39ef
 800e484:	3fe62e42 	.word	0x3fe62e42
 800e488:	0ca86c39 	.word	0x0ca86c39
 800e48c:	be205c61 	.word	0xbe205c61
 800e490:	72bea4d0 	.word	0x72bea4d0
 800e494:	3e663769 	.word	0x3e663769
 800e498:	c5d26bf1 	.word	0xc5d26bf1
 800e49c:	3ebbbd41 	.word	0x3ebbbd41
 800e4a0:	af25de2c 	.word	0xaf25de2c
 800e4a4:	3f11566a 	.word	0x3f11566a
 800e4a8:	16bebd93 	.word	0x16bebd93
 800e4ac:	3f66c16c 	.word	0x3f66c16c
 800e4b0:	5555553e 	.word	0x5555553e
 800e4b4:	3fc55555 	.word	0x3fc55555
 800e4b8:	3fe00000 	.word	0x3fe00000
 800e4bc:	000fffff 	.word	0x000fffff
 800e4c0:	3ff00000 	.word	0x3ff00000
 800e4c4:	4090cbff 	.word	0x4090cbff
 800e4c8:	3f6f3400 	.word	0x3f6f3400
 800e4cc:	652b82fe 	.word	0x652b82fe
 800e4d0:	3c971547 	.word	0x3c971547

0800e4d4 <__ieee754_sqrt>:
 800e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d8:	ec55 4b10 	vmov	r4, r5, d0
 800e4dc:	4e55      	ldr	r6, [pc, #340]	; (800e634 <__ieee754_sqrt+0x160>)
 800e4de:	43ae      	bics	r6, r5
 800e4e0:	ee10 0a10 	vmov	r0, s0
 800e4e4:	ee10 3a10 	vmov	r3, s0
 800e4e8:	462a      	mov	r2, r5
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	d110      	bne.n	800e510 <__ieee754_sqrt+0x3c>
 800e4ee:	ee10 2a10 	vmov	r2, s0
 800e4f2:	462b      	mov	r3, r5
 800e4f4:	f7f2 f8a8 	bl	8000648 <__aeabi_dmul>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	f7f1 feec 	bl	80002dc <__adddf3>
 800e504:	4604      	mov	r4, r0
 800e506:	460d      	mov	r5, r1
 800e508:	ec45 4b10 	vmov	d0, r4, r5
 800e50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e510:	2d00      	cmp	r5, #0
 800e512:	dc10      	bgt.n	800e536 <__ieee754_sqrt+0x62>
 800e514:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e518:	4330      	orrs	r0, r6
 800e51a:	d0f5      	beq.n	800e508 <__ieee754_sqrt+0x34>
 800e51c:	b15d      	cbz	r5, 800e536 <__ieee754_sqrt+0x62>
 800e51e:	ee10 2a10 	vmov	r2, s0
 800e522:	462b      	mov	r3, r5
 800e524:	ee10 0a10 	vmov	r0, s0
 800e528:	f7f1 fed6 	bl	80002d8 <__aeabi_dsub>
 800e52c:	4602      	mov	r2, r0
 800e52e:	460b      	mov	r3, r1
 800e530:	f7f2 f9b4 	bl	800089c <__aeabi_ddiv>
 800e534:	e7e6      	b.n	800e504 <__ieee754_sqrt+0x30>
 800e536:	1512      	asrs	r2, r2, #20
 800e538:	d074      	beq.n	800e624 <__ieee754_sqrt+0x150>
 800e53a:	07d4      	lsls	r4, r2, #31
 800e53c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e540:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e544:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e548:	bf5e      	ittt	pl
 800e54a:	0fda      	lsrpl	r2, r3, #31
 800e54c:	005b      	lslpl	r3, r3, #1
 800e54e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e552:	2400      	movs	r4, #0
 800e554:	0fda      	lsrs	r2, r3, #31
 800e556:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e55a:	107f      	asrs	r7, r7, #1
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	2516      	movs	r5, #22
 800e560:	4620      	mov	r0, r4
 800e562:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e566:	1886      	adds	r6, r0, r2
 800e568:	428e      	cmp	r6, r1
 800e56a:	bfde      	ittt	le
 800e56c:	1b89      	suble	r1, r1, r6
 800e56e:	18b0      	addle	r0, r6, r2
 800e570:	18a4      	addle	r4, r4, r2
 800e572:	0049      	lsls	r1, r1, #1
 800e574:	3d01      	subs	r5, #1
 800e576:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e57a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e57e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e582:	d1f0      	bne.n	800e566 <__ieee754_sqrt+0x92>
 800e584:	462a      	mov	r2, r5
 800e586:	f04f 0e20 	mov.w	lr, #32
 800e58a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e58e:	4281      	cmp	r1, r0
 800e590:	eb06 0c05 	add.w	ip, r6, r5
 800e594:	dc02      	bgt.n	800e59c <__ieee754_sqrt+0xc8>
 800e596:	d113      	bne.n	800e5c0 <__ieee754_sqrt+0xec>
 800e598:	459c      	cmp	ip, r3
 800e59a:	d811      	bhi.n	800e5c0 <__ieee754_sqrt+0xec>
 800e59c:	f1bc 0f00 	cmp.w	ip, #0
 800e5a0:	eb0c 0506 	add.w	r5, ip, r6
 800e5a4:	da43      	bge.n	800e62e <__ieee754_sqrt+0x15a>
 800e5a6:	2d00      	cmp	r5, #0
 800e5a8:	db41      	blt.n	800e62e <__ieee754_sqrt+0x15a>
 800e5aa:	f100 0801 	add.w	r8, r0, #1
 800e5ae:	1a09      	subs	r1, r1, r0
 800e5b0:	459c      	cmp	ip, r3
 800e5b2:	bf88      	it	hi
 800e5b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e5b8:	eba3 030c 	sub.w	r3, r3, ip
 800e5bc:	4432      	add	r2, r6
 800e5be:	4640      	mov	r0, r8
 800e5c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e5c4:	f1be 0e01 	subs.w	lr, lr, #1
 800e5c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e5cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e5d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e5d4:	d1db      	bne.n	800e58e <__ieee754_sqrt+0xba>
 800e5d6:	430b      	orrs	r3, r1
 800e5d8:	d006      	beq.n	800e5e8 <__ieee754_sqrt+0x114>
 800e5da:	1c50      	adds	r0, r2, #1
 800e5dc:	bf13      	iteet	ne
 800e5de:	3201      	addne	r2, #1
 800e5e0:	3401      	addeq	r4, #1
 800e5e2:	4672      	moveq	r2, lr
 800e5e4:	f022 0201 	bicne.w	r2, r2, #1
 800e5e8:	1063      	asrs	r3, r4, #1
 800e5ea:	0852      	lsrs	r2, r2, #1
 800e5ec:	07e1      	lsls	r1, r4, #31
 800e5ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e5f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e5f6:	bf48      	it	mi
 800e5f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e5fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e600:	4614      	mov	r4, r2
 800e602:	e781      	b.n	800e508 <__ieee754_sqrt+0x34>
 800e604:	0ad9      	lsrs	r1, r3, #11
 800e606:	3815      	subs	r0, #21
 800e608:	055b      	lsls	r3, r3, #21
 800e60a:	2900      	cmp	r1, #0
 800e60c:	d0fa      	beq.n	800e604 <__ieee754_sqrt+0x130>
 800e60e:	02cd      	lsls	r5, r1, #11
 800e610:	d50a      	bpl.n	800e628 <__ieee754_sqrt+0x154>
 800e612:	f1c2 0420 	rsb	r4, r2, #32
 800e616:	fa23 f404 	lsr.w	r4, r3, r4
 800e61a:	1e55      	subs	r5, r2, #1
 800e61c:	4093      	lsls	r3, r2
 800e61e:	4321      	orrs	r1, r4
 800e620:	1b42      	subs	r2, r0, r5
 800e622:	e78a      	b.n	800e53a <__ieee754_sqrt+0x66>
 800e624:	4610      	mov	r0, r2
 800e626:	e7f0      	b.n	800e60a <__ieee754_sqrt+0x136>
 800e628:	0049      	lsls	r1, r1, #1
 800e62a:	3201      	adds	r2, #1
 800e62c:	e7ef      	b.n	800e60e <__ieee754_sqrt+0x13a>
 800e62e:	4680      	mov	r8, r0
 800e630:	e7bd      	b.n	800e5ae <__ieee754_sqrt+0xda>
 800e632:	bf00      	nop
 800e634:	7ff00000 	.word	0x7ff00000

0800e638 <__ieee754_asinf>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	ee10 5a10 	vmov	r5, s0
 800e63e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e642:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e646:	ed2d 8b04 	vpush	{d8-d9}
 800e64a:	d10c      	bne.n	800e666 <__ieee754_asinf+0x2e>
 800e64c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800e7c4 <__ieee754_asinf+0x18c>
 800e650:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800e7c8 <__ieee754_asinf+0x190>
 800e654:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e658:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e65c:	eeb0 0a67 	vmov.f32	s0, s15
 800e660:	ecbd 8b04 	vpop	{d8-d9}
 800e664:	bd38      	pop	{r3, r4, r5, pc}
 800e666:	dd04      	ble.n	800e672 <__ieee754_asinf+0x3a>
 800e668:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e66c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e670:	e7f6      	b.n	800e660 <__ieee754_asinf+0x28>
 800e672:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e676:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e67a:	da0b      	bge.n	800e694 <__ieee754_asinf+0x5c>
 800e67c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e680:	da52      	bge.n	800e728 <__ieee754_asinf+0xf0>
 800e682:	eddf 7a52 	vldr	s15, [pc, #328]	; 800e7cc <__ieee754_asinf+0x194>
 800e686:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e68a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e692:	dce5      	bgt.n	800e660 <__ieee754_asinf+0x28>
 800e694:	f000 fafa 	bl	800ec8c <fabsf>
 800e698:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e69c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800e6a0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800e6a4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800e7d0 <__ieee754_asinf+0x198>
 800e6a8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800e7d4 <__ieee754_asinf+0x19c>
 800e6ac:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800e7d8 <__ieee754_asinf+0x1a0>
 800e6b0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e6b4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800e7dc <__ieee754_asinf+0x1a4>
 800e6b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e6bc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e7e0 <__ieee754_asinf+0x1a8>
 800e6c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e6c4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800e7e4 <__ieee754_asinf+0x1ac>
 800e6c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e6cc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e7e8 <__ieee754_asinf+0x1b0>
 800e6d0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e6d4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800e7ec <__ieee754_asinf+0x1b4>
 800e6d8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e6dc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e7f0 <__ieee754_asinf+0x1b8>
 800e6e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e6e4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800e7f4 <__ieee754_asinf+0x1bc>
 800e6e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e6ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e6f0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e6f4:	f000 f926 	bl	800e944 <__ieee754_sqrtf>
 800e6f8:	4b3f      	ldr	r3, [pc, #252]	; (800e7f8 <__ieee754_asinf+0x1c0>)
 800e6fa:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e6fe:	429c      	cmp	r4, r3
 800e700:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e704:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e708:	dd3d      	ble.n	800e786 <__ieee754_asinf+0x14e>
 800e70a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e70e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800e7fc <__ieee754_asinf+0x1c4>
 800e712:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e716:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e7c8 <__ieee754_asinf+0x190>
 800e71a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e71e:	2d00      	cmp	r5, #0
 800e720:	bfd8      	it	le
 800e722:	eeb1 0a40 	vnegle.f32	s0, s0
 800e726:	e79b      	b.n	800e660 <__ieee754_asinf+0x28>
 800e728:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e72c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800e7d0 <__ieee754_asinf+0x198>
 800e730:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800e7d4 <__ieee754_asinf+0x19c>
 800e734:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800e7e8 <__ieee754_asinf+0x1b0>
 800e738:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e73c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800e7dc <__ieee754_asinf+0x1a4>
 800e740:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e744:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800e7e0 <__ieee754_asinf+0x1a8>
 800e748:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e74c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800e7e4 <__ieee754_asinf+0x1ac>
 800e750:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e754:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800e7d8 <__ieee754_asinf+0x1a0>
 800e758:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e75c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e7ec <__ieee754_asinf+0x1b4>
 800e760:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e764:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800e7f0 <__ieee754_asinf+0x1b8>
 800e768:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e76c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800e7f4 <__ieee754_asinf+0x1bc>
 800e770:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e774:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e778:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e77c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e780:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e784:	e76c      	b.n	800e660 <__ieee754_asinf+0x28>
 800e786:	ee10 3a10 	vmov	r3, s0
 800e78a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e78e:	f023 030f 	bic.w	r3, r3, #15
 800e792:	ee07 3a10 	vmov	s14, r3
 800e796:	eea7 8a47 	vfms.f32	s16, s14, s14
 800e79a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e79e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e7a2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800e7a6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e7c4 <__ieee754_asinf+0x18c>
 800e7aa:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800e7ae:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800e7b2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e800 <__ieee754_asinf+0x1c8>
 800e7b6:	eeb0 6a40 	vmov.f32	s12, s0
 800e7ba:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e7be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e7c2:	e7aa      	b.n	800e71a <__ieee754_asinf+0xe2>
 800e7c4:	b33bbd2e 	.word	0xb33bbd2e
 800e7c8:	3fc90fdb 	.word	0x3fc90fdb
 800e7cc:	7149f2ca 	.word	0x7149f2ca
 800e7d0:	3811ef08 	.word	0x3811ef08
 800e7d4:	3a4f7f04 	.word	0x3a4f7f04
 800e7d8:	3e2aaaab 	.word	0x3e2aaaab
 800e7dc:	bd241146 	.word	0xbd241146
 800e7e0:	3e4e0aa8 	.word	0x3e4e0aa8
 800e7e4:	bea6b090 	.word	0xbea6b090
 800e7e8:	3d9dc62e 	.word	0x3d9dc62e
 800e7ec:	bf303361 	.word	0xbf303361
 800e7f0:	4001572d 	.word	0x4001572d
 800e7f4:	c019d139 	.word	0xc019d139
 800e7f8:	3f799999 	.word	0x3f799999
 800e7fc:	333bbd2e 	.word	0x333bbd2e
 800e800:	3f490fdb 	.word	0x3f490fdb

0800e804 <__ieee754_atan2f>:
 800e804:	ee10 2a90 	vmov	r2, s1
 800e808:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e80c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e810:	b510      	push	{r4, lr}
 800e812:	eef0 7a40 	vmov.f32	s15, s0
 800e816:	dc06      	bgt.n	800e826 <__ieee754_atan2f+0x22>
 800e818:	ee10 0a10 	vmov	r0, s0
 800e81c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e820:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e824:	dd04      	ble.n	800e830 <__ieee754_atan2f+0x2c>
 800e826:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e82a:	eeb0 0a67 	vmov.f32	s0, s15
 800e82e:	bd10      	pop	{r4, pc}
 800e830:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e834:	d103      	bne.n	800e83e <__ieee754_atan2f+0x3a>
 800e836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e83a:	f000 b953 	b.w	800eae4 <atanf>
 800e83e:	1794      	asrs	r4, r2, #30
 800e840:	f004 0402 	and.w	r4, r4, #2
 800e844:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e848:	b943      	cbnz	r3, 800e85c <__ieee754_atan2f+0x58>
 800e84a:	2c02      	cmp	r4, #2
 800e84c:	d05e      	beq.n	800e90c <__ieee754_atan2f+0x108>
 800e84e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e920 <__ieee754_atan2f+0x11c>
 800e852:	2c03      	cmp	r4, #3
 800e854:	bf08      	it	eq
 800e856:	eef0 7a47 	vmoveq.f32	s15, s14
 800e85a:	e7e6      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e85c:	b941      	cbnz	r1, 800e870 <__ieee754_atan2f+0x6c>
 800e85e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e924 <__ieee754_atan2f+0x120>
 800e862:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800e928 <__ieee754_atan2f+0x124>
 800e866:	2800      	cmp	r0, #0
 800e868:	bfb8      	it	lt
 800e86a:	eef0 7a40 	vmovlt.f32	s15, s0
 800e86e:	e7dc      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e870:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e874:	d110      	bne.n	800e898 <__ieee754_atan2f+0x94>
 800e876:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e87a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e87e:	d107      	bne.n	800e890 <__ieee754_atan2f+0x8c>
 800e880:	2c02      	cmp	r4, #2
 800e882:	d846      	bhi.n	800e912 <__ieee754_atan2f+0x10e>
 800e884:	4b29      	ldr	r3, [pc, #164]	; (800e92c <__ieee754_atan2f+0x128>)
 800e886:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e88a:	edd4 7a00 	vldr	s15, [r4]
 800e88e:	e7cc      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e890:	2c02      	cmp	r4, #2
 800e892:	d841      	bhi.n	800e918 <__ieee754_atan2f+0x114>
 800e894:	4b26      	ldr	r3, [pc, #152]	; (800e930 <__ieee754_atan2f+0x12c>)
 800e896:	e7f6      	b.n	800e886 <__ieee754_atan2f+0x82>
 800e898:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e89c:	d0df      	beq.n	800e85e <__ieee754_atan2f+0x5a>
 800e89e:	1a5b      	subs	r3, r3, r1
 800e8a0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800e8a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e8a8:	da1a      	bge.n	800e8e0 <__ieee754_atan2f+0xdc>
 800e8aa:	2a00      	cmp	r2, #0
 800e8ac:	da01      	bge.n	800e8b2 <__ieee754_atan2f+0xae>
 800e8ae:	313c      	adds	r1, #60	; 0x3c
 800e8b0:	db19      	blt.n	800e8e6 <__ieee754_atan2f+0xe2>
 800e8b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e8b6:	f000 f9e9 	bl	800ec8c <fabsf>
 800e8ba:	f000 f913 	bl	800eae4 <atanf>
 800e8be:	eef0 7a40 	vmov.f32	s15, s0
 800e8c2:	2c01      	cmp	r4, #1
 800e8c4:	d012      	beq.n	800e8ec <__ieee754_atan2f+0xe8>
 800e8c6:	2c02      	cmp	r4, #2
 800e8c8:	d017      	beq.n	800e8fa <__ieee754_atan2f+0xf6>
 800e8ca:	2c00      	cmp	r4, #0
 800e8cc:	d0ad      	beq.n	800e82a <__ieee754_atan2f+0x26>
 800e8ce:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e934 <__ieee754_atan2f+0x130>
 800e8d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e8d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800e938 <__ieee754_atan2f+0x134>
 800e8da:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e8de:	e7a4      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e8e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e924 <__ieee754_atan2f+0x120>
 800e8e4:	e7ed      	b.n	800e8c2 <__ieee754_atan2f+0xbe>
 800e8e6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e93c <__ieee754_atan2f+0x138>
 800e8ea:	e7ea      	b.n	800e8c2 <__ieee754_atan2f+0xbe>
 800e8ec:	ee17 3a90 	vmov	r3, s15
 800e8f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e8f4:	ee07 3a90 	vmov	s15, r3
 800e8f8:	e797      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e8fa:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e934 <__ieee754_atan2f+0x130>
 800e8fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e902:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800e938 <__ieee754_atan2f+0x134>
 800e906:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e90a:	e78e      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e90c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e938 <__ieee754_atan2f+0x134>
 800e910:	e78b      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e912:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e940 <__ieee754_atan2f+0x13c>
 800e916:	e788      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e918:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e93c <__ieee754_atan2f+0x138>
 800e91c:	e785      	b.n	800e82a <__ieee754_atan2f+0x26>
 800e91e:	bf00      	nop
 800e920:	c0490fdb 	.word	0xc0490fdb
 800e924:	3fc90fdb 	.word	0x3fc90fdb
 800e928:	bfc90fdb 	.word	0xbfc90fdb
 800e92c:	0800f1d0 	.word	0x0800f1d0
 800e930:	0800f1dc 	.word	0x0800f1dc
 800e934:	33bbbd2e 	.word	0x33bbbd2e
 800e938:	40490fdb 	.word	0x40490fdb
 800e93c:	00000000 	.word	0x00000000
 800e940:	3f490fdb 	.word	0x3f490fdb

0800e944 <__ieee754_sqrtf>:
 800e944:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e948:	4770      	bx	lr

0800e94a <with_errno>:
 800e94a:	b570      	push	{r4, r5, r6, lr}
 800e94c:	4604      	mov	r4, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	4616      	mov	r6, r2
 800e952:	f7fc f88b 	bl	800aa6c <__errno>
 800e956:	4629      	mov	r1, r5
 800e958:	6006      	str	r6, [r0, #0]
 800e95a:	4620      	mov	r0, r4
 800e95c:	bd70      	pop	{r4, r5, r6, pc}

0800e95e <xflow>:
 800e95e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e960:	4614      	mov	r4, r2
 800e962:	461d      	mov	r5, r3
 800e964:	b108      	cbz	r0, 800e96a <xflow+0xc>
 800e966:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e96a:	e9cd 2300 	strd	r2, r3, [sp]
 800e96e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e972:	4620      	mov	r0, r4
 800e974:	4629      	mov	r1, r5
 800e976:	f7f1 fe67 	bl	8000648 <__aeabi_dmul>
 800e97a:	2222      	movs	r2, #34	; 0x22
 800e97c:	b003      	add	sp, #12
 800e97e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e982:	f7ff bfe2 	b.w	800e94a <with_errno>

0800e986 <__math_uflow>:
 800e986:	b508      	push	{r3, lr}
 800e988:	2200      	movs	r2, #0
 800e98a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e98e:	f7ff ffe6 	bl	800e95e <xflow>
 800e992:	ec41 0b10 	vmov	d0, r0, r1
 800e996:	bd08      	pop	{r3, pc}

0800e998 <__math_oflow>:
 800e998:	b508      	push	{r3, lr}
 800e99a:	2200      	movs	r2, #0
 800e99c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e9a0:	f7ff ffdd 	bl	800e95e <xflow>
 800e9a4:	ec41 0b10 	vmov	d0, r0, r1
 800e9a8:	bd08      	pop	{r3, pc}

0800e9aa <fabs>:
 800e9aa:	ec51 0b10 	vmov	r0, r1, d0
 800e9ae:	ee10 2a10 	vmov	r2, s0
 800e9b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e9b6:	ec43 2b10 	vmov	d0, r2, r3
 800e9ba:	4770      	bx	lr

0800e9bc <finite>:
 800e9bc:	b082      	sub	sp, #8
 800e9be:	ed8d 0b00 	vstr	d0, [sp]
 800e9c2:	9801      	ldr	r0, [sp, #4]
 800e9c4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e9c8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e9cc:	0fc0      	lsrs	r0, r0, #31
 800e9ce:	b002      	add	sp, #8
 800e9d0:	4770      	bx	lr
 800e9d2:	0000      	movs	r0, r0
 800e9d4:	0000      	movs	r0, r0
	...

0800e9d8 <scalbn>:
 800e9d8:	b570      	push	{r4, r5, r6, lr}
 800e9da:	ec55 4b10 	vmov	r4, r5, d0
 800e9de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	462b      	mov	r3, r5
 800e9e6:	b99a      	cbnz	r2, 800ea10 <scalbn+0x38>
 800e9e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e9ec:	4323      	orrs	r3, r4
 800e9ee:	d036      	beq.n	800ea5e <scalbn+0x86>
 800e9f0:	4b39      	ldr	r3, [pc, #228]	; (800ead8 <scalbn+0x100>)
 800e9f2:	4629      	mov	r1, r5
 800e9f4:	ee10 0a10 	vmov	r0, s0
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f7f1 fe25 	bl	8000648 <__aeabi_dmul>
 800e9fe:	4b37      	ldr	r3, [pc, #220]	; (800eadc <scalbn+0x104>)
 800ea00:	429e      	cmp	r6, r3
 800ea02:	4604      	mov	r4, r0
 800ea04:	460d      	mov	r5, r1
 800ea06:	da10      	bge.n	800ea2a <scalbn+0x52>
 800ea08:	a32b      	add	r3, pc, #172	; (adr r3, 800eab8 <scalbn+0xe0>)
 800ea0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0e:	e03a      	b.n	800ea86 <scalbn+0xae>
 800ea10:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ea14:	428a      	cmp	r2, r1
 800ea16:	d10c      	bne.n	800ea32 <scalbn+0x5a>
 800ea18:	ee10 2a10 	vmov	r2, s0
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	4629      	mov	r1, r5
 800ea20:	f7f1 fc5c 	bl	80002dc <__adddf3>
 800ea24:	4604      	mov	r4, r0
 800ea26:	460d      	mov	r5, r1
 800ea28:	e019      	b.n	800ea5e <scalbn+0x86>
 800ea2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea2e:	460b      	mov	r3, r1
 800ea30:	3a36      	subs	r2, #54	; 0x36
 800ea32:	4432      	add	r2, r6
 800ea34:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ea38:	428a      	cmp	r2, r1
 800ea3a:	dd08      	ble.n	800ea4e <scalbn+0x76>
 800ea3c:	2d00      	cmp	r5, #0
 800ea3e:	a120      	add	r1, pc, #128	; (adr r1, 800eac0 <scalbn+0xe8>)
 800ea40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea44:	da1c      	bge.n	800ea80 <scalbn+0xa8>
 800ea46:	a120      	add	r1, pc, #128	; (adr r1, 800eac8 <scalbn+0xf0>)
 800ea48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea4c:	e018      	b.n	800ea80 <scalbn+0xa8>
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	dd08      	ble.n	800ea64 <scalbn+0x8c>
 800ea52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ea5e:	ec45 4b10 	vmov	d0, r4, r5
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ea68:	da19      	bge.n	800ea9e <scalbn+0xc6>
 800ea6a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ea6e:	429e      	cmp	r6, r3
 800ea70:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ea74:	dd0a      	ble.n	800ea8c <scalbn+0xb4>
 800ea76:	a112      	add	r1, pc, #72	; (adr r1, 800eac0 <scalbn+0xe8>)
 800ea78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d1e2      	bne.n	800ea46 <scalbn+0x6e>
 800ea80:	a30f      	add	r3, pc, #60	; (adr r3, 800eac0 <scalbn+0xe8>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fddf 	bl	8000648 <__aeabi_dmul>
 800ea8a:	e7cb      	b.n	800ea24 <scalbn+0x4c>
 800ea8c:	a10a      	add	r1, pc, #40	; (adr r1, 800eab8 <scalbn+0xe0>)
 800ea8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d0b8      	beq.n	800ea08 <scalbn+0x30>
 800ea96:	a10e      	add	r1, pc, #56	; (adr r1, 800ead0 <scalbn+0xf8>)
 800ea98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea9c:	e7b4      	b.n	800ea08 <scalbn+0x30>
 800ea9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaa2:	3236      	adds	r2, #54	; 0x36
 800eaa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eaac:	4620      	mov	r0, r4
 800eaae:	4b0c      	ldr	r3, [pc, #48]	; (800eae0 <scalbn+0x108>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	e7e8      	b.n	800ea86 <scalbn+0xae>
 800eab4:	f3af 8000 	nop.w
 800eab8:	c2f8f359 	.word	0xc2f8f359
 800eabc:	01a56e1f 	.word	0x01a56e1f
 800eac0:	8800759c 	.word	0x8800759c
 800eac4:	7e37e43c 	.word	0x7e37e43c
 800eac8:	8800759c 	.word	0x8800759c
 800eacc:	fe37e43c 	.word	0xfe37e43c
 800ead0:	c2f8f359 	.word	0xc2f8f359
 800ead4:	81a56e1f 	.word	0x81a56e1f
 800ead8:	43500000 	.word	0x43500000
 800eadc:	ffff3cb0 	.word	0xffff3cb0
 800eae0:	3c900000 	.word	0x3c900000

0800eae4 <atanf>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	ee10 5a10 	vmov	r5, s0
 800eaea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800eaee:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800eaf2:	eef0 7a40 	vmov.f32	s15, s0
 800eaf6:	db10      	blt.n	800eb1a <atanf+0x36>
 800eaf8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eafc:	dd04      	ble.n	800eb08 <atanf+0x24>
 800eafe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800eb02:	eeb0 0a67 	vmov.f32	s0, s15
 800eb06:	bd38      	pop	{r3, r4, r5, pc}
 800eb08:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ec40 <atanf+0x15c>
 800eb0c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ec44 <atanf+0x160>
 800eb10:	2d00      	cmp	r5, #0
 800eb12:	bfd8      	it	le
 800eb14:	eef0 7a40 	vmovle.f32	s15, s0
 800eb18:	e7f3      	b.n	800eb02 <atanf+0x1e>
 800eb1a:	4b4b      	ldr	r3, [pc, #300]	; (800ec48 <atanf+0x164>)
 800eb1c:	429c      	cmp	r4, r3
 800eb1e:	dc10      	bgt.n	800eb42 <atanf+0x5e>
 800eb20:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800eb24:	da0a      	bge.n	800eb3c <atanf+0x58>
 800eb26:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ec4c <atanf+0x168>
 800eb2a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb32:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800eb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3a:	dce2      	bgt.n	800eb02 <atanf+0x1e>
 800eb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb40:	e013      	b.n	800eb6a <atanf+0x86>
 800eb42:	f000 f8a3 	bl	800ec8c <fabsf>
 800eb46:	4b42      	ldr	r3, [pc, #264]	; (800ec50 <atanf+0x16c>)
 800eb48:	429c      	cmp	r4, r3
 800eb4a:	dc4f      	bgt.n	800ebec <atanf+0x108>
 800eb4c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800eb50:	429c      	cmp	r4, r3
 800eb52:	dc41      	bgt.n	800ebd8 <atanf+0xf4>
 800eb54:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800eb58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800eb5c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800eb60:	2300      	movs	r3, #0
 800eb62:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eb6a:	1c5a      	adds	r2, r3, #1
 800eb6c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800eb70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ec54 <atanf+0x170>
 800eb74:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ec58 <atanf+0x174>
 800eb78:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ec5c <atanf+0x178>
 800eb7c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800eb80:	eee6 5a87 	vfma.f32	s11, s13, s14
 800eb84:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ec60 <atanf+0x17c>
 800eb88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb8c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ec64 <atanf+0x180>
 800eb90:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eb94:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ec68 <atanf+0x184>
 800eb98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ec6c <atanf+0x188>
 800eba0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800eba4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ec70 <atanf+0x18c>
 800eba8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ebac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ec74 <atanf+0x190>
 800ebb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ebb4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ec78 <atanf+0x194>
 800ebb8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ebbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ec7c <atanf+0x198>
 800ebc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ebc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ebc8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ebcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ebd0:	d121      	bne.n	800ec16 <atanf+0x132>
 800ebd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebd6:	e794      	b.n	800eb02 <atanf+0x1e>
 800ebd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ebdc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ebe0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ebea:	e7be      	b.n	800eb6a <atanf+0x86>
 800ebec:	4b24      	ldr	r3, [pc, #144]	; (800ec80 <atanf+0x19c>)
 800ebee:	429c      	cmp	r4, r3
 800ebf0:	dc0b      	bgt.n	800ec0a <atanf+0x126>
 800ebf2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ebf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebfa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ebfe:	2302      	movs	r3, #2
 800ec00:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ec04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec08:	e7af      	b.n	800eb6a <atanf+0x86>
 800ec0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ec0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ec12:	2303      	movs	r3, #3
 800ec14:	e7a9      	b.n	800eb6a <atanf+0x86>
 800ec16:	4a1b      	ldr	r2, [pc, #108]	; (800ec84 <atanf+0x1a0>)
 800ec18:	491b      	ldr	r1, [pc, #108]	; (800ec88 <atanf+0x1a4>)
 800ec1a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ec1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ec22:	ed93 0a00 	vldr	s0, [r3]
 800ec26:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ec2a:	ed92 0a00 	vldr	s0, [r2]
 800ec2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec32:	2d00      	cmp	r5, #0
 800ec34:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ec38:	bfb8      	it	lt
 800ec3a:	eef1 7a67 	vneglt.f32	s15, s15
 800ec3e:	e760      	b.n	800eb02 <atanf+0x1e>
 800ec40:	3fc90fdb 	.word	0x3fc90fdb
 800ec44:	bfc90fdb 	.word	0xbfc90fdb
 800ec48:	3edfffff 	.word	0x3edfffff
 800ec4c:	7149f2ca 	.word	0x7149f2ca
 800ec50:	3f97ffff 	.word	0x3f97ffff
 800ec54:	3c8569d7 	.word	0x3c8569d7
 800ec58:	3d4bda59 	.word	0x3d4bda59
 800ec5c:	bd6ef16b 	.word	0xbd6ef16b
 800ec60:	3d886b35 	.word	0x3d886b35
 800ec64:	3dba2e6e 	.word	0x3dba2e6e
 800ec68:	3e124925 	.word	0x3e124925
 800ec6c:	3eaaaaab 	.word	0x3eaaaaab
 800ec70:	bd15a221 	.word	0xbd15a221
 800ec74:	bd9d8795 	.word	0xbd9d8795
 800ec78:	bde38e38 	.word	0xbde38e38
 800ec7c:	be4ccccd 	.word	0xbe4ccccd
 800ec80:	401bffff 	.word	0x401bffff
 800ec84:	0800f1e8 	.word	0x0800f1e8
 800ec88:	0800f1f8 	.word	0x0800f1f8

0800ec8c <fabsf>:
 800ec8c:	ee10 3a10 	vmov	r3, s0
 800ec90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec94:	ee00 3a10 	vmov	s0, r3
 800ec98:	4770      	bx	lr
	...

0800ec9c <nanf>:
 800ec9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eca4 <nanf+0x8>
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop
 800eca4:	7fc00000 	.word	0x7fc00000

0800eca8 <_init>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	bf00      	nop
 800ecac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecae:	bc08      	pop	{r3}
 800ecb0:	469e      	mov	lr, r3
 800ecb2:	4770      	bx	lr

0800ecb4 <_fini>:
 800ecb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb6:	bf00      	nop
 800ecb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecba:	bc08      	pop	{r3}
 800ecbc:	469e      	mov	lr, r3
 800ecbe:	4770      	bx	lr
